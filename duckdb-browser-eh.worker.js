"use strict";var duckdb=(()=>{var Nh=Object.create;var ws=Object.defineProperty;var jh=Object.getOwnPropertyDescriptor;var Ph=Object.getOwnPropertyNames;var Vh=Object.getPrototypeOf,Hh=Object.prototype.hasOwnProperty;var zh=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var dc=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),wn=(r,t)=>{for(var e in t)ws(r,e,{get:t[e],enumerable:!0})},fc=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Ph(t))!Hh.call(r,i)&&i!==e&&ws(r,i,{get:()=>t[i],enumerable:!(n=jh(t,i))||n.enumerable});return r};var Aa=(r,t,e)=>(e=r!=null?Nh(Vh(r)):{},fc(t||!r||!r.__esModule?ws(e,"default",{value:r,enumerable:!0}):e,r)),Wh=r=>fc(ws({},"__esModule",{value:!0}),r);var Cc=dc((Yb,Is)=>{var hc,pc,_c,mc,yc,bc,gc,wc,vc,vs,Ta,Sc,Ic,Fc,Vn,Ac,Tc,Ec,xc,Dc,Bc,Oc,Rc,Mc,Ss;(function(r){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(n){r(e(t,e(n)))}):typeof Is=="object"&&typeof Is.exports=="object"?r(e(t,e(Is.exports))):r(e(t));function e(n,i){return n!==t&&(typeof Object.create=="function"?Object.defineProperty(n,"__esModule",{value:!0}):n.__esModule=!0),function(s,o){return n[s]=i?i(s,o):o}}})(function(r){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(n[s]=i[s])};hc=function(n,i){if(typeof i!="function"&&i!==null)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");t(n,i);function s(){this.constructor=n}n.prototype=i===null?Object.create(i):(s.prototype=i.prototype,new s)},pc=Object.assign||function(n){for(var i,s=1,o=arguments.length;s<o;s++){i=arguments[s];for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])}return n},_c=function(n,i){var s={};for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&i.indexOf(o)<0&&(s[o]=n[o]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var a=0,o=Object.getOwnPropertySymbols(n);a<o.length;a++)i.indexOf(o[a])<0&&Object.prototype.propertyIsEnumerable.call(n,o[a])&&(s[o[a]]=n[o[a]]);return s},mc=function(n,i,s,o){var a=arguments.length,c=a<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,s):o,f;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")c=Reflect.decorate(n,i,s,o);else for(var p=n.length-1;p>=0;p--)(f=n[p])&&(c=(a<3?f(c):a>3?f(i,s,c):f(i,s))||c);return a>3&&c&&Object.defineProperty(i,s,c),c},yc=function(n,i){return function(s,o){i(s,o,n)}},bc=function(n,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(n,i)},gc=function(n,i,s,o){function a(c){return c instanceof s?c:new s(function(f){f(c)})}return new(s||(s=Promise))(function(c,f){function p(v){try{g(o.next(v))}catch(nt){f(nt)}}function y(v){try{g(o.throw(v))}catch(nt){f(nt)}}function g(v){v.done?c(v.value):a(v.value).then(p,y)}g((o=o.apply(n,i||[])).next())})},wc=function(n,i){var s={label:0,sent:function(){if(c[0]&1)throw c[1];return c[1]},trys:[],ops:[]},o,a,c,f;return f={next:p(0),throw:p(1),return:p(2)},typeof Symbol=="function"&&(f[Symbol.iterator]=function(){return this}),f;function p(g){return function(v){return y([g,v])}}function y(g){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,a&&(c=g[0]&2?a.return:g[0]?a.throw||((c=a.return)&&c.call(a),0):a.next)&&!(c=c.call(a,g[1])).done)return c;switch(a=0,c&&(g=[g[0]&2,c.value]),g[0]){case 0:case 1:c=g;break;case 4:return s.label++,{value:g[1],done:!1};case 5:s.label++,a=g[1],g=[0];continue;case 7:g=s.ops.pop(),s.trys.pop();continue;default:if(c=s.trys,!(c=c.length>0&&c[c.length-1])&&(g[0]===6||g[0]===2)){s=0;continue}if(g[0]===3&&(!c||g[1]>c[0]&&g[1]<c[3])){s.label=g[1];break}if(g[0]===6&&s.label<c[1]){s.label=c[1],c=g;break}if(c&&s.label<c[2]){s.label=c[2],s.ops.push(g);break}c[2]&&s.ops.pop(),s.trys.pop();continue}g=i.call(n,s)}catch(v){g=[6,v],a=0}finally{o=c=0}if(g[0]&5)throw g[1];return{value:g[0]?g[1]:void 0,done:!0}}},vc=function(n,i){for(var s in n)s!=="default"&&!Object.prototype.hasOwnProperty.call(i,s)&&Ss(i,n,s)},Ss=Object.create?function(n,i,s,o){o===void 0&&(o=s);var a=Object.getOwnPropertyDescriptor(i,s);(!a||("get"in a?!i.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return i[s]}}),Object.defineProperty(n,o,a)}:function(n,i,s,o){o===void 0&&(o=s),n[o]=i[s]},vs=function(n){var i=typeof Symbol=="function"&&Symbol.iterator,s=i&&n[i],o=0;if(s)return s.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&o>=n.length&&(n=void 0),{value:n&&n[o++],done:!n}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},Ta=function(n,i){var s=typeof Symbol=="function"&&n[Symbol.iterator];if(!s)return n;var o=s.call(n),a,c=[],f;try{for(;(i===void 0||i-- >0)&&!(a=o.next()).done;)c.push(a.value)}catch(p){f={error:p}}finally{try{a&&!a.done&&(s=o.return)&&s.call(o)}finally{if(f)throw f.error}}return c},Sc=function(){for(var n=[],i=0;i<arguments.length;i++)n=n.concat(Ta(arguments[i]));return n},Ic=function(){for(var n=0,i=0,s=arguments.length;i<s;i++)n+=arguments[i].length;for(var o=Array(n),a=0,i=0;i<s;i++)for(var c=arguments[i],f=0,p=c.length;f<p;f++,a++)o[a]=c[f];return o},Fc=function(n,i,s){if(s||arguments.length===2)for(var o=0,a=i.length,c;o<a;o++)(c||!(o in i))&&(c||(c=Array.prototype.slice.call(i,0,o)),c[o]=i[o]);return n.concat(c||Array.prototype.slice.call(i))},Vn=function(n){return this instanceof Vn?(this.v=n,this):new Vn(n)},Ac=function(n,i,s){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=s.apply(n,i||[]),a,c=[];return a={},f("next"),f("throw"),f("return"),a[Symbol.asyncIterator]=function(){return this},a;function f(tt){o[tt]&&(a[tt]=function(_t){return new Promise(function(ft,ie){c.push([tt,_t,ft,ie])>1||p(tt,_t)})})}function p(tt,_t){try{y(o[tt](_t))}catch(ft){nt(c[0][3],ft)}}function y(tt){tt.value instanceof Vn?Promise.resolve(tt.value.v).then(g,v):nt(c[0][2],tt)}function g(tt){p("next",tt)}function v(tt){p("throw",tt)}function nt(tt,_t){tt(_t),c.shift(),c.length&&p(c[0][0],c[0][1])}},Tc=function(n){var i,s;return i={},o("next"),o("throw",function(a){throw a}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(a,c){i[a]=n[a]?function(f){return(s=!s)?{value:Vn(n[a](f)),done:a==="return"}:c?c(f):f}:c}},Ec=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=n[Symbol.asyncIterator],s;return i?i.call(n):(n=typeof vs=="function"?vs(n):n[Symbol.iterator](),s={},o("next"),o("throw"),o("return"),s[Symbol.asyncIterator]=function(){return this},s);function o(c){s[c]=n[c]&&function(f){return new Promise(function(p,y){f=n[c](f),a(p,y,f.done,f.value)})}}function a(c,f,p,y){Promise.resolve(y).then(function(g){c({value:g,done:p})},f)}},xc=function(n,i){return Object.defineProperty?Object.defineProperty(n,"raw",{value:i}):n.raw=i,n};var e=Object.create?function(n,i){Object.defineProperty(n,"default",{enumerable:!0,value:i})}:function(n,i){n.default=i};Dc=function(n){if(n&&n.__esModule)return n;var i={};if(n!=null)for(var s in n)s!=="default"&&Object.prototype.hasOwnProperty.call(n,s)&&Ss(i,n,s);return e(i,n),i},Bc=function(n){return n&&n.__esModule?n:{default:n}},Oc=function(n,i,s,o){if(s==="a"&&!o)throw new TypeError("Private accessor was defined without a getter");if(typeof i=="function"?n!==i||!o:!i.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return s==="m"?o:s==="a"?o.call(n):o?o.value:i.get(n)},Rc=function(n,i,s,o,a){if(o==="m")throw new TypeError("Private method is not writable");if(o==="a"&&!a)throw new TypeError("Private accessor was defined without a setter");if(typeof i=="function"?n!==i||!a:!i.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return o==="a"?a.call(n,s):a?a.value=s:i.set(n,s),s},Mc=function(n,i){if(i===null||typeof i!="object"&&typeof i!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof n=="function"?i===n:n.has(i)},r("__extends",hc),r("__assign",pc),r("__rest",_c),r("__decorate",mc),r("__param",yc),r("__metadata",bc),r("__awaiter",gc),r("__generator",wc),r("__exportStar",vc),r("__createBinding",Ss),r("__values",vs),r("__read",Ta),r("__spread",Sc),r("__spreadArrays",Ic),r("__spreadArray",Fc),r("__await",Vn),r("__asyncGenerator",Ac),r("__asyncDelegator",Tc),r("__asyncValues",Ec),r("__makeTemplateObject",xc),r("__importStar",Dc),r("__importDefault",Bc),r("__classPrivateFieldGet",Oc),r("__classPrivateFieldSet",Rc),r("__classPrivateFieldIn",Mc)})});var Ad=dc((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,t){return function(e){return new Sha256(t,!0).update(e)[r]()}},createMethod=function(r){var t=createOutputMethod("hex",r);NODE_JS&&(t=nodeWrap(t,r)),t.create=function(){return new Sha256(r)},t.update=function(i){return t.create().update(i)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,r)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[r]()}},createHmacMethod=function(r){var t=createHmacOutputMethod("hex",r);t.create=function(i){return new HmacSha256(i,r)},t.update=function(i,s){return t.create(i).update(s)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,r)}return t};function Sha256(r,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var t,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,i=0,s,o=r.length,a=this.blocks;i<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),t)for(s=this.start;i<o&&s<64;++i)a[s>>2]|=r[i]<<SHIFT[s++&3];else for(s=this.start;i<o&&s<64;++i)n=r.charCodeAt(i),n<128?a[s>>2]|=n<<SHIFT[s++&3]:n<2048?(a[s>>2]|=(192|n>>6)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):n<55296||n>=57344?(a[s>>2]|=(224|n>>12)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):(n=65536+((n&1023)<<10|r.charCodeAt(++i)&1023),a[s>>2]|=(240|n>>18)<<SHIFT[s++&3],a[s>>2]|=(128|n>>12&63)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]);this.lastByteIndex=s,this.bytes+=s-this.start,s>=64?(this.block=a[16],this.start=s-64,this.hash(),this.hashed=!0):this.start=s}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,t=this.lastByteIndex;r[16]=this.block,r[t>>2]|=EXTRA[t&3],this.block=r[16],t>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=this.blocks,f,p,y,g,v,nt,tt,_t,ft,ie,Fe;for(f=16;f<64;++f)v=c[f-15],p=(v>>>7|v<<25)^(v>>>18|v<<14)^v>>>3,v=c[f-2],y=(v>>>17|v<<15)^(v>>>19|v<<13)^v>>>10,c[f]=c[f-16]+p+c[f-7]+y<<0;for(Fe=t&e,f=0;f<64;f+=4)this.first?(this.is224?(_t=300032,v=c[0]-1413257819,a=v-150054599<<0,n=v+24177077<<0):(_t=704751109,v=c[0]-210244248,a=v-1521486534<<0,n=v+143694565<<0),this.first=!1):(p=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),y=(i>>>6|i<<26)^(i>>>11|i<<21)^(i>>>25|i<<7),_t=r&t,g=_t^r&e^Fe,tt=i&s^~i&o,v=a+y+tt+K[f]+c[f],nt=p+g,a=n+v<<0,n=v+nt<<0),p=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),y=(a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7),ft=n&r,g=ft^n&t^_t,tt=a&i^~a&s,v=o+y+tt+K[f+1]+c[f+1],nt=p+g,o=e+v<<0,e=v+nt<<0,p=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),y=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),ie=e&n,g=ie^e&r^ft,tt=o&a^~o&i,v=s+y+tt+K[f+2]+c[f+2],nt=p+g,s=t+v<<0,t=v+nt<<0,p=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),y=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),Fe=t&e,g=Fe^t&n^ie,tt=s&o^~s&a,v=i+y+tt+K[f+3]+c[f+3],nt=p+g,i=r+v<<0,r=v+nt<<0;this.h0=this.h0+r<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+i<<0,this.h5=this.h5+s<<0,this.h6=this.h6+o<<0,this.h7=this.h7+a<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15];return this.is224||(c+=HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]),c},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=[r>>24&255,r>>16&255,r>>8&255,r&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,i>>24&255,i>>16&255,i>>8&255,i&255,s>>24&255,s>>16&255,s>>8&255,s&255,o>>24&255,o>>16&255,o>>8&255,o&255];return this.is224||c.push(a>>24&255,a>>16&255,a>>8&255,a&255),c},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),t=new DataView(r);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),r};function HmacSha256(r,t,e){var n,i=typeof r;if(i==="string"){var s=[],o=r.length,a=0,c;for(n=0;n<o;++n)c=r.charCodeAt(n),c<128?s[a++]=c:c<2048?(s[a++]=192|c>>6,s[a++]=128|c&63):c<55296||c>=57344?(s[a++]=224|c>>12,s[a++]=128|c>>6&63,s[a++]=128|c&63):(c=65536+((c&1023)<<10|r.charCodeAt(++n)&1023),s[a++]=240|c>>18,s[a++]=128|c>>12&63,s[a++]=128|c>>6&63,s[a++]=128|c&63);r=s}else if(i==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(t,!0).update(r).array());var f=[],p=[];for(n=0;n<64;++n){var y=r[n]||0;f[n]=92^y,p[n]=54^y}Sha256.call(this,t,e),this.update(p),this.oKeyPad=f,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var km={};wn(km,{registerWorker:()=>xd});var Lc=Aa(Cc(),1),{__extends:$b,__assign:Gb,__rest:kc,__decorate:Xb,__param:Kb,__metadata:Jb,__awaiter:I,__generator:qb,__exportStar:Qb,__createBinding:Zb,__values:tg,__read:eg,__spread:rg,__spreadArrays:ng,__spreadArray:ig,__await:X,__asyncGenerator:de,__asyncDelegator:Hn,__asyncValues:Ce,__makeTemplateObject:sg,__importStar:og,__importDefault:ag,__classPrivateFieldGet:lg,__classPrivateFieldSet:cg,__classPrivateFieldIn:ug}=Lc.default;var Ra={};wn(Ra,{compareArrayLike:()=>Oa,joinUint8Arrays:()=>Te,memcpy:()=>zn,rebaseValueOffsets:()=>Fi,toArrayBufferView:()=>q,toArrayBufferViewAsyncIterator:()=>$e,toArrayBufferViewIterator:()=>cr,toBigInt64Array:()=>qh,toBigUint64Array:()=>tp,toFloat32Array:()=>ep,toFloat32ArrayAsyncIterator:()=>yp,toFloat32ArrayIterator:()=>cp,toFloat64Array:()=>rp,toFloat64ArrayAsyncIterator:()=>bp,toFloat64ArrayIterator:()=>up,toInt16Array:()=>Jh,toInt16ArrayAsyncIterator:()=>hp,toInt16ArrayIterator:()=>sp,toInt32Array:()=>vn,toInt32ArrayAsyncIterator:()=>pp,toInt32ArrayIterator:()=>op,toInt8Array:()=>Kh,toInt8ArrayAsyncIterator:()=>fp,toInt8ArrayIterator:()=>ip,toUint16Array:()=>Qh,toUint16ArrayAsyncIterator:()=>_p,toUint16ArrayIterator:()=>ap,toUint32Array:()=>Zh,toUint32ArrayAsyncIterator:()=>mp,toUint32ArrayIterator:()=>lp,toUint8Array:()=>j,toUint8ArrayAsyncIterator:()=>Ba,toUint8ArrayIterator:()=>Da,toUint8ClampedArray:()=>np,toUint8ClampedArrayAsyncIterator:()=>gp,toUint8ClampedArrayIterator:()=>dp});var Yh=new TextDecoder("utf-8"),Si=r=>Yh.decode(r),$h=new TextEncoder,Zr=r=>$h.encode(r);var[hg,Fs]=(()=>{let r=()=>{throw new Error("BigInt is not available in this environment")};function t(){throw r()}return t.asIntN=()=>{throw r()},t.asUintN=()=>{throw r()},typeof BigInt<"u"?[BigInt,!0]:[t,!1]})(),[Le,pg]=(()=>{let r=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[ke,_g]=(()=>{let r=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var Gh=r=>typeof r=="number",Uc=r=>typeof r=="boolean",Pt=r=>typeof r=="function",oe=r=>r!=null&&Object(r)===r,We=r=>oe(r)&&Pt(r.then);var Ye=r=>oe(r)&&Pt(r[Symbol.iterator]),Ue=r=>oe(r)&&Pt(r[Symbol.asyncIterator]),As=r=>oe(r)&&oe(r.schema);var Ts=r=>oe(r)&&"done"in r&&"value"in r;var Es=r=>oe(r)&&Pt(r.stat)&&Gh(r.fd);var xs=r=>oe(r)&&Ii(r.body),Ds=r=>"_getDOMStream"in r&&"_getNodeStream"in r,Nc=r=>oe(r)&&Pt(r.abort)&&Pt(r.getWriter)&&!Ds(r),Ii=r=>oe(r)&&Pt(r.cancel)&&Pt(r.getReader)&&!Ds(r),jc=r=>oe(r)&&Pt(r.end)&&Pt(r.write)&&Uc(r.writable)&&!Ds(r),Bs=r=>oe(r)&&Pt(r.read)&&Pt(r.pipe)&&Uc(r.readable)&&!Ds(r),Pc=r=>oe(r)&&Pt(r.clear)&&Pt(r.bytes)&&Pt(r.position)&&Pt(r.setPosition)&&Pt(r.capacity)&&Pt(r.getBufferIdentifier)&&Pt(r.createLong);var xa=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function Xh(r){let t=r[0]?[r[0]]:[],e,n,i,s;for(let o,a,c=0,f=0,p=r.length;++c<p;){if(o=t[f],a=r[c],!o||!a||o.buffer!==a.buffer||a.byteOffset<o.byteOffset){a&&(t[++f]=a);continue}if({byteOffset:e,byteLength:i}=o,{byteOffset:n,byteLength:s}=a,e+i<n||n+s<e){a&&(t[++f]=a);continue}t[f]=new Uint8Array(o.buffer,e,n-e+s)}return t}function zn(r,t,e=0,n=t.byteLength){let i=r.byteLength,s=new Uint8Array(r.buffer,r.byteOffset,i),o=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,i));return s.set(o,e),r}function Te(r,t){let e=Xh(r),n=e.reduce((p,y)=>p+y.byteLength,0),i,s,o,a=0,c=-1,f=Math.min(t||Number.POSITIVE_INFINITY,n);for(let p=e.length;++c<p;){if(i=e[c],s=i.subarray(0,Math.min(i.length,f-a)),f<=a+s.length){s.length<i.length?e[c]=i.subarray(s.length):s.length===i.length&&c++,o?zn(o,s,a):o=s;break}zn(o||(o=new Uint8Array(f)),s,a),a+=s.length}return[o||new Uint8Array(0),e.slice(c),n-(o?o.byteLength:0)]}function q(r,t){let e=Ts(t)?t.value:t;return e instanceof r?r===Uint8Array?new r(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=Zr(e)),e instanceof ArrayBuffer?new r(e):e instanceof xa?new r(e):Pc(e)?q(r,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new r(0):new r(e.buffer,e.byteOffset,e.byteLength/r.BYTES_PER_ELEMENT):r.from(e)):new r(0)}var Kh=r=>q(Int8Array,r),Jh=r=>q(Int16Array,r),vn=r=>q(Int32Array,r),qh=r=>q(Le,r),j=r=>q(Uint8Array,r),Qh=r=>q(Uint16Array,r),Zh=r=>q(Uint32Array,r),tp=r=>q(ke,r),ep=r=>q(Float32Array,r),rp=r=>q(Float64Array,r),np=r=>q(Uint8ClampedArray,r),Ea=r=>(r.next(),r);function*cr(r,t){let e=function*(i){yield i},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof xa?e(t):Ye(t)?t:e(t);return yield*Ea(function*(i){let s=null;do s=i.next(yield q(r,s));while(!s.done)}(n[Symbol.iterator]())),new r}var ip=r=>cr(Int8Array,r),sp=r=>cr(Int16Array,r),op=r=>cr(Int32Array,r),Da=r=>cr(Uint8Array,r),ap=r=>cr(Uint16Array,r),lp=r=>cr(Uint32Array,r),cp=r=>cr(Float32Array,r),up=r=>cr(Float64Array,r),dp=r=>cr(Uint8ClampedArray,r);function $e(r,t){return de(this,arguments,function*(){if(We(t))return yield X(yield X(yield*Hn(Ce($e(r,yield X(t))))));let n=function(o){return de(this,arguments,function*(){yield yield X(yield X(o))})},i=function(o){return de(this,arguments,function*(){yield X(yield*Hn(Ce(Ea(function*(a){let c=null;do c=a.next(yield c==null?void 0:c.value);while(!c.done)}(o[Symbol.iterator]())))))})},s=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof xa?n(t):Ye(t)?i(t):Ue(t)?t:n(t);return yield X(yield*Hn(Ce(Ea(function(o){return de(this,arguments,function*(){let a=null;do a=yield X(o.next(yield yield X(q(r,a))));while(!a.done)})}(s[Symbol.asyncIterator]()))))),yield X(new r)})}var fp=r=>$e(Int8Array,r),hp=r=>$e(Int16Array,r),pp=r=>$e(Int32Array,r),Ba=r=>$e(Uint8Array,r),_p=r=>$e(Uint16Array,r),mp=r=>$e(Uint32Array,r),yp=r=>$e(Float32Array,r),bp=r=>$e(Float64Array,r),gp=r=>$e(Uint8ClampedArray,r);function Fi(r,t,e){if(r!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=r}return e}function Oa(r,t){let e=0,n=r.length;if(n!==t.length)return!1;if(n>0)do if(r[e]!==t[e])return!1;while(++e<n);return!0}var Kt={fromIterable(r){return Os(wp(r))},fromAsyncIterable(r){return Os(vp(r))},fromDOMStream(r){return Os(Sp(r))},fromNodeStream(r){return Os(Ip(r))},toDOMStream(r,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(r,t){throw new Error('"toNodeStream" not available in this environment')}},Os=r=>(r.next(),r);function*wp(r){let t,e=!1,n=[],i,s,o,a=0;function c(){return s==="peek"?Te(n,o)[0]:([i,n,a]=Te(n,o),i)}({cmd:s,size:o}=yield null);let f=Da(r)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(o-a)?f.next():f.next(o-a),!t&&i.byteLength>0&&(n.push(i),a+=i.byteLength),t||o<=a)do({cmd:s,size:o}=yield c());while(o<a);while(!t)}catch(p){(e=!0)&&typeof f.throw=="function"&&f.throw(p)}finally{e===!1&&typeof f.return=="function"&&f.return(null)}return null}function vp(r){return de(this,arguments,function*(){let e,n=!1,i=[],s,o,a,c=0;function f(){return o==="peek"?Te(i,a)[0]:([s,i,c]=Te(i,a),s)}({cmd:o,size:a}=yield yield X(null));let p=Ba(r)[Symbol.asyncIterator]();try{do if({done:e,value:s}=Number.isNaN(a-c)?yield X(p.next()):yield X(p.next(a-c)),!e&&s.byteLength>0&&(i.push(s),c+=s.byteLength),e||a<=c)do({cmd:o,size:a}=yield yield X(f()));while(a<c);while(!e)}catch(y){(n=!0)&&typeof p.throw=="function"&&(yield X(p.throw(y)))}finally{n===!1&&typeof p.return=="function"&&(yield X(p.return(new Uint8Array(0))))}return yield X(null)})}function Sp(r){return de(this,arguments,function*(){let e=!1,n=!1,i=[],s,o,a,c=0;function f(){return o==="peek"?Te(i,a)[0]:([s,i,c]=Te(i,a),s)}({cmd:o,size:a}=yield yield X(null));let p=new Ca(r);try{do if({done:e,value:s}=Number.isNaN(a-c)?yield X(p.read()):yield X(p.read(a-c)),!e&&s.byteLength>0&&(i.push(j(s)),c+=s.byteLength),e||a<=c)do({cmd:o,size:a}=yield yield X(f()));while(a<c);while(!e)}catch(y){(n=!0)&&(yield X(p.cancel(y)))}finally{n===!1?yield X(p.cancel()):r.locked&&p.releaseLock()}return yield X(null)})}var Ca=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return I(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return I(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=j(e)),e})}},Ma=(r,t)=>{let e=i=>n([t,i]),n;return[t,e,new Promise(i=>(n=i)&&r.once(t,e))]};function Ip(r){return de(this,arguments,function*(){let e=[],n="error",i=!1,s=null,o,a,c=0,f=[],p;function y(){return o==="peek"?Te(f,a)[0]:([p,f,c]=Te(f,a),p)}if({cmd:o,size:a}=yield yield X(null),r.isTTY)return yield yield X(new Uint8Array(0)),yield X(null);try{e[0]=Ma(r,"end"),e[1]=Ma(r,"error");do{if(e[2]=Ma(r,"readable"),[n,s]=yield X(Promise.race(e.map(v=>v[2]))),n==="error")break;if((i=n==="end")||(Number.isFinite(a-c)?(p=j(r.read(a-c)),p.byteLength<a-c&&(p=j(r.read()))):p=j(r.read()),p.byteLength>0&&(f.push(p),c+=p.byteLength)),i||a<=c)do({cmd:o,size:a}=yield yield X(y()));while(a<c)}while(!i)}finally{yield X(g(e,n==="error"?s:null))}return yield X(null);function g(v,nt){return p=f=null,new Promise((tt,_t)=>{for(let[ft,ie]of v)r.off(ft,ie);try{let ft=r.destroy;ft&&ft.call(r,nt),nt=void 0}catch(ft){nt=ft||nt}finally{nt!=null?_t(nt):tt()}})}})}var Ht;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Ht||(Ht={}));var Ft;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Ft||(Ft={}));var vt;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(vt||(vt={}));var Jt;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Jt||(Jt={}));var Z;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(Z||(Z={}));var ae;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(ae||(ae={}));var it;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(it||(it={}));var h;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.Float=3]="Float",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct=13]="Struct",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Dictionary=-1]="Dictionary",r[r.Int8=-2]="Int8",r[r.Int16=-3]="Int16",r[r.Int32=-4]="Int32",r[r.Int64=-5]="Int64",r[r.Uint8=-6]="Uint8",r[r.Uint16=-7]="Uint16",r[r.Uint32=-8]="Uint32",r[r.Uint64=-9]="Uint64",r[r.Float16=-10]="Float16",r[r.Float32=-11]="Float32",r[r.Float64=-12]="Float64",r[r.DateDay=-13]="DateDay",r[r.DateMillisecond=-14]="DateMillisecond",r[r.TimestampSecond=-15]="TimestampSecond",r[r.TimestampMillisecond=-16]="TimestampMillisecond",r[r.TimestampMicrosecond=-17]="TimestampMicrosecond",r[r.TimestampNanosecond=-18]="TimestampNanosecond",r[r.TimeSecond=-19]="TimeSecond",r[r.TimeMillisecond=-20]="TimeMillisecond",r[r.TimeMicrosecond=-21]="TimeMicrosecond",r[r.TimeNanosecond=-22]="TimeNanosecond",r[r.DenseUnion=-23]="DenseUnion",r[r.SparseUnion=-24]="SparseUnion",r[r.IntervalDayTime=-25]="IntervalDayTime",r[r.IntervalYearMonth=-26]="IntervalYearMonth"})(h||(h={}));var Ne;(function(r){r[r.OFFSET=0]="OFFSET",r[r.DATA=1]="DATA",r[r.VALIDITY=2]="VALIDITY",r[r.TYPE=3]="TYPE"})(Ne||(Ne={}));var qa={};wn(qa,{clampIndex:()=>p_,clampRange:()=>Ei,createElementComparator:()=>nn});var Fp=void 0;function Ge(r){if(r===null)return"null";if(r===Fp)return"undefined";switch(typeof r){case"number":return`${r}`;case"bigint":return`${r}`;case"string":return`"${r}"`}return typeof r[Symbol.toPrimitive]=="function"?r[Symbol.toPrimitive]("string"):ArrayBuffer.isView(r)?r instanceof Le||r instanceof ke?`[${[...r].map(t=>Ge(t))}]`:`[${r}]`:ArrayBuffer.isView(r)?`[${r}]`:JSON.stringify(r,(t,e)=>typeof e=="bigint"?`${e}`:e)}var ka={};wn(ka,{BN:()=>Sn,bignumToBigInt:()=>Rs,bignumToString:()=>tn,isArrowBigNumSymbol:()=>Vc});var Vc=Symbol.for("isArrowBigNum");function Xe(r,...t){return t.length===0?Object.setPrototypeOf(q(this.TypedArray,r),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(r,...t),this.constructor.prototype)}Xe.prototype[Vc]=!0;Xe.prototype.toJSON=function(){return`"${tn(this)}"`};Xe.prototype.valueOf=function(){return Hc(this)};Xe.prototype.toString=function(){return tn(this)};Xe.prototype[Symbol.toPrimitive]=function(r="default"){switch(r){case"number":return Hc(this);case"string":return tn(this);case"default":return Rs(this)}return tn(this)};function Wn(...r){return Xe.apply(this,r)}function Yn(...r){return Xe.apply(this,r)}function Ai(...r){return Xe.apply(this,r)}Object.setPrototypeOf(Wn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(Yn.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(Ai.prototype,Object.create(Uint32Array.prototype));Object.assign(Wn.prototype,Xe.prototype,{constructor:Wn,signed:!0,TypedArray:Int32Array,BigIntArray:Le});Object.assign(Yn.prototype,Xe.prototype,{constructor:Yn,signed:!1,TypedArray:Uint32Array,BigIntArray:ke});Object.assign(Ai.prototype,Xe.prototype,{constructor:Ai,signed:!0,TypedArray:Uint32Array,BigIntArray:ke});function Hc(r){let{buffer:t,byteOffset:e,length:n,signed:i}=r,s=new ke(t,e,n),o=i&&s[s.length-1]&BigInt(1)<<BigInt(63),a=BigInt(o?1:0),c=BigInt(0);if(o){for(let f of s)a+=~f*(BigInt(1)<<BigInt(32)*c++);a*=BigInt(-1)}else for(let f of s)a+=f*(BigInt(1)<<BigInt(32)*c++);return a}var tn,Rs;Fs?(Rs=r=>r.byteLength===8?new r.BigIntArray(r.buffer,r.byteOffset,1)[0]:La(r),tn=r=>r.byteLength===8?`${new r.BigIntArray(r.buffer,r.byteOffset,1)[0]}`:La(r)):(tn=La,Rs=tn);function La(r){let t="",e=new Uint32Array(2),n=new Uint16Array(r.buffer,r.byteOffset,r.byteLength/2),i=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),s=-1,o=n.length-1;do{for(e[0]=n[s=0];s<o;)n[s++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[s];n[s]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t=`${e[0]}${t}`}while(i[0]||i[1]||i[2]||i[3]);return t!=null?t:"0"}var Sn=class{static new(t,e){switch(e){case!0:return new Wn(t);case!1:return new Yn(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case Le:return new Wn(t)}return t.byteLength===16?new Ai(t):new Yn(t)}static signed(t){return new Wn(t)}static unsigned(t){return new Yn(t)}static decimal(t){return new Ai(t)}constructor(t,e){return Sn.new(t,e)}};var zc,Wc,Yc,$c,Gc,Xc,Kc,Jc,qc,Qc,Zc,tu,eu,ru,nu,iu,su,ou,au,x=class{static isNull(t){return(t==null?void 0:t.typeId)===h.Null}static isInt(t){return(t==null?void 0:t.typeId)===h.Int}static isFloat(t){return(t==null?void 0:t.typeId)===h.Float}static isBinary(t){return(t==null?void 0:t.typeId)===h.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===h.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===h.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===h.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===h.Date}static isTime(t){return(t==null?void 0:t.typeId)===h.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===h.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===h.Interval}static isList(t){return(t==null?void 0:t.typeId)===h.List}static isStruct(t){return(t==null?void 0:t.typeId)===h.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===h.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===h.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===h.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===h.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===h.Dictionary}static isDenseUnion(t){return x.isUnion(t)&&t.mode===Ft.Dense}static isSparseUnion(t){return x.isUnion(t)&&t.mode===Ft.Sparse}get typeId(){return h.NONE}};zc=Symbol.toStringTag;x[zc]=(r=>(r.children=null,r.ArrayType=Array,r[Symbol.toStringTag]="DataType"))(x.prototype);var le=class extends x{toString(){return"Null"}get typeId(){return h.Null}};Wc=Symbol.toStringTag;le[Wc]=(r=>r[Symbol.toStringTag]="Null")(le.prototype);var Ot=class extends x{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return h.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?Le:ke}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`${this.isSigned?"I":"Ui"}nt${this.bitWidth}`}};Yc=Symbol.toStringTag;Ot[Yc]=(r=>(r.isSigned=null,r.bitWidth=null,r[Symbol.toStringTag]="Int"))(Ot.prototype);var Ms=class extends Ot{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},Cs=class extends Ot{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},ur=class extends Ot{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},Ls=class extends Ot{constructor(){super(!0,64)}get ArrayType(){return Le}},ks=class extends Ot{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},Us=class extends Ot{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},Ns=class extends Ot{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},js=class extends Ot{constructor(){super(!1,64)}get ArrayType(){return ke}};Object.defineProperty(Ms.prototype,"ArrayType",{value:Int8Array});Object.defineProperty(Cs.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(ur.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(Ls.prototype,"ArrayType",{value:Le});Object.defineProperty(ks.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(Us.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Ns.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(js.prototype,"ArrayType",{value:ke});var fe=class extends x{constructor(t){super(),this.precision=t}get typeId(){return h.Float}get ArrayType(){switch(this.precision){case vt.HALF:return Uint16Array;case vt.SINGLE:return Float32Array;case vt.DOUBLE:return Float64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`Float${this.precision<<5||16}`}};$c=Symbol.toStringTag;fe[$c]=(r=>(r.precision=null,r[Symbol.toStringTag]="Float"))(fe.prototype);var Ps=class extends fe{constructor(){super(vt.HALF)}},Vs=class extends fe{constructor(){super(vt.SINGLE)}},Hs=class extends fe{constructor(){super(vt.DOUBLE)}};Object.defineProperty(Ps.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Vs.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(Hs.prototype,"ArrayType",{value:Float64Array});var Or=class extends x{constructor(){super()}get typeId(){return h.Binary}toString(){return"Binary"}};Gc=Symbol.toStringTag;Or[Gc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Binary"))(Or.prototype);var Rr=class extends x{constructor(){super()}get typeId(){return h.Utf8}toString(){return"Utf8"}};Xc=Symbol.toStringTag;Rr[Xc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Utf8"))(Rr.prototype);var Mr=class extends x{constructor(){super()}get typeId(){return h.Bool}toString(){return"Bool"}};Kc=Symbol.toStringTag;Mr[Kc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Bool"))(Mr.prototype);var Cr=class extends x{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return h.Decimal}toString(){return`Decimal[${this.precision}e${this.scale>0?"+":""}${this.scale}]`}};Jc=Symbol.toStringTag;Cr[Jc]=(r=>(r.scale=null,r.precision=null,r.ArrayType=Uint32Array,r[Symbol.toStringTag]="Decimal"))(Cr.prototype);var Lr=class extends x{constructor(t){super(),this.unit=t}get typeId(){return h.Date}toString(){return`Date${(this.unit+1)*32}<${Jt[this.unit]}>`}};qc=Symbol.toStringTag;Lr[qc]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Date"))(Lr.prototype);var Ke=class extends x{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return h.Time}toString(){return`Time${this.bitWidth}<${Z[this.unit]}>`}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return Le}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}};Qc=Symbol.toStringTag;Ke[Qc]=(r=>(r.unit=null,r.bitWidth=null,r[Symbol.toStringTag]="Time"))(Ke.prototype);var kr=class extends x{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return h.Timestamp}toString(){return`Timestamp<${Z[this.unit]}${this.timezone?`, ${this.timezone}`:""}>`}};Zc=Symbol.toStringTag;kr[Zc]=(r=>(r.unit=null,r.timezone=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Timestamp"))(kr.prototype);var Ur=class extends x{constructor(t){super(),this.unit=t}get typeId(){return h.Interval}toString(){return`Interval<${ae[this.unit]}>`}};tu=Symbol.toStringTag;Ur[tu]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Interval"))(Ur.prototype);var Je=class extends x{constructor(t){super(),this.children=[t]}get typeId(){return h.List}toString(){return`List<${this.valueType}>`}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};eu=Symbol.toStringTag;Je[eu]=(r=>(r.children=null,r[Symbol.toStringTag]="List"))(Je.prototype);var mt=class extends x{constructor(t){super(),this.children=t}get typeId(){return h.Struct}toString(){return`Struct<{${this.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};ru=Symbol.toStringTag;mt[ru]=(r=>(r.children=null,r[Symbol.toStringTag]="Struct"))(mt.prototype);var qe=class extends x{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((i,s,o)=>(i[s]=o)&&i||i,Object.create(null))}get typeId(){return h.Union}toString(){return`${this[Symbol.toStringTag]}<${this.children.map(t=>`${t.type}`).join(" | ")}>`}};nu=Symbol.toStringTag;qe[nu]=(r=>(r.mode=null,r.typeIds=null,r.children=null,r.typeIdToChildIndex=null,r.ArrayType=Int8Array,r[Symbol.toStringTag]="Union"))(qe.prototype);var Nr=class extends x{constructor(t){super(),this.byteWidth=t}get typeId(){return h.FixedSizeBinary}toString(){return`FixedSizeBinary[${this.byteWidth}]`}};iu=Symbol.toStringTag;Nr[iu]=(r=>(r.byteWidth=null,r.ArrayType=Uint8Array,r[Symbol.toStringTag]="FixedSizeBinary"))(Nr.prototype);var Qe=class extends x{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return h.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return`FixedSizeList[${this.listSize}]<${this.valueType}>`}};su=Symbol.toStringTag;Qe[su]=(r=>(r.children=null,r.listSize=null,r[Symbol.toStringTag]="FixedSizeList"))(Qe.prototype);var Ze=class extends x{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return h.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return`Map<{${this.children[0].type.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};ou=Symbol.toStringTag;Ze[ou]=(r=>(r.children=null,r.keysSorted=null,r[Symbol.toStringTag]="Map_"))(Ze.prototype);var Ap=(r=>()=>++r)(-1),Ee=class extends x{constructor(t,e,n,i){super(),this.indices=e,this.dictionary=t,this.isOrdered=i||!1,this.id=n==null?Ap():typeof n=="number"?n:n.low}get typeId(){return h.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return`Dictionary<${this.indices}, ${this.dictionary}>`}};au=Symbol.toStringTag;Ee[au]=(r=>(r.id=null,r.indices=null,r.isOrdered=null,r.dictionary=null,r[Symbol.toStringTag]="Dictionary"))(Ee.prototype);function xe(r){let t=r;switch(r.typeId){case h.Decimal:return r.bitWidth/32;case h.Timestamp:return 2;case h.Date:return 1+t.unit;case h.Interval:return 1+t.unit;case h.FixedSizeList:return t.listSize;case h.FixedSizeBinary:return t.byteWidth;default:return 1}}var R=class{visitMany(t,...e){return t.map((n,i)=>this.visit(n,...e.map(s=>s[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return Tp(this,t,e)}getVisitFnByTypeId(t,e=!0){return $n(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function Tp(r,t,e=!0){return typeof t=="number"?$n(r,t,e):typeof t=="string"&&t in h?$n(r,h[t],e):t&&t instanceof x?$n(r,lu(t),e):(t==null?void 0:t.type)&&t.type instanceof x?$n(r,lu(t.type),e):$n(r,h.NONE,e)}function $n(r,t,e=!0){let n=null;switch(t){case h.Null:n=r.visitNull;break;case h.Bool:n=r.visitBool;break;case h.Int:n=r.visitInt;break;case h.Int8:n=r.visitInt8||r.visitInt;break;case h.Int16:n=r.visitInt16||r.visitInt;break;case h.Int32:n=r.visitInt32||r.visitInt;break;case h.Int64:n=r.visitInt64||r.visitInt;break;case h.Uint8:n=r.visitUint8||r.visitInt;break;case h.Uint16:n=r.visitUint16||r.visitInt;break;case h.Uint32:n=r.visitUint32||r.visitInt;break;case h.Uint64:n=r.visitUint64||r.visitInt;break;case h.Float:n=r.visitFloat;break;case h.Float16:n=r.visitFloat16||r.visitFloat;break;case h.Float32:n=r.visitFloat32||r.visitFloat;break;case h.Float64:n=r.visitFloat64||r.visitFloat;break;case h.Utf8:n=r.visitUtf8;break;case h.Binary:n=r.visitBinary;break;case h.FixedSizeBinary:n=r.visitFixedSizeBinary;break;case h.Date:n=r.visitDate;break;case h.DateDay:n=r.visitDateDay||r.visitDate;break;case h.DateMillisecond:n=r.visitDateMillisecond||r.visitDate;break;case h.Timestamp:n=r.visitTimestamp;break;case h.TimestampSecond:n=r.visitTimestampSecond||r.visitTimestamp;break;case h.TimestampMillisecond:n=r.visitTimestampMillisecond||r.visitTimestamp;break;case h.TimestampMicrosecond:n=r.visitTimestampMicrosecond||r.visitTimestamp;break;case h.TimestampNanosecond:n=r.visitTimestampNanosecond||r.visitTimestamp;break;case h.Time:n=r.visitTime;break;case h.TimeSecond:n=r.visitTimeSecond||r.visitTime;break;case h.TimeMillisecond:n=r.visitTimeMillisecond||r.visitTime;break;case h.TimeMicrosecond:n=r.visitTimeMicrosecond||r.visitTime;break;case h.TimeNanosecond:n=r.visitTimeNanosecond||r.visitTime;break;case h.Decimal:n=r.visitDecimal;break;case h.List:n=r.visitList;break;case h.Struct:n=r.visitStruct;break;case h.Union:n=r.visitUnion;break;case h.DenseUnion:n=r.visitDenseUnion||r.visitUnion;break;case h.SparseUnion:n=r.visitSparseUnion||r.visitUnion;break;case h.Dictionary:n=r.visitDictionary;break;case h.Interval:n=r.visitInterval;break;case h.IntervalDayTime:n=r.visitIntervalDayTime||r.visitInterval;break;case h.IntervalYearMonth:n=r.visitIntervalYearMonth||r.visitInterval;break;case h.FixedSizeList:n=r.visitFixedSizeList;break;case h.Map:n=r.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error(`Unrecognized type '${h[t]}'`)}function lu(r){switch(r.typeId){case h.Null:return h.Null;case h.Int:{let{bitWidth:t,isSigned:e}=r;switch(t){case 8:return e?h.Int8:h.Uint8;case 16:return e?h.Int16:h.Uint16;case 32:return e?h.Int32:h.Uint32;case 64:return e?h.Int64:h.Uint64}return h.Int}case h.Float:switch(r.precision){case vt.HALF:return h.Float16;case vt.SINGLE:return h.Float32;case vt.DOUBLE:return h.Float64}return h.Float;case h.Binary:return h.Binary;case h.Utf8:return h.Utf8;case h.Bool:return h.Bool;case h.Decimal:return h.Decimal;case h.Time:switch(r.unit){case Z.SECOND:return h.TimeSecond;case Z.MILLISECOND:return h.TimeMillisecond;case Z.MICROSECOND:return h.TimeMicrosecond;case Z.NANOSECOND:return h.TimeNanosecond}return h.Time;case h.Timestamp:switch(r.unit){case Z.SECOND:return h.TimestampSecond;case Z.MILLISECOND:return h.TimestampMillisecond;case Z.MICROSECOND:return h.TimestampMicrosecond;case Z.NANOSECOND:return h.TimestampNanosecond}return h.Timestamp;case h.Date:switch(r.unit){case Jt.DAY:return h.DateDay;case Jt.MILLISECOND:return h.DateMillisecond}return h.Date;case h.Interval:switch(r.unit){case ae.DAY_TIME:return h.IntervalDayTime;case ae.YEAR_MONTH:return h.IntervalYearMonth}return h.Interval;case h.Map:return h.Map;case h.List:return h.List;case h.Struct:return h.Struct;case h.Union:switch(r.mode){case Ft.Dense:return h.DenseUnion;case Ft.Sparse:return h.SparseUnion}return h.Union;case h.FixedSizeBinary:return h.FixedSizeBinary;case h.FixedSizeList:return h.FixedSizeList;case h.Dictionary:return h.Dictionary}throw new Error(`Unrecognized type '${h[r.typeId]}'`)}R.prototype.visitInt8=null;R.prototype.visitInt16=null;R.prototype.visitInt32=null;R.prototype.visitInt64=null;R.prototype.visitUint8=null;R.prototype.visitUint16=null;R.prototype.visitUint32=null;R.prototype.visitUint64=null;R.prototype.visitFloat16=null;R.prototype.visitFloat32=null;R.prototype.visitFloat64=null;R.prototype.visitDateDay=null;R.prototype.visitDateMillisecond=null;R.prototype.visitTimestampSecond=null;R.prototype.visitTimestampMillisecond=null;R.prototype.visitTimestampMicrosecond=null;R.prototype.visitTimestampNanosecond=null;R.prototype.visitTimeSecond=null;R.prototype.visitTimeMillisecond=null;R.prototype.visitTimeMicrosecond=null;R.prototype.visitTimeNanosecond=null;R.prototype.visitDenseUnion=null;R.prototype.visitSparseUnion=null;R.prototype.visitIntervalDayTime=null;R.prototype.visitIntervalYearMonth=null;var Ua={};wn(Ua,{float64ToUint16:()=>Ti,uint16ToFloat64:()=>zs});var cu=new Float64Array(1),Gn=new Uint32Array(cu.buffer);function zs(r){let t=(r&31744)>>10,e=(r&1023)/1024,n=Math.pow(-1,(r&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function Ti(r){if(r!==r)return 32256;cu[0]=r;let t=(Gn[1]&2147483648)>>16&65535,e=Gn[1]&2146435072,n=0;return e>=1089470464?Gn[0]>0?e=31744:(e=(e&2080374784)>>16,n=(Gn[1]&1048575)>>10):e<=1056964608?(n=1048576+(Gn[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(Gn[1]&1048575)+512>>10),t|e|n&65535}var P=class extends R{};function G(r){return(t,e,n)=>{if(t.setValid(e,n!=null))return r(t,e,n)}}var Ep=(r,t,e)=>{r[t]=Math.trunc(e/864e5)},Na=(r,t,e)=>{r[t]=Math.trunc(e%4294967296),r[t+1]=Math.trunc(e/4294967296)},xp=(r,t,e)=>{r[t]=Math.trunc(e*1e3%4294967296),r[t+1]=Math.trunc(e*1e3/4294967296)},Dp=(r,t,e)=>{r[t]=Math.trunc(e*1e6%4294967296),r[t+1]=Math.trunc(e*1e6/4294967296)},uu=(r,t,e,n)=>{if(e+1<t.length){let{[e]:i,[e+1]:s}=t;r.set(n.subarray(0,s-i),i)}},Bp=({offset:r,values:t},e,n)=>{let i=r+e;n?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},jr=({values:r},t,e)=>{r[t]=e},ja=({values:r},t,e)=>{r[t]=e},du=({values:r},t,e)=>{r[t]=Ti(e)},Op=(r,t,e)=>{switch(r.type.precision){case vt.HALF:return du(r,t,e);case vt.SINGLE:case vt.DOUBLE:return ja(r,t,e)}},Ws=({values:r},t,e)=>{Ep(r,t,e.valueOf())},Ys=({values:r},t,e)=>{Na(r,t*2,e.valueOf())},Pa=({stride:r,values:t},e,n)=>{t.set(n.subarray(0,r),r*e)},Rp=({values:r,valueOffsets:t},e,n)=>uu(r,t,e,n),Mp=({values:r,valueOffsets:t},e,n)=>{uu(r,t,e,Zr(n))},Va=(r,t,e)=>{r.type.unit===Jt.DAY?Ws(r,t,e):Ys(r,t,e)},$s=({values:r},t,e)=>Na(r,t*2,e/1e3),Gs=({values:r},t,e)=>Na(r,t*2,e),Xs=({values:r},t,e)=>xp(r,t*2,e),Ks=({values:r},t,e)=>Dp(r,t*2,e),Ha=(r,t,e)=>{switch(r.type.unit){case Z.SECOND:return $s(r,t,e);case Z.MILLISECOND:return Gs(r,t,e);case Z.MICROSECOND:return Xs(r,t,e);case Z.NANOSECOND:return Ks(r,t,e)}},Js=({values:r},t,e)=>{r[t]=e},qs=({values:r},t,e)=>{r[t]=e},Qs=({values:r},t,e)=>{r[t]=e},Zs=({values:r},t,e)=>{r[t]=e},za=(r,t,e)=>{switch(r.type.unit){case Z.SECOND:return Js(r,t,e);case Z.MILLISECOND:return qs(r,t,e);case Z.MICROSECOND:return Qs(r,t,e);case Z.NANOSECOND:return Zs(r,t,e)}},Wa=({values:r,stride:t},e,n)=>{r.set(n.subarray(0,t),t*e)},Cp=(r,t,e)=>{let n=r.children[0],i=r.valueOffsets,s=qt.getVisitFn(n);if(Array.isArray(e))for(let o=-1,a=i[t],c=i[t+1];a<c;)s(n,a++,e[++o]);else for(let o=-1,a=i[t],c=i[t+1];a<c;)s(n,a++,e.get(++o))},Lp=(r,t,e)=>{let n=r.children[0],{valueOffsets:i}=r,s=qt.getVisitFn(n),{[t]:o,[t+1]:a}=i,c=e instanceof Map?e.entries():Object.entries(e);for(let f of c)if(s(n,o,f),++o>=a)break},kp=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[s]),Up=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(s)),Np=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(i.name)),jp=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[i.name]),Pp=(r,t,e)=>{let n=r.type.children.map(s=>qt.getVisitFn(s.type)),i=e instanceof Map?Np(t,e):e instanceof V?Up(t,e):Array.isArray(e)?kp(t,e):jp(t,e);r.type.children.forEach((s,o)=>i(n[o],r.children[o],s,o))},Vp=(r,t,e)=>{r.type.mode===Ft.Dense?fu(r,t,e):hu(r,t,e)},fu=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];qt.visit(i,r.valueOffsets[t],e)},hu=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];qt.visit(i,t,e)},Hp=(r,t,e)=>{var n;(n=r.dictionary)===null||n===void 0||n.set(r.values[t],e)},Ya=(r,t,e)=>{r.type.unit===ae.DAY_TIME?to(r,t,e):eo(r,t,e)},to=({values:r},t,e)=>{r.set(e.subarray(0,2),2*t)},eo=({values:r},t,e)=>{r[t]=e[0]*12+e[1]%12},zp=(r,t,e)=>{let{stride:n}=r,i=r.children[0],s=qt.getVisitFn(i);if(Array.isArray(e))for(let o=-1,a=t*n;++o<n;)s(i,a+o,e[o]);else for(let o=-1,a=t*n;++o<n;)s(i,a+o,e.get(o))};P.prototype.visitBool=G(Bp);P.prototype.visitInt=G(jr);P.prototype.visitInt8=G(jr);P.prototype.visitInt16=G(jr);P.prototype.visitInt32=G(jr);P.prototype.visitInt64=G(jr);P.prototype.visitUint8=G(jr);P.prototype.visitUint16=G(jr);P.prototype.visitUint32=G(jr);P.prototype.visitUint64=G(jr);P.prototype.visitFloat=G(Op);P.prototype.visitFloat16=G(du);P.prototype.visitFloat32=G(ja);P.prototype.visitFloat64=G(ja);P.prototype.visitUtf8=G(Mp);P.prototype.visitBinary=G(Rp);P.prototype.visitFixedSizeBinary=G(Pa);P.prototype.visitDate=G(Va);P.prototype.visitDateDay=G(Ws);P.prototype.visitDateMillisecond=G(Ys);P.prototype.visitTimestamp=G(Ha);P.prototype.visitTimestampSecond=G($s);P.prototype.visitTimestampMillisecond=G(Gs);P.prototype.visitTimestampMicrosecond=G(Xs);P.prototype.visitTimestampNanosecond=G(Ks);P.prototype.visitTime=G(za);P.prototype.visitTimeSecond=G(Js);P.prototype.visitTimeMillisecond=G(qs);P.prototype.visitTimeMicrosecond=G(Qs);P.prototype.visitTimeNanosecond=G(Zs);P.prototype.visitDecimal=G(Wa);P.prototype.visitList=G(Cp);P.prototype.visitStruct=G(Pp);P.prototype.visitUnion=G(Vp);P.prototype.visitDenseUnion=G(fu);P.prototype.visitSparseUnion=G(hu);P.prototype.visitDictionary=G(Hp);P.prototype.visitInterval=G(Ya);P.prototype.visitIntervalDayTime=G(to);P.prototype.visitIntervalYearMonth=G(eo);P.prototype.visitFixedSizeList=G(zp);P.prototype.visitMap=G(Lp);var qt=new P;var tr=Symbol.for("parent"),Xn=Symbol.for("rowIndex"),en=class{constructor(t,e){return this[tr]=t,this[Xn]=e,new Proxy(this,new Ga)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Xn],e=this[tr],n=e.type.children,i={};for(let s=-1,o=n.length;++s<o;)i[n[s].name]=Ct.visit(e.children[s],t);return i}toString(){return`{${[...this].map(([t,e])=>`${Ge(t)}: ${Ge(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new $a(this[tr],this[Xn])}},$a=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Ct.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(en.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[tr]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Xn]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var Ga=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[tr].type.children.map(e=>e.name)}has(t,e){return t[tr].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[tr].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[tr].type.children.findIndex(i=>i.name===e);if(n!==-1){let i=Ct.visit(t[tr].children[n],t[Xn]);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[tr].type.children.findIndex(s=>s.name===e);return i!==-1?(qt.visit(t[tr].children[i],t[Xn],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var C=class extends R{};function z(r){return(t,e)=>t.getValid(e)?r(t,e):null}var Wp=(r,t)=>864e5*r[t],Xa=(r,t)=>4294967296*r[t+1]+(r[t]>>>0),Yp=(r,t)=>4294967296*(r[t+1]/1e3)+(r[t]>>>0)/1e3,$p=(r,t)=>4294967296*(r[t+1]/1e6)+(r[t]>>>0)/1e6,pu=r=>new Date(r),Gp=(r,t)=>pu(Wp(r,t)),Xp=(r,t)=>pu(Xa(r,t)),Kp=(r,t)=>null,_u=(r,t,e)=>{if(e+1>=t.length)return null;let n=t[e],i=t[e+1];return r.subarray(n,i)},Jp=({offset:r,values:t},e)=>{let n=r+e;return(t[n>>3]&1<<n%8)!==0},mu=({values:r},t)=>Gp(r,t),yu=({values:r},t)=>Xp(r,t*2),rn=({stride:r,values:t},e)=>t[r*e],qp=({stride:r,values:t},e)=>zs(t[r*e]),bu=({values:r},t)=>r[t],Qp=({stride:r,values:t},e)=>t.subarray(r*e,r*(e+1)),Zp=({values:r,valueOffsets:t},e)=>_u(r,t,e),t_=({values:r,valueOffsets:t},e)=>{let n=_u(r,t,e);return n!==null?Si(n):null},e_=({values:r},t)=>r[t],r_=({type:r,values:t},e)=>r.precision!==vt.HALF?t[e]:zs(t[e]),n_=(r,t)=>r.type.unit===Jt.DAY?mu(r,t):yu(r,t),gu=({values:r},t)=>1e3*Xa(r,t*2),wu=({values:r},t)=>Xa(r,t*2),vu=({values:r},t)=>Yp(r,t*2),Su=({values:r},t)=>$p(r,t*2),i_=(r,t)=>{switch(r.type.unit){case Z.SECOND:return gu(r,t);case Z.MILLISECOND:return wu(r,t);case Z.MICROSECOND:return vu(r,t);case Z.NANOSECOND:return Su(r,t)}},Iu=({values:r},t)=>r[t],Fu=({values:r},t)=>r[t],Au=({values:r},t)=>r[t],Tu=({values:r},t)=>r[t],s_=(r,t)=>{switch(r.type.unit){case Z.SECOND:return Iu(r,t);case Z.MILLISECOND:return Fu(r,t);case Z.MICROSECOND:return Au(r,t);case Z.NANOSECOND:return Tu(r,t)}},o_=({values:r,stride:t},e)=>Sn.decimal(r.subarray(t*e,t*(e+1))),a_=(r,t)=>{let{valueOffsets:e,stride:n,children:i}=r,{[t*n]:s,[t*n+1]:o}=e,c=i[0].slice(s,o-s);return new V([c])},l_=(r,t)=>{let{valueOffsets:e,children:n}=r,{[t]:i,[t+1]:s}=e,o=n[0];return new dr(o.slice(i,s-i))},c_=(r,t)=>new en(r,t),u_=(r,t)=>r.type.mode===Ft.Dense?Eu(r,t):xu(r,t),Eu=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Ct.visit(n,r.valueOffsets[t])},xu=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Ct.visit(n,t)},d_=(r,t)=>{var e;return(e=r.dictionary)===null||e===void 0?void 0:e.get(r.values[t])},f_=(r,t)=>r.type.unit===ae.DAY_TIME?Du(r,t):Bu(r,t),Du=({values:r},t)=>r.subarray(2*t,2*(t+1)),Bu=({values:r},t)=>{let e=r[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},h_=(r,t)=>{let{stride:e,children:n}=r,s=n[0].slice(t*e,e);return new V([s])};C.prototype.visitNull=z(Kp);C.prototype.visitBool=z(Jp);C.prototype.visitInt=z(e_);C.prototype.visitInt8=z(rn);C.prototype.visitInt16=z(rn);C.prototype.visitInt32=z(rn);C.prototype.visitInt64=z(bu);C.prototype.visitUint8=z(rn);C.prototype.visitUint16=z(rn);C.prototype.visitUint32=z(rn);C.prototype.visitUint64=z(bu);C.prototype.visitFloat=z(r_);C.prototype.visitFloat16=z(qp);C.prototype.visitFloat32=z(rn);C.prototype.visitFloat64=z(rn);C.prototype.visitUtf8=z(t_);C.prototype.visitBinary=z(Zp);C.prototype.visitFixedSizeBinary=z(Qp);C.prototype.visitDate=z(n_);C.prototype.visitDateDay=z(mu);C.prototype.visitDateMillisecond=z(yu);C.prototype.visitTimestamp=z(i_);C.prototype.visitTimestampSecond=z(gu);C.prototype.visitTimestampMillisecond=z(wu);C.prototype.visitTimestampMicrosecond=z(vu);C.prototype.visitTimestampNanosecond=z(Su);C.prototype.visitTime=z(s_);C.prototype.visitTimeSecond=z(Iu);C.prototype.visitTimeMillisecond=z(Fu);C.prototype.visitTimeMicrosecond=z(Au);C.prototype.visitTimeNanosecond=z(Tu);C.prototype.visitDecimal=z(o_);C.prototype.visitList=z(a_);C.prototype.visitStruct=z(c_);C.prototype.visitUnion=z(u_);C.prototype.visitDenseUnion=z(Eu);C.prototype.visitSparseUnion=z(xu);C.prototype.visitDictionary=z(d_);C.prototype.visitInterval=z(f_);C.prototype.visitIntervalDayTime=z(Du);C.prototype.visitIntervalYearMonth=z(Bu);C.prototype.visitFixedSizeList=z(h_);C.prototype.visitMap=z(l_);var Ct=new C;var je=Symbol.for("keys"),Kn=Symbol.for("vals"),dr=class{constructor(t){return this[je]=new V([t.children[0]]).memoize(),this[Kn]=t.children[1],new Proxy(this,new Ja)}[Symbol.iterator](){return new Ka(this[je],this[Kn])}get size(){return this[je].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[je],e=this[Kn],n={};for(let i=-1,s=t.length;++i<s;)n[t.get(i)]=Ct.visit(e,i);return n}toString(){return`{${[...this].map(([t,e])=>`${Ge(t)}: ${Ge(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},Ka=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Ct.visit(this.vals,t)]})}},Ja=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[je].toArray().map(String)}has(t,e){return t[je].includes(e)}getOwnPropertyDescriptor(t,e){if(t[je].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[je].indexOf(e);if(n!==-1){let i=Ct.visit(Reflect.get(t,Kn),n);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[je].indexOf(e);return i!==-1?(qt.visit(Reflect.get(t,Kn),i,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(dr.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[je]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Kn]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function p_(r,t,e){let n=r.length,i=t>-1?t:n+t%n;return e?e(r,i):i}var Ou;function Ei(r,t,e,n){let{length:i=0}=r,s=typeof t!="number"?0:t,o=typeof e!="number"?i:e;return s<0&&(s=(s%i+i)%i),o<0&&(o=(o%i+i)%i),o<s&&(Ou=s,s=o,o=Ou),o>i&&(o=i),n?n(r,s,o):[s,o]}var Ru=r=>r!==r;function nn(r){if(typeof r!=="object"||r===null)return Ru(r)?Ru:e=>e===r;if(r instanceof Date){let e=r.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(r)?e=>e?Oa(r,e):!1:r instanceof Map?m_(r):Array.isArray(r)?__(r):r instanceof V?y_(r):b_(r,!0)}function __(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=nn(r[e]);return ro(t)}function m_(r){let t=-1,e=[];for(let n of r.values())e[++t]=nn(n);return ro(e)}function y_(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=nn(r.get(e));return ro(t)}function b_(r,t=!1){let e=Object.keys(r);if(!t&&e.length===0)return()=>!1;let n=[];for(let i=-1,s=e.length;++i<s;)n[i]=nn(r[e[i]]);return ro(n,e)}function ro(r,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return g_(r,e);case Map:return Mu(r,e,e.keys());case dr:case en:case Object:case void 0:return Mu(r,e,t||Object.keys(e))}return e instanceof V?w_(r,e):!1}}function g_(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t[n]))return!1;return!0}function w_(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t.get(n)))return!1;return!0}function Mu(r,t,e){let n=e[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),s=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),o=0,a=r.length,c=s.next(),f=n.next(),p=i.next();for(;o<a&&!f.done&&!p.done&&!c.done&&!(f.value!==p.value||!r[o](c.value));++o,f=n.next(),p=i.next(),c=s.next());return o===a&&f.done&&p.done&&c.done?!0:(n.return&&n.return(),i.return&&i.return(),s.return&&s.return(),!1)}var Qa={};wn(Qa,{BitIterator:()=>In,getBit:()=>Cu,getBool:()=>io,packBools:()=>Fn,popcnt_array:()=>Lu,popcnt_bit_range:()=>xi,popcnt_uint32:()=>no,setBool:()=>v_,truncateBitmap:()=>Jn});function io(r,t,e,n){return(e&1<<n)!==0}function Cu(r,t,e,n){return(e&1<<n)>>n}function v_(r,t,e){return e?!!(r[t>>3]|=1<<t%8)||!0:!(r[t>>3]&=~(1<<t%8))&&!1}function Jn(r,t,e){let n=e.byteLength+7&-8;if(r>0||e.byteLength<n){let i=new Uint8Array(n);return i.set(r%8===0?e.subarray(r>>3):Fn(new In(e,r,t,null,io)).subarray(0,n)),i}return e}function Fn(r){let t=[],e=0,n=0,i=0;for(let o of r)o&&(i|=1<<n),++n===8&&(t[e++]=i,i=n=0);(e===0||n>0)&&(t[e++]=i);let s=new Uint8Array(t.length+7&-8);return s.set(t),s}var In=class{constructor(t,e,n,i,s){this.bytes=t,this.length=n,this.context=i,this.get=s,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function xi(r,t,e){if(e-t<=0)return 0;if(e-t<8){let s=0;for(let o of new In(r,t,e-t,r,Cu))s+=o;return s}let n=e>>3<<3,i=t+(t%8===0?0:8-t%8);return xi(r,t,i)+xi(r,n,e)+Lu(r,i>>3,n-i>>3)}function Lu(r,t,e){let n=0,i=Math.trunc(t),s=new DataView(r.buffer,r.byteOffset,r.byteLength),o=e===void 0?r.byteLength:i+e;for(;o-i>=4;)n+=no(s.getUint32(i)),i+=4;for(;o-i>=2;)n+=no(s.getUint16(i)),i+=2;for(;o-i>=1;)n+=no(s.getUint8(i)),i+=1;return n}function no(r){let t=Math.trunc(r);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var S_=-1,st=class{constructor(t,e,n,i,s,o=[],a){this.type=t,this.children=o,this.dictionary=a,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let c;s instanceof st?(this.stride=s.stride,this.values=s.values,this.typeIds=s.typeIds,this.nullBitmap=s.nullBitmap,this.valueOffsets=s.valueOffsets):(this.stride=xe(t),s&&((c=s[0])&&(this.valueOffsets=c),(c=s[1])&&(this.values=c),(c=s[2])&&(this.nullBitmap=c),(c=s[3])&&(this.typeIds=c))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:i,typeIds:s}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),this.children.reduce((o,a)=>o+a.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=S_&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-xi(e,this.offset,this.offset+this.length)),t}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:c}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:c,_nullCount:0})}let{nullBitmap:n,offset:i}=this,s=i+t>>3,o=(i+t)%8,a=n[s]>>o&1;return e?a===0&&(n[s]|=1<<o,this._nullCount=this.nullCount+1):a===1&&(n[s]&=~(1<<o),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,i=this._nullCount,s=this,o=this.children){return new st(t,e,n,i,s,o,this.dictionary)}slice(t,e){let{stride:n,typeId:i,children:s}=this,o=+(this._nullCount===0)-1,a=i===16?n:1,c=this._sliceBuffers(t,e,n,i);return this.clone(this.type,this.offset+t,e,o,c,s.length===0||this.valueOffsets?s:this._sliceChildren(s,a*t,a*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===h.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);i[e>>3]=(1<<e-(e&-8))-1,n>0&&i.set(Jn(this.offset,e,this.nullBitmap),0);let s=this.buffers;return s[Ne.VALIDITY]=i,this.clone(this.type,0,t,n+(t-e),s)}_sliceBuffers(t,e,n,i){let s,{buffers:o}=this;return(s=o[Ne.TYPE])&&(o[Ne.TYPE]=s.subarray(t,t+e)),(s=o[Ne.OFFSET])&&(o[Ne.OFFSET]=s.subarray(t,t+e+1))||(s=o[Ne.DATA])&&(o[Ne.DATA]=i===6?s:s.subarray(n*t,n*(t+e))),o}_sliceChildren(t,e,n){return t.map(i=>i.slice(e,n))}};st.prototype.children=Object.freeze([]);var An=class extends R{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:i=0}=t;return new st(e,n,i,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length>>3,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.data),s=j(t.nullBitmap),o=vn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new st(e,n,a,c,[o,i,s])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.data),s=j(t.nullBitmap),o=vn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new st(e,n,a,c,[o,i,s])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:i}=t,s=j(t.nullBitmap),o=vn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new st(e,n,a,c,[o,void 0,s],[i])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=j(t.nullBitmap),{length:o=i.reduce((c,{length:f})=>Math.max(c,f),0),nullCount:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,void 0,s],i)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=j(t.nullBitmap),o=q(e.ArrayType,t.typeIds),{["length"]:a=o.length,["nullCount"]:c=t.nullBitmap?-1:0}=t;if(x.isSparseUnion(e))return new st(e,n,a,c,[void 0,void 0,s,o],i);let f=vn(t.valueOffsets);return new st(e,n,a,c,[f,void 0,s,o],i)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.indices.ArrayType,t.data),{["dictionary"]:o=new V([new An().visit({type:e.dictionary})])}=t,{["length"]:a=s.length,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new st(e,n,a,c,[void 0,s,i],[],o)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,s,i])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new An().visit({type:e.valueType})}=t,s=j(t.nullBitmap),{["length"]:o=i.length/xe(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new st(e,n,o,a,[void 0,void 0,s],[i])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new An().visit({type:e.childType})}=t,s=j(t.nullBitmap),o=vn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new st(e,n,a,c,[o,void 0,s],[i])}};function H(r){return new An().visit(r)}var Di=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function so(r){return r.reduce((t,e)=>t+e.nullCount,0)}function oo(r){return r.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(r.length+1))}function ao(r,t,e,n){let i=[];for(let s=-1,o=r.length;++s<o;){let a=r[s],c=t[s],{length:f}=a;if(c>=n)break;if(e>=c+f)continue;if(c>=e&&c+f<=n){i.push(a);continue}let p=Math.max(0,e-c),y=Math.min(n-c,f);i.push(a.slice(p,y-p))}return i.length===0&&i.push(r[0].slice(0,0)),i}function Za(r,t,e,n){let i=0,s=0,o=t.length-1;do{if(i>=o-1)return e<t[o]?n(r,i,e-t[i]):null;s=i+Math.trunc((o-i)*.5),e<t[s]?o=s:i=s}while(i<o)}function Bi(r,t){return r.getValid(t)}function sn(r){function t(e,n,i){return r(e[n],i)}return function(e){let n=this.data;return Za(n,this._offsets,e,t)}}function lo(r){let t;function e(n,i,s){return r(n[i],s,t)}return function(n,i){let s=this.data;t=i;let o=Za(s,this._offsets,n,e);return t=void 0,o}}function co(r){let t;function e(n,i,s){let o=s,a=0,c=0;for(let f=i-1,p=n.length;++f<p;){let y=n[f];if(~(a=r(y,t,o)))return c+a;o=0,c+=y.length}return-1}return function(n,i){t=n;let s=this.data,o=typeof i!="number"?e(s,0,0):Za(s,this._offsets,i,e);return t=void 0,o}}var L=class extends R{};function I_(r,t){return t===null&&r.length>0?0:-1}function F_(r,t){let{nullBitmap:e}=r;if(!e||r.nullCount<=0)return-1;let n=0;for(let i of new In(e,r.offset+(t||0),r.length,e,io)){if(!i)return n;++n}return-1}function Q(r,t,e){if(t===void 0)return-1;if(t===null)return F_(r,e);let n=Ct.getVisitFn(r),i=nn(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}function ku(r,t,e){let n=Ct.getVisitFn(r),i=nn(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}L.prototype.visitNull=I_;L.prototype.visitBool=Q;L.prototype.visitInt=Q;L.prototype.visitInt8=Q;L.prototype.visitInt16=Q;L.prototype.visitInt32=Q;L.prototype.visitInt64=Q;L.prototype.visitUint8=Q;L.prototype.visitUint16=Q;L.prototype.visitUint32=Q;L.prototype.visitUint64=Q;L.prototype.visitFloat=Q;L.prototype.visitFloat16=Q;L.prototype.visitFloat32=Q;L.prototype.visitFloat64=Q;L.prototype.visitUtf8=Q;L.prototype.visitBinary=Q;L.prototype.visitFixedSizeBinary=Q;L.prototype.visitDate=Q;L.prototype.visitDateDay=Q;L.prototype.visitDateMillisecond=Q;L.prototype.visitTimestamp=Q;L.prototype.visitTimestampSecond=Q;L.prototype.visitTimestampMillisecond=Q;L.prototype.visitTimestampMicrosecond=Q;L.prototype.visitTimestampNanosecond=Q;L.prototype.visitTime=Q;L.prototype.visitTimeSecond=Q;L.prototype.visitTimeMillisecond=Q;L.prototype.visitTimeMicrosecond=Q;L.prototype.visitTimeNanosecond=Q;L.prototype.visitDecimal=Q;L.prototype.visitList=Q;L.prototype.visitStruct=Q;L.prototype.visitUnion=Q;L.prototype.visitDenseUnion=ku;L.prototype.visitSparseUnion=ku;L.prototype.visitDictionary=Q;L.prototype.visitInterval=Q;L.prototype.visitIntervalDayTime=Q;L.prototype.visitIntervalYearMonth=Q;L.prototype.visitFixedSizeList=Q;L.prototype.visitMap=Q;var Tn=new L;var k=class extends R{};function W(r){let{type:t}=r;if(r.nullCount===0&&r.stride===1&&(t.typeId===h.Timestamp||t instanceof Ot&&t.bitWidth!==64||t instanceof Ke&&t.bitWidth!==64||t instanceof fe&&t.precision!==vt.HALF))return new Di(r.data.length,n=>{let i=r.data[n];return i.values.subarray(0,i.length)[Symbol.iterator]()});let e=0;return new Di(r.data.length,n=>{let s=r.data[n].length,o=r.slice(e,e+s);return e+=s,new tl(o)})}var tl=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};k.prototype.visitNull=W;k.prototype.visitBool=W;k.prototype.visitInt=W;k.prototype.visitInt8=W;k.prototype.visitInt16=W;k.prototype.visitInt32=W;k.prototype.visitInt64=W;k.prototype.visitUint8=W;k.prototype.visitUint16=W;k.prototype.visitUint32=W;k.prototype.visitUint64=W;k.prototype.visitFloat=W;k.prototype.visitFloat16=W;k.prototype.visitFloat32=W;k.prototype.visitFloat64=W;k.prototype.visitUtf8=W;k.prototype.visitBinary=W;k.prototype.visitFixedSizeBinary=W;k.prototype.visitDate=W;k.prototype.visitDateDay=W;k.prototype.visitDateMillisecond=W;k.prototype.visitTimestamp=W;k.prototype.visitTimestampSecond=W;k.prototype.visitTimestampMillisecond=W;k.prototype.visitTimestampMicrosecond=W;k.prototype.visitTimestampNanosecond=W;k.prototype.visitTime=W;k.prototype.visitTimeSecond=W;k.prototype.visitTimeMillisecond=W;k.prototype.visitTimeMicrosecond=W;k.prototype.visitTimeNanosecond=W;k.prototype.visitDecimal=W;k.prototype.visitList=W;k.prototype.visitStruct=W;k.prototype.visitUnion=W;k.prototype.visitDenseUnion=W;k.prototype.visitSparseUnion=W;k.prototype.visitDictionary=W;k.prototype.visitInterval=W;k.prototype.visitIntervalDayTime=W;k.prototype.visitIntervalYearMonth=W;k.prototype.visitFixedSizeList=W;k.prototype.visitMap=W;var qn=new k;var A_=(r,t)=>r+t,fr=class extends R{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===Z.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,i)=>n+De.visit(i,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,i)=>n+De.visit(i,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},T_=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),E_=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),x_=({valueOffsets:r,stride:t,children:e},n)=>{let i=e[0],{[n*t]:s}=r,{[n*t+1]:o}=r,a=De.getVisitFn(i.type),c=i.slice(s,o-s),f=8;for(let p=-1,y=o-s;++p<y;)f+=a(c,p);return f},D_=({stride:r,children:t},e)=>{let n=t[0],i=n.slice(e*r,r),s=De.getVisitFn(n.type),o=0;for(let a=-1,c=i.length;++a<c;)o+=s(i,a);return o},B_=(r,t)=>r.type.mode===Ft.Dense?Uu(r,t):Nu(r,t),Uu=({type:r,children:t,typeIds:e,valueOffsets:n},i)=>{let s=r.typeIdToChildIndex[e[i]];return 8+De.visit(t[s],n[i])},Nu=({children:r},t)=>4+De.visitMany(r,r.map(()=>t)).reduce(A_,0);fr.prototype.visitUtf8=T_;fr.prototype.visitBinary=E_;fr.prototype.visitList=x_;fr.prototype.visitFixedSizeList=D_;fr.prototype.visitUnion=B_;fr.prototype.visitDenseUnion=Uu;fr.prototype.visitSparseUnion=Nu;var De=new fr;var ju,Pu={},Vu={},V=class{constructor(t){var e,n,i;let s=t[0]instanceof V?t.flatMap(a=>a.data):t;if(s.length===0||s.some(a=>!(a instanceof st)))throw new TypeError("Vector constructor expects an Array of Data instances.");let o=(e=s[0])===null||e===void 0?void 0:e.type;switch(s.length){case 0:this._offsets=[0];break;case 1:{let{get:a,set:c,indexOf:f,byteLength:p}=Pu[o.typeId],y=s[0];this.isValid=g=>Bi(y,g),this.get=g=>a(y,g),this.set=(g,v)=>c(y,g,v),this.indexOf=g=>f(y,g),this.getByteLength=g=>p(y,g),this._offsets=[0,y.length];break}default:Object.setPrototypeOf(this,Vu[o.typeId]),this._offsets=oo(s);break}this.data=s,this.type=o,this.stride=xe(o),this.numChildren=(i=(n=o.children)===null||n===void 0?void 0:n.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=so(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return`${this.VectorName}<${this.type[Symbol.toStringTag]}>`}get VectorName(){return`${h[this.type.typeId]}Vector`}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return qn.visit(this)}concat(...t){return new V(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new V(Ei(this,t,e,({data:n,_offsets:i},s,o)=>ao(n,i,s,o)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:i,ArrayType:s}=this;switch(t.typeId){case h.Int:case h.Float:case h.Decimal:case h.Time:case h.Timestamp:switch(e.length){case 0:return new s;case 1:return e[0].values.subarray(0,n*i);default:return e.reduce((o,{values:a,length:c})=>(o.array.set(a.subarray(0,c*i),o.offset),o.offset+=c*i,o),{array:new s(n*i),offset:0}).array}}return[...this]}toString(){return`[${[...this].join(",")}]`}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new V(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return x.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(x.isDictionary(this.type)){let t=new Qn(this.data[0].dictionary),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new V(e)}return new Qn(this)}unmemoize(){if(x.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new V(e)}return this}};ju=Symbol.toStringTag;V[ju]=(r=>{r.type=x.prototype,r.data=[],r.length=0,r.stride=1,r.numChildren=0,r._nullCount=-1,r._byteLength=-1,r._offsets=new Uint32Array([0]),r[Symbol.isConcatSpreadable]=!0;let t=Object.keys(h).map(e=>h[e]).filter(e=>typeof e=="number"&&e!==h.NONE);for(let e of t){let n=Ct.getVisitFnByTypeId(e),i=qt.getVisitFnByTypeId(e),s=Tn.getVisitFnByTypeId(e),o=De.getVisitFnByTypeId(e);Pu[e]={get:n,set:i,indexOf:s,byteLength:o},Vu[e]=Object.create(r,{isValid:{value:sn(Bi)},get:{value:sn(Ct.getVisitFnByTypeId(e))},set:{value:lo(qt.getVisitFnByTypeId(e))},indexOf:{value:co(Tn.getVisitFnByTypeId(e))},getByteLength:{value:sn(De.getVisitFnByTypeId(e))}})}return"Vector"})(V.prototype);var Qn=class extends V{constructor(t){super(t.data);let e=this.get,n=this.set,i=this.slice,s=new Array(this.length);Object.defineProperty(this,"get",{value(o){let a=s[o];if(a!==void 0)return a;let c=e.call(this,o);return s[o]=c,c}}),Object.defineProperty(this,"set",{value(o,a){n.call(this,o,a),s[o]=a}}),Object.defineProperty(this,"slice",{value:(o,a)=>new Qn(i.call(this,o,a))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new V(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function Hu(r){if(!r||r.length<=0)return function(i){return!0};let t="",e=r.filter(n=>n===n);return e.length>0&&(t=`
    switch (x) {${e.map(n=>`
        case ${O_(n)}:`).join("")}
            return false;
    }`),r.length!==e.length&&(t=`if (x !== x) return false;
${t}`),new Function("x",`${t}
return true;`)}function O_(r){return typeof r!="bigint"?Ge(r):Fs?`${Ge(r)}n`:`"${Ge(r)}"`}var el=(r,t)=>(Math.ceil(r)*t+63&-64||64)/t,R_=(r,t=0)=>r.length>=t?r.subarray(0,t):zn(new r.constructor(t),r,0),on=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,i=this.buffer.length;n>=i&&this._resize(i===0?el(n*1,this.BYTES_PER_ELEMENT):el(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=el(t*this.stride,this.BYTES_PER_ELEMENT);let e=R_(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=zn(new this.ArrayType(t),this.buffer)}};on.prototype.offset=0;var Pr=class extends on{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},Zn=class extends Pr{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),i=t>>3,s=t%8,o=n[i]>>s&1;return e?o===0&&(n[i]|=1<<s,++this.numValid):o===1&&(n[i]&=~(1<<s),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},ti=class extends Pr{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,i=this.reserve(t-n+1).buffer;return n<t++&&i.fill(i[n],n,t),i[t]=i[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var St=class{constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=xe(t),this._nulls=new Zn,e&&e.length>0&&(this._isValid=Hu(e))}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}toVector(){return new V([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:i,_typeIds:s,children:o}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),o.reduce((a,c)=>a+c.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e=`${this.numChildren}`){throw new Error(`Cannot append children to non-nested type "${this.type}"`)}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,i,{type:s,length:o,nullCount:a,_typeIds:c,_offsets:f,_values:p,_nulls:y}=this;(e=c==null?void 0:c.flush(o))?i=f==null?void 0:f.flush(o):(i=f==null?void 0:f.flush(o))?t=p==null?void 0:p.flush(f.last()):t=p==null?void 0:p.flush(o),a>0&&(n=y==null?void 0:y.flush(o));let g=this.children.map(v=>v.flush());return this.clear(),H({type:s,length:o,nullCount:a,children:g,child:g[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let s of this.children)s.clear();return this}};St.prototype.length=1;St.prototype.stride=1;St.prototype.children=null;St.prototype.finished=!1;St.prototype.nullValues=null;St.prototype._isValid=()=>!0;var zt=class extends St{constructor(t){super(t),this._values=new Pr(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},hr=class extends St{constructor(t){super(t),this._pendingLength=0,this._offsets=new ti}setValue(t,e){let n=this._pending||(this._pending=new Map),i=n.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=e instanceof dr?e[je].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var En=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,i){return t.prep(8,24),t.writeInt64(i),t.pad(4),t.writeInt32(n),t.writeInt64(e),t.offset()}};var pr=new Int32Array(2),uo=new Float32Array(pr.buffer),fo=new Float64Array(pr.buffer),ei=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var Lt=class{constructor(t,e){this.low=t|0,this.high=e|0}static create(t,e){return t==0&&e==0?Lt.ZERO:new Lt(t,e)}toFloat64(){return(this.low>>>0)+this.high*4294967296}equals(t){return this.low==t.low&&this.high==t.high}};Lt.ZERO=new Lt(0,0);var Oi;(function(r){r[r.UTF8_BYTES=1]="UTF8_BYTES",r[r.UTF16_STRING=2]="UTF16_STRING"})(Oi||(Oi={}));var ce=class{constructor(t){this.bytes_=t,this.position_=0}static allocate(t){return new ce(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return new Lt(this.readInt32(t),this.readInt32(t+4))}readUint64(t){return new Lt(this.readUint32(t),this.readUint32(t+4))}readFloat32(t){return pr[0]=this.readInt32(t),uo[0]}readFloat64(t){return pr[ei?0:1]=this.readInt32(t),pr[ei?1:0]=this.readInt32(t+4),fo[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)}writeUint64(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)}writeFloat32(t,e){uo[0]=e,this.writeInt32(t,pr[0])}writeFloat64(t,e){fo[0]=e,this.writeInt32(t,pr[ei?0:1]),this.writeInt32(t+4,pr[ei?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t),i="",s=0;if(t+=4,e===Oi.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;s<n;){let o,a=this.readUint8(t+s++);if(a<192)o=a;else{let c=this.readUint8(t+s++);if(a<224)o=(a&31)<<6|c&63;else{let f=this.readUint8(t+s++);if(a<240)o=(a&15)<<12|(c&63)<<6|f&63;else{let p=this.readUint8(t+s++);o=(a&7)<<18|(c&63)<<12|(f&63)<<6|p&63}}}o<65536?i+=String.fromCharCode(o):(o-=65536,i+=String.fromCharCode((o>>10)+55296,(o&(1<<10)-1)+56320))}return i}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createLong(t,e){return Lt.create(t,e)}createScalarList(t,e){let n=[];for(let i=0;i<e;++i)t(i)!==null&&n.push(t(i));return n}createObjList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s.unpack())}return n}};var Vr=class{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null;let e;t?e=t:e=1024,this.bb=ce.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let i=this.bb.capacity();this.bb=Vr.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||!e.equals(n))&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,i=ce.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let i=2;this.addInt16(t-this.object_start);let s=(n+i)*2;this.addInt16(s);let o=0,a=this.space;t:for(e=0;e<this.vtables.length;e++){let c=this.bb.capacity()-this.vtables[e];if(s==this.bb.readInt16(c)){for(let f=2;f<s;f+=2)if(this.bb.readInt16(a+f)!=this.bb.readInt16(c+f))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let i=n?4:0;if(e){let s=e;if(this.prep(this.minalign,4+4+i),s.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let o=4-1;o>=0;o--)this.writeInt8(s.charCodeAt(o))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,i=n-this.bb.readInt32(n);if(!(this.bb.readInt16(i+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(!t)return 0;let e;if(t instanceof Uint8Array)e=t;else{e=[];let n=0;for(;n<t.length;){let i,s=t.charCodeAt(n++);if(s<55296||s>=56320)i=s;else{let o=t.charCodeAt(n++);i=(s<<10)+o+(65536-(55296<<10)-56320)}i<128?e.push(i):(i<2048?e.push(i>>6&31|192):(i<65536?e.push(i>>12&15|224):e.push(i>>18&7|240,i>>12&63|128),e.push(i>>6&63|128)),e.push(i&63|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,i=this.space,s=this.bb.bytes();n<e.length;n++)s[i++]=e[n];return this.endVector()}createLong(t,e){return Lt.create(t,e)}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let i=t[n];if(i!==null)e.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t),this.endVector()}};var yt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new yt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new yt).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return yt.startKeyValue(t),yt.addKey(t,e),yt.addValue(t,n),yt.endKeyValue(t)}};var an;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(an||(an={}));var ln;(function(r){r[r.Little=0]="Little",r[r.Big=1]="Big"})(ln||(ln={}));var Ri;(function(r){r[r.DenseArray=0]="DenseArray"})(Ri||(Ri={}));var Wt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new Wt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new Wt).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return Wt.startInt(t),Wt.addBitWidth(t,e),Wt.addIsSigned(t,n),Wt.endInt(t)}};var Be=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new Be).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new Be).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Wt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):Ri.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,Ri.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var _r=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new _r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new _r).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return _r.startBinary(t),_r.endBinary(t)}};var mr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new mr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new mr).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return mr.startBool(t),mr.endBool(t)}};var Mi;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Mi||(Mi={}));var he=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new he).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new he).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Mi.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Mi.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return he.startDate(t),he.addUnit(t,e),he.endDate(t)}};var Yt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new Yt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new Yt).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,i){return Yt.startDecimal(t),Yt.addPrecision(t,e),Yt.addScale(t,n),Yt.addBitWidth(t,i),Yt.endDecimal(t)}};var cn;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(cn||(cn={}));var pe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new pe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new pe).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return pe.startFixedSizeBinary(t),pe.addByteWidth(t,e),pe.endFixedSizeBinary(t)}};var _e=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new _e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new _e).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return _e.startFixedSizeList(t),_e.addListSize(t,e),_e.endFixedSizeList(t)}};var Ci;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(Ci||(Ci={}));var me=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new me).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new me).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Ci.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,Ci.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return me.startFloatingPoint(t),me.addPrecision(t,e),me.endFloatingPoint(t)}};var Li;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Li||(Li={}));var ye=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new ye).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new ye).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Li.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Li.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return ye.startInterval(t),ye.addUnit(t,e),ye.endInterval(t)}};var yr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new yr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new yr).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return yr.startList(t),yr.endList(t)}};var be=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new be).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new be).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return be.startMap(t),be.addKeysSorted(t,e),be.endMap(t)}};var br=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new br).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new br).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return br.startNull(t),br.endNull(t)}};var gr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new gr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new gr).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return gr.startStruct_(t),gr.endStruct_(t)}};var te=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new te).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new te).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):cn.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,cn.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return te.startTime(t),te.addUnit(t,e),te.addBitWidth(t,n),te.endTime(t)}};var ee=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new ee).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new ee).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):cn.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,cn.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return ee.startTimestamp(t),ee.addUnit(t,e),ee.addTimezone(t,n),ee.endTimestamp(t)}};var ki;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(ki||(ki={}));var $t=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new $t).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new $t).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):ki.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,ki.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return $t.startUnion(t),$t.addMode(t,e),$t.addTypeIds(t,n),$t.endUnion(t)}};var wr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new wr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new wr).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return wr.startUtf8(t),wr.endUtf8(t)}};var It;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.FloatingPoint=3]="FloatingPoint",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct_=13]="Struct_",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Duration=18]="Duration",r[r.LargeBinary=19]="LargeBinary",r[r.LargeUtf8=20]="LargeUtf8",r[r.LargeList=21]="LargeList"})(It||(It={}));var kt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new kt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new kt).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):It.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Be).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new kt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,It.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var At=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new At).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new At).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):ln.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new kt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):this.bb.createLong(0,0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,ln.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,i,s){return At.startSchema(t),At.addEndianness(t,e),At.addFields(t,n),At.addCustomMetadata(t,i),At.addFeatures(t,s),At.endSchema(t)}};var re=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new re).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new re).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):an.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new At).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new En).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new En).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,an.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var rt=class{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=rl(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,e)=>`${e}: ${t}`).join(", ")} }>`}select(t){let e=new Set(t),n=this.fields.filter(i=>e.has(i.name));return new rt(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new rt(e,this.metadata)}assign(...t){let e=t[0]instanceof rt?t[0]:Array.isArray(t[0])?new rt(t[0]):new rt(t),n=[...this.fields],i=po(po(new Map,this.metadata),e.metadata),s=e.fields.filter(a=>{let c=n.findIndex(f=>f.name===a.name);return~c?(n[c]=a.clone({metadata:po(po(new Map,n[c].metadata),a.metadata)}))&&!1:!0}),o=rl(s,new Map);return new rt([...n,...s],i,new Map([...this.dictionaries,...o]))}};rt.prototype.fields=null;rt.prototype.metadata=null;rt.prototype.dictionaries=null;var Y=class{constructor(t,e,n=!1,i){this.name=t,this.type=e,this.nullable=n,this.metadata=i||new Map}static new(...t){let[e,n,i,s]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),i===void 0&&(i=t[0].nullable),s===void 0&&(s=t[0].metadata)),new Y(`${e}`,n,i,s)}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[e,n,i,s]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,i=this.nullable,s=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:i=this.nullable,metadata:s=this.metadata}=t[0],Y.new(e,n,i,s)}};Y.prototype.type=null;Y.prototype.name=null;Y.prototype.nullable=null;Y.prototype.metadata=null;function po(r,t){return new Map([...r||new Map,...t||new Map])}function rl(r,t=new Map){for(let e=-1,n=r.length;++e<n;){let s=r[e].type;if(x.isDictionary(s)){if(!t.has(s.id))t.set(s.id,s.dictionary);else if(t.get(s.id)!==s.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&rl(s.children,t)}return t}var zu=Lt,M_=Vr,C_=ce,Hr=class{constructor(t,e=Ht.V4,n,i){this.schema=t,this.version=e,n&&(this._recordBatches=n),i&&(this._dictionaryBatches=i)}static decode(t){t=new C_(j(t));let e=re.getRootAsFooter(t),n=rt.decode(e.schema());return new nl(n,e)}static encode(t){let e=new M_,n=rt.encode(e,t.schema);re.startRecordBatchesVector(e,t.numRecordBatches);for(let o of[...t.recordBatches()].slice().reverse())rr.encode(e,o);let i=e.endVector();re.startDictionariesVector(e,t.numDictionaries);for(let o of[...t.dictionaryBatches()].slice().reverse())rr.encode(e,o);let s=e.endVector();return re.startFooter(e),re.addSchema(e,n),re.addVersion(e,Ht.V4),re.addRecordBatches(e,i),re.addDictionaries(e,s),re.finishFooterBuffer(e,re.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var nl=class extends Hr{constructor(t,e){super(t,e.version()),this._footer=e}get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return rr.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return rr.decode(e)}return null}},rr=class{constructor(t,e,n){this.metaDataLength=t,this.offset=typeof n=="number"?n:n.low,this.bodyLength=typeof e=="number"?e:e.low}static decode(t){return new rr(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,i=new zu(e.offset,0),s=new zu(e.bodyLength,0);return En.createBlock(t,i,n,s)}};var bt=Object.freeze({done:!0,value:void 0}),Ui=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},xn=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},_o=class extends xn{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return I(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(bt);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return Kt.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return Kt.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return I(this,void 0,void 0,function*(){return yield this.abort(t),bt})}return(t){return I(this,void 0,void 0,function*(){return yield this.close(),bt})}read(t){return I(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return I(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(bt)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var vr=class extends _o{write(t){if((t=j(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?Si(this.toUint8Array(!0)):this.toUint8Array(!1).then(Si)}toUint8Array(t=!1){return t?Te(this._values)[0]:(()=>I(this,void 0,void 0,function*(){var e,n;let i=[],s=0;try{for(var o=Ce(this),a;a=yield o.next(),!a.done;){let c=a.value;i.push(c),s+=c.byteLength}}catch(c){e={error:c}}finally{try{a&&!a.done&&(n=o.return)&&(yield n.call(o))}finally{if(e)throw e.error}}return Te(i,s)[0]}))()}},Sr=class{constructor(t){t&&(this.source=new il(Kt.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},ge=class{constructor(t){t instanceof ge?this.source=t.source:t instanceof vr?this.source=new zr(Kt.fromAsyncIterable(t)):Bs(t)?this.source=new zr(Kt.fromNodeStream(t)):Ii(t)?this.source=new zr(Kt.fromDOMStream(t)):xs(t)?this.source=new zr(Kt.fromDOMStream(t.body)):Ye(t)?this.source=new zr(Kt.fromIterable(t)):We(t)?this.source=new zr(Kt.fromAsyncIterable(t)):Ue(t)&&(this.source=new zr(Kt.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},il=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||bt)}return(t){return Object.create(this.source.return&&this.source.return(t)||bt)}},zr=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return I(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return I(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return I(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return I(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return I(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||bt;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return I(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||bt;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var Ni=class extends Sr{constructor(t,e){super(),this.position=0,this.buffer=j(t),this.size=typeof e>"u"?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:i}=this;return e&&i<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,i+Math.min(n-i,t)),e.subarray(i,this.position)):null}readAt(t,e){let n=this.buffer,i=Math.min(this.size,t+e);return n?n.subarray(t,i):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},un=class extends ge{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>I(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return I(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return I(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return I(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:i}=this;if(e&&i<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let s=i,o=0,a=0,c=Math.min(n,s+Math.min(n-s,t)),f=new Uint8Array(Math.max(0,(this.position=c)-s));for(;(s+=a)<c&&(o+=a)<f.byteLength;)({bytesRead:a}=yield e.read(f,o,f.byteLength-o,s));return f}return null})}readAt(t,e){return I(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:i}=this;if(n&&t+e<i){let s=Math.min(i,t+e),o=new Uint8Array(s-t);return(yield n.read(o,0,e,t)).buffer}return new Uint8Array(e)})}close(){return I(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return I(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return I(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var ol={};wn(ol,{BaseInt64:()=>ji,Int128:()=>we,Int64:()=>Gt,Uint64:()=>ot});function ri(r){return r<0&&(r=4294967295+r+1),`0x${r.toString(16)}`}var ni=8,sl=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],ji=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=e[3]*n[3];this.buffer[0]=i&65535;let s=i>>>16;return i=e[2]*n[3],s+=i,i=e[3]*n[2]>>>0,s+=i,this.buffer[0]+=s<<16,this.buffer[1]=s>>>0<i?65536:0,this.buffer[1]+=s>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return`${ri(this.buffer[1])} ${ri(this.buffer[0])}`}},ot=class extends ji{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return ot.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return ot.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,i=new ot(e);for(let s=0;s<n;){let o=ni<n-s?ni:n-s,a=new ot(new Uint32Array([Number.parseInt(t.slice(s,s+o),10),0])),c=new ot(new Uint32Array([sl[o],0]));i.times(c),i.plus(a),s+=o}return i}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)ot.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new ot(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new ot(new Uint32Array(t.buffer)).plus(e)}},Gt=class extends ji{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return Gt.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return Gt.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),i=t.length,s=new Gt(e);for(let o=n?1:0;o<i;){let a=ni<i-o?ni:i-o,c=new Gt(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0])),f=new Gt(new Uint32Array([sl[a],0]));s.times(f),s.plus(c),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)Gt.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new Gt(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new Gt(new Uint32Array(t.buffer)).plus(e)}},we=class{constructor(t){this.buffer=t}high(){return new Gt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new Gt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new ot(new Uint32Array([this.buffer[3],0])),n=new ot(new Uint32Array([this.buffer[2],0])),i=new ot(new Uint32Array([this.buffer[1],0])),s=new ot(new Uint32Array([this.buffer[0],0])),o=new ot(new Uint32Array([t.buffer[3],0])),a=new ot(new Uint32Array([t.buffer[2],0])),c=new ot(new Uint32Array([t.buffer[1],0])),f=new ot(new Uint32Array([t.buffer[0],0])),p=ot.multiply(s,f);this.buffer[0]=p.low();let y=new ot(new Uint32Array([p.high(),0]));return p=ot.multiply(i,f),y.plus(p),p=ot.multiply(s,c),y.plus(p),this.buffer[1]=y.low(),this.buffer[3]=y.lessThan(p)?1:0,this.buffer[2]=y.high(),new ot(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(ot.multiply(n,f)).plus(ot.multiply(i,c)).plus(ot.multiply(s,a)),this.buffer[3]+=ot.multiply(e,f).plus(ot.multiply(n,c)).plus(ot.multiply(i,a)).plus(ot.multiply(s,o)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return`${ri(this.buffer[3])} ${ri(this.buffer[2])} ${ri(this.buffer[1])} ${ri(this.buffer[0])}`}static multiply(t,e){return new we(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new we(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return we.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return we.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),i=t.length,s=new we(e);for(let o=n?1:0;o<i;){let a=ni<i-o?ni:i-o,c=new we(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0,0,0])),f=new we(new Uint32Array([sl[a],0,0,0]));s.times(f),s.plus(c),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,i=t.length;++n<i;)we.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var Pi=class extends R{constructor(t,e,n,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=i}visit(t){return super.visit(t instanceof Y?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return H({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===Ft.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},mo=class extends Pi{constructor(t,e,n,i){super(new Uint8Array(0),e,n,i),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):Fn(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return q(Uint8Array,q(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return q(Uint8Array,q(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return x.isTimestamp(t)?q(Uint8Array,Gt.convertArray(n[e])):(x.isInt(t)||x.isTime(t))&&t.bitWidth===64?q(Uint8Array,Gt.convertArray(n[e])):x.isDate(t)&&t.unit===Jt.MILLISECOND?q(Uint8Array,Gt.convertArray(n[e])):x.isDecimal(t)?q(Uint8Array,we.convertArray(n[e])):x.isBinary(t)||x.isFixedSizeBinary(t)?L_(n[e]):x.isBool(t)?Fn(n[e]):x.isUtf8(t)?Zr(n[e].join("")):q(Uint8Array,q(t.ArrayType,n[e].map(i=>+i)))}};function L_(r){let t=r.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var ii=class extends hr{constructor(t){super(t),this._values=new on(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,j(e))}_flushPending(t,e){let n=this._offsets,i=this._values.reserve(e).buffer,s=0;for(let[o,a]of t)if(a===void 0)n.set(o,0);else{let c=a.length;i.set(a,s),n.set(o,c),s+=c}}};var yo=class extends St{constructor(t){super(t),this._values=new Zn}setValue(t,e){this._values.set(t,+e)}};var Dn=class extends zt{};Dn.prototype._setValue=Va;var Vi=class extends Dn{};Vi.prototype._setValue=Ws;var Hi=class extends Dn{};Hi.prototype._setValue=Ys;var zi=class extends zt{};zi.prototype._setValue=Wa;var bo=class extends St{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new Ee(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=Bn({type:this.type.indices,nullValues:e}),this.dictionary=Bn({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,i=this.valueToKey(e),s=n[i];return s===void 0&&(n[i]=s=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,s)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:`${t}`}};var Wi=class extends zt{};Wi.prototype._setValue=Pa;var go=class extends St{setValue(t,e){let[n]=this.children,i=t*this.stride;for(let s=-1,o=e.length;++s<o;)n.set(i+s,e[s])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new Qe(this.type.listSize,new Y(e,t.type,!0)),n}};var On=class extends zt{setValue(t,e){this._values.set(t,e)}},wo=class extends On{setValue(t,e){super.setValue(t,Ti(e))}},vo=class extends On{},So=class extends On{};var Rn=class extends zt{};Rn.prototype._setValue=Ya;var Yi=class extends Rn{};Yi.prototype._setValue=to;var $i=class extends Rn{};$i.prototype._setValue=eo;var Ve=class extends zt{setValue(t,e){this._values.set(t,e)}},Io=class extends Ve{},Fo=class extends Ve{},Ao=class extends Ve{},To=class extends Ve{},Eo=class extends Ve{},xo=class extends Ve{},Do=class extends Ve{},Bo=class extends Ve{};var Oo=class extends hr{constructor(t){super(t),this._offsets=new ti}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new Je(new Y(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(typeof s>"u")e.set(i,0);else{let o=s.length,a=e.set(i,o).buffer[i];for(let c=-1;++c<o;)n.set(a+c,s[c])}}};var Ro=class extends hr{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),i=this._pending||(this._pending=new Map),s=i.get(t);s&&(this._pendingLength-=s.size),this._pendingLength+=n.size,i.set(t,n)}addChild(t,e=`${this.numChildren}`){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new Ze(new Y(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(s===void 0)e.set(i,0);else{let{[i]:o,[i+1]:a}=e.set(i,s.size).buffer;for(let c of s.entries())if(n.set(o,c),++o>=a)break}}};var Mo=class extends St{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var Co=class extends St{setValue(t,e){let{children:n,type:i}=this;switch(Array.isArray(e)||e.constructor){case!0:return i.children.forEach((s,o)=>n[o].set(t,e[o]));case Map:return i.children.forEach((s,o)=>n[o].set(t,e.get(s.name)));default:return i.children.forEach((s,o)=>n[o].set(t,e[s.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e=`${this.numChildren}`){let n=this.children.push(t);return this.type=new mt([...this.type.children,new Y(e,t.type,!0)]),n}};var Wr=class extends zt{};Wr.prototype._setValue=Ha;var Gi=class extends Wr{};Gi.prototype._setValue=$s;var Xi=class extends Wr{};Xi.prototype._setValue=Gs;var Ki=class extends Wr{};Ki.prototype._setValue=Xs;var Ji=class extends Wr{};Ji.prototype._setValue=Ks;var Yr=class extends zt{};Yr.prototype._setValue=za;var qi=class extends Yr{};qi.prototype._setValue=Js;var Qi=class extends Yr{};Qi.prototype._setValue=qs;var Zi=class extends Yr{};Zi.prototype._setValue=Qs;var ts=class extends Yr{};ts.prototype._setValue=Zs;var si=class extends St{constructor(t){super(t),this._typeIds=new Pr(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let i=this.type.typeIdToChildIndex[n],s=this.children[i];s==null||s.set(t,e)}addChild(t,e=`${this.children.length}`){let n=this.children.push(t),{type:{children:i,mode:s,typeIds:o}}=this,a=[...i,new Y(e,t.type)];return this.type=new qe(s,[...o,n],a),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},Lo=class extends si{},ko=class extends si{constructor(t){super(t),this._offsets=new Pr(new Int32Array(0))}setValue(t,e,n){let i=this._typeIds.set(t,n).buffer[t],s=this.getChildAt(this.type.typeIdToChildIndex[i]),o=this._offsets.set(t,s.length).buffer[t];s==null||s.set(o,e)}};var es=class extends hr{constructor(t){super(t),this._values=new on(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,Zr(e))}_flushPending(t,e){}};es.prototype._flushPending=ii.prototype._flushPending;var al=class extends R{visitNull(){return Mo}visitBool(){return yo}visitInt(){return Ve}visitInt8(){return Io}visitInt16(){return Fo}visitInt32(){return Ao}visitInt64(){return To}visitUint8(){return Eo}visitUint16(){return xo}visitUint32(){return Do}visitUint64(){return Bo}visitFloat(){return On}visitFloat16(){return wo}visitFloat32(){return vo}visitFloat64(){return So}visitUtf8(){return es}visitBinary(){return ii}visitFixedSizeBinary(){return Wi}visitDate(){return Dn}visitDateDay(){return Vi}visitDateMillisecond(){return Hi}visitTimestamp(){return Wr}visitTimestampSecond(){return Gi}visitTimestampMillisecond(){return Xi}visitTimestampMicrosecond(){return Ki}visitTimestampNanosecond(){return Ji}visitTime(){return Yr}visitTimeSecond(){return qi}visitTimeMillisecond(){return Qi}visitTimeMicrosecond(){return Zi}visitTimeNanosecond(){return ts}visitDecimal(){return zi}visitList(){return Oo}visitStruct(){return Co}visitUnion(){return si}visitDenseUnion(){return ko}visitSparseUnion(){return Lo}visitDictionary(){return bo}visitInterval(){return Rn}visitIntervalDayTime(){return Yi}visitIntervalYearMonth(){return $i}visitFixedSizeList(){return go}visitMap(){return Ro}},Wu=new al;var U=class extends R{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,i)=>this.compareFields(n,e[i]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function ve(r,t){return t instanceof r.constructor}function rs(r,t){return r===t||ve(r,t)}function $r(r,t){return r===t||ve(r,t)&&r.bitWidth===t.bitWidth&&r.isSigned===t.isSigned}function Uo(r,t){return r===t||ve(r,t)&&r.precision===t.precision}function k_(r,t){return r===t||ve(r,t)&&r.byteWidth===t.byteWidth}function ll(r,t){return r===t||ve(r,t)&&r.unit===t.unit}function ns(r,t){return r===t||ve(r,t)&&r.unit===t.unit&&r.timezone===t.timezone}function is(r,t){return r===t||ve(r,t)&&r.unit===t.unit&&r.bitWidth===t.bitWidth}function U_(r,t){return r===t||ve(r,t)&&r.children.length===t.children.length&&Ir.compareManyFields(r.children,t.children)}function N_(r,t){return r===t||ve(r,t)&&r.children.length===t.children.length&&Ir.compareManyFields(r.children,t.children)}function cl(r,t){return r===t||ve(r,t)&&r.mode===t.mode&&r.typeIds.every((e,n)=>e===t.typeIds[n])&&Ir.compareManyFields(r.children,t.children)}function j_(r,t){return r===t||ve(r,t)&&r.id===t.id&&r.isOrdered===t.isOrdered&&Ir.visit(r.indices,t.indices)&&Ir.visit(r.dictionary,t.dictionary)}function ul(r,t){return r===t||ve(r,t)&&r.unit===t.unit}function P_(r,t){return r===t||ve(r,t)&&r.listSize===t.listSize&&r.children.length===t.children.length&&Ir.compareManyFields(r.children,t.children)}function V_(r,t){return r===t||ve(r,t)&&r.keysSorted===t.keysSorted&&r.children.length===t.children.length&&Ir.compareManyFields(r.children,t.children)}U.prototype.visitNull=rs;U.prototype.visitBool=rs;U.prototype.visitInt=$r;U.prototype.visitInt8=$r;U.prototype.visitInt16=$r;U.prototype.visitInt32=$r;U.prototype.visitInt64=$r;U.prototype.visitUint8=$r;U.prototype.visitUint16=$r;U.prototype.visitUint32=$r;U.prototype.visitUint64=$r;U.prototype.visitFloat=Uo;U.prototype.visitFloat16=Uo;U.prototype.visitFloat32=Uo;U.prototype.visitFloat64=Uo;U.prototype.visitUtf8=rs;U.prototype.visitBinary=rs;U.prototype.visitFixedSizeBinary=k_;U.prototype.visitDate=ll;U.prototype.visitDateDay=ll;U.prototype.visitDateMillisecond=ll;U.prototype.visitTimestamp=ns;U.prototype.visitTimestampSecond=ns;U.prototype.visitTimestampMillisecond=ns;U.prototype.visitTimestampMicrosecond=ns;U.prototype.visitTimestampNanosecond=ns;U.prototype.visitTime=is;U.prototype.visitTimeSecond=is;U.prototype.visitTimeMillisecond=is;U.prototype.visitTimeMicrosecond=is;U.prototype.visitTimeNanosecond=is;U.prototype.visitDecimal=rs;U.prototype.visitList=U_;U.prototype.visitStruct=N_;U.prototype.visitUnion=cl;U.prototype.visitDenseUnion=cl;U.prototype.visitSparseUnion=cl;U.prototype.visitDictionary=j_;U.prototype.visitInterval=ul;U.prototype.visitIntervalDayTime=ul;U.prototype.visitIntervalYearMonth=ul;U.prototype.visitFixedSizeList=P_;U.prototype.visitMap=V_;var Ir=new U;function Mn(r,t){return Ir.compareSchemas(r,t)}function Yu(r,t){return Ir.compareFields(r,t)}function $u(r,t){return Ir.visit(r,t)}function Bn(r){let t=r.type,e=new(Wu.getVisitFn(t)())(r);if(t.children&&t.children.length>0){let n=r.children||[],i={nullValues:r.nullValues},s=Array.isArray(n)?(o,a)=>n[a]||i:({name:o})=>n[o]||i;for(let[o,a]of t.children.entries()){let{type:c}=a,f=s(a,o);e.children.push(Bn(Object.assign(Object.assign({},f),{type:c})))}}return e}function No(r,t){return H_(r,t.map(e=>e.data.concat()))}function H_(r,t){let e=[...r.fields],n=[],i={numBatches:t.reduce((y,g)=>Math.max(y,g.length),0)},s=0,o=0,a=-1,c=t.length,f,p=[];for(;i.numBatches-- >0;){for(o=Number.POSITIVE_INFINITY,a=-1;++a<c;)p[a]=f=t[a].shift(),o=Math.min(o,f?f.length:o);Number.isFinite(o)&&(p=z_(e,o,p,t,i),o>0&&(n[s++]=H({type:new mt(e),length:o,nullCount:0,children:p.slice()})))}return[r=r.assign(e),n.map(y=>new pt(r,y))]}function z_(r,t,e,n,i){var s;let o=(t+63&-64)>>3;for(let a=-1,c=n.length;++a<c;){let f=e[a],p=f==null?void 0:f.length;if(p>=t)p===t?e[a]=f:(e[a]=f.slice(0,t),i.numBatches=Math.max(i.numBatches,n[a].unshift(f.slice(t,p-t))));else{let y=r[a];r[a]=y.clone({nullable:!0}),e[a]=(s=f==null?void 0:f._changeLengthAndBackfillNullBitmap(t))!==null&&s!==void 0?s:H({type:y.type,length:t,nullCount:t,nullBitmap:new Uint8Array(o)})}}return e}var Gu,Et=class{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new rt([]),this._offsets=[0],this;let i,s;t[0]instanceof rt&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(s=t.pop());let o=c=>{if(c){if(c instanceof pt)return[c];if(c instanceof Et)return c.batches;if(c instanceof st){if(c.type instanceof mt)return[new pt(new rt(c.type.children),c)]}else{if(Array.isArray(c))return c.flatMap(f=>o(f));if(typeof c[Symbol.iterator]=="function")return[...c].flatMap(f=>o(f));if(typeof c=="object"){let f=Object.keys(c),p=f.map(v=>new V([c[v]])),y=new rt(f.map((v,nt)=>new Y(String(v),p[nt].type))),[,g]=No(y,p);return g.length===0?[new pt(c)]:g}}}return[]},a=t.flatMap(c=>o(c));if(i=(n=i!=null?i:(e=a[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new rt([]),!(i instanceof rt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let c of a){if(!(c instanceof pt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!Mn(i,c.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=a,this._offsets=s!=null?s:oo(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=so(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?qn.visit(new V(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return`[
  ${this.toArray().join(`,
  `)}
]`}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:i})=>i));return new Et(e,n.map(i=>new pt(e,i)))}slice(t,e){let n=this.schema;[t,e]=Ei({length:this.numRows},t,e);let i=ao(this.data,this._offsets,t,e);return new Et(n,i.map(s=>new pt(n,s)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],i=H({type:n,length:0,nullCount:0});e.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new V(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new V([H({type:new le,length:this.numRows})]));let s=n.fields.slice(),o=s[t].clone({type:e.type}),a=this.schema.fields.map((c,f)=>this.getChildAt(f));[s[t],a[t]]=[o,e],[n,i]=No(n,a)}return new Et(n,i)}select(t){let e=this.schema.fields.reduce((n,i,s)=>n.set(i.name,s),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(i=>i.selectAt(t));return new Et(e,n)}assign(t){let e=this.schema.fields,[n,i]=t.schema.fields.reduce((a,c,f)=>{let[p,y]=a,g=e.findIndex(v=>v.name===c.name);return~g?y[g]=f:p.push(f),a},[[],[]]),s=this.schema.assign(t.schema),o=[...e.map((a,c)=>[c,i[c]]).map(([a,c])=>c===void 0?this.getChildAt(a):t.getChildAt(c)),...n.map(a=>t.getChildAt(a))].filter(Boolean);return new Et(...No(s,o))}};Gu=Symbol.toStringTag;Et[Gu]=(r=>(r.schema=null,r.batches=[],r._offsets=new Uint32Array([0]),r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,r.isValid=sn(Bi),r.get=sn(Ct.getVisitFn(h.Struct)),r.set=lo(qt.getVisitFn(h.Struct)),r.indexOf=co(Tn.getVisitFn(h.Struct)),r.getByteLength=sn(De.getVisitFn(h.Struct)),"Table"))(Et.prototype);var Ku,pt=class{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof rt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=H({nullCount:0,type:new mt(this.schema.fields),children:this.schema.fields.map(e=>H({type:e.type,nullCount:0}))})]=t,!(this.data instanceof st))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=Xu(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:i,length:s}=Object.keys(e).reduce((c,f,p)=>(c.children[p]=e[f],c.length=Math.max(c.length,e[f].length),c.fields[p]=Y.new({name:f,type:e[f].type,nullable:!0}),c),{length:0,fields:new Array,children:new Array}),o=new rt(n),a=H({type:new mt(n),length:s,children:i,nullCount:0});[this.schema,this.data]=Xu(o,a.children,s);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=Ju(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Ct.visit(this.data,t)}set(t,e){return qt.visit(this.data,t,e)}indexOf(t,e){return Tn.visit(this.data,t,e)}getByteLength(t){return De.visit(this.data,t)}[Symbol.iterator](){return qn.visit(new V([this.data]))}toArray(){return[...this]}concat(...t){return new Et(this.schema,[this,...t])}slice(t,e){let[n]=new V([this.data]).slice(t,e).data;return new pt(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new V([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=this.data;if(t>-1&&t<this.numCols){e||(e=new V([H({type:new le,length:this.numRows})]));let s=n.fields.slice(),o=i.children.slice(),a=s[t].clone({type:e.type});[s[t],o[t]]=[a,e.data[0]],n=new rt(s,new Map(this.schema.metadata)),i=H({type:new mt(s),children:o})}return new pt(n,i)}select(t){let e=this.schema.select(t),n=new mt(e.fields),i=[];for(let s of t){let o=this.schema.fields.findIndex(a=>a.name===s);~o&&(i[o]=this.data.children[o])}return new pt(e,H({type:n,length:this.numRows,children:i}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(s=>this.data.children[s]).filter(Boolean),i=H({type:new mt(e.fields),length:this.numRows,children:n});return new pt(e,i)}};Ku=Symbol.toStringTag;pt[Ku]=(r=>(r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(pt.prototype);function Xu(r,t,e=t.reduce((n,i)=>Math.max(n,i.length),0)){var n;let i=[...r.fields],s=[...t],o=(e+63&-64)>>3;for(let[a,c]of r.fields.entries()){let f=t[a];(!f||f.length!==e)&&(i[a]=c.clone({nullable:!0}),s[a]=(n=f==null?void 0:f._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:H({type:c.type,length:e,nullCount:e,nullBitmap:new Uint8Array(o)}))}return[r.assign(i),H({type:new mt(i),length:e,children:s})]}function Ju(r,t,e=new Map){for(let n=-1,i=r.length;++n<i;){let o=r[n].type,a=t[n];if(x.isDictionary(o)){if(!e.has(o.id))a.dictionary&&e.set(o.id,a.dictionary);else if(e.get(o.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&Ju(o.children,a.children,e)}return e}var Cn=class extends pt{constructor(t){let e=t.fields.map(i=>H({type:i.type})),n=H({type:new mt(t.fields),nullCount:0,children:e});super(t,n)}};var ss;(function(r){r[r.BUFFER=0]="BUFFER"})(ss||(ss={}));var os;(function(r){r[r.LZ4_FRAME=0]="LZ4_FRAME",r[r.ZSTD=1]="ZSTD"})(os||(os={}));var nr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new nr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new nr).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):os.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):ss.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,os.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,ss.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return nr.startBodyCompression(t),nr.addCodec(t,e),nr.addMethod(t,n),nr.endBodyCompression(t)}};var oi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var ai=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var ne=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new ne).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new ne).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new ai).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new oi).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new nr).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var He=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new He).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new He).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new ne).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var li;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(li||(li={}));var Rt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new Rt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new Rt).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):an.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):li.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,an.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,li.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,t.createLong(0,0))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,i,s,o){return Rt.startMessage(t),Rt.addVersion(t,e),Rt.addHeaderType(t,n),Rt.addHeader(t,i),Rt.addBodyLength(t,s),Rt.addCustomMetadata(t,o),Rt.endMessage(t)}};var Y_=Lt,dl=class extends R{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return br.startNull(e),br.endNull(e)}visitInt(t,e){return Wt.startInt(e),Wt.addBitWidth(e,t.bitWidth),Wt.addIsSigned(e,t.isSigned),Wt.endInt(e)}visitFloat(t,e){return me.startFloatingPoint(e),me.addPrecision(e,t.precision),me.endFloatingPoint(e)}visitBinary(t,e){return _r.startBinary(e),_r.endBinary(e)}visitBool(t,e){return mr.startBool(e),mr.endBool(e)}visitUtf8(t,e){return wr.startUtf8(e),wr.endUtf8(e)}visitDecimal(t,e){return Yt.startDecimal(e),Yt.addScale(e,t.scale),Yt.addPrecision(e,t.precision),Yt.addBitWidth(e,t.bitWidth),Yt.endDecimal(e)}visitDate(t,e){return he.startDate(e),he.addUnit(e,t.unit),he.endDate(e)}visitTime(t,e){return te.startTime(e),te.addUnit(e,t.unit),te.addBitWidth(e,t.bitWidth),te.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return ee.startTimestamp(e),ee.addUnit(e,t.unit),n!==void 0&&ee.addTimezone(e,n),ee.endTimestamp(e)}visitInterval(t,e){return ye.startInterval(e),ye.addUnit(e,t.unit),ye.endInterval(e)}visitList(t,e){return yr.startList(e),yr.endList(e)}visitStruct(t,e){return gr.startStruct_(e),gr.endStruct_(e)}visitUnion(t,e){$t.startTypeIdsVector(e,t.typeIds.length);let n=$t.createTypeIdsVector(e,t.typeIds);return $t.startUnion(e),$t.addMode(e,t.mode),$t.addTypeIds(e,n),$t.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Be.startDictionaryEncoding(e),Be.addId(e,new Y_(t.id,0)),Be.addIsOrdered(e,t.isOrdered),n!==void 0&&Be.addIndexType(e,n),Be.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return pe.startFixedSizeBinary(e),pe.addByteWidth(e,t.byteWidth),pe.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return _e.startFixedSizeList(e),_e.addListSize(e,t.listSize),_e.endFixedSizeList(e)}visitMap(t,e){return be.startMap(e),be.addKeysSorted(e,t.keysSorted),be.endMap(e)}},jo=new dl;function td(r,t=new Map){return new rt($_(r,t),Po(r.customMetadata),t)}function fl(r){return new Qt(r.count,rd(r.columns),nd(r.columns))}function ed(r){return new Ie(fl(r.data),r.id,r.isDelta)}function $_(r,t){return(r.fields||[]).filter(Boolean).map(e=>Y.fromJSON(e,t))}function qu(r,t){return(r.children||[]).filter(Boolean).map(e=>Y.fromJSON(e,t))}function rd(r){return(r||[]).reduce((t,e)=>[...t,new ir(e.count,G_(e.VALIDITY)),...rd(e.children)],[])}function nd(r,t=[]){for(let e=-1,n=(r||[]).length;++e<n;){let i=r[e];i.VALIDITY&&t.push(new Se(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new Se(t.length,i.TYPE.length)),i.OFFSET&&t.push(new Se(t.length,i.OFFSET.length)),i.DATA&&t.push(new Se(t.length,i.DATA.length)),t=nd(i.children,t)}return t}function G_(r){return(r||[]).reduce((t,e)=>t+ +(e===0),0)}function id(r,t){let e,n,i,s,o,a;return!t||!(s=r.dictionary)?(o=Zu(r,qu(r,t)),i=new Y(r.name,o,r.nullable,Po(r.customMetadata))):t.has(e=s.id)?(n=(n=s.indexType)?Qu(n):new ur,a=new Ee(t.get(e),n,e,s.isOrdered),i=new Y(r.name,a,r.nullable,Po(r.customMetadata))):(n=(n=s.indexType)?Qu(n):new ur,t.set(e,o=Zu(r,qu(r,t))),a=new Ee(o,n,e,s.isOrdered),i=new Y(r.name,a,r.nullable,Po(r.customMetadata))),i||null}function Po(r){return new Map(Object.entries(r||{}))}function Qu(r){return new Ot(r.isSigned,r.bitWidth)}function Zu(r,t){let e=r.type.name;switch(e){case"NONE":return new le;case"null":return new le;case"binary":return new Or;case"utf8":return new Rr;case"bool":return new Mr;case"list":return new Je((t||[])[0]);case"struct":return new mt(t||[]);case"struct_":return new mt(t||[])}switch(e){case"int":{let n=r.type;return new Ot(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=r.type;return new fe(vt[n.precision])}case"decimal":{let n=r.type;return new Cr(n.scale,n.precision,n.bitWidth)}case"date":{let n=r.type;return new Lr(Jt[n.unit])}case"time":{let n=r.type;return new Ke(Z[n.unit],n.bitWidth)}case"timestamp":{let n=r.type;return new kr(Z[n.unit],n.timezone)}case"interval":{let n=r.type;return new Ur(ae[n.unit])}case"union":{let n=r.type;return new qe(Ft[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=r.type;return new Nr(n.byteWidth)}case"fixedsizelist":{let n=r.type;return new Qe(n.listSize,(t||[])[0])}case"map":{let n=r.type;return new Ze((t||[])[0],n.keysSorted)}}throw new Error(`Unrecognized type: "${e}"`)}var Ln=Lt,X_=Vr,K_=ce,Ut=class{constructor(t,e,n,i){this._version=e,this._headerType=n,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=typeof t=="number"?t:t.low}static fromJSON(t,e){let n=new Ut(0,Ht.V4,e);return n._createHeader=J_(t,e),n}static decode(t){t=new K_(j(t));let e=Rt.getRootAsMessage(t),n=e.bodyLength(),i=e.version(),s=e.headerType(),o=new Ut(n,i,s);return o._createHeader=q_(e,s),o}static encode(t){let e=new X_,n=-1;return t.isSchema()?n=rt.encode(e,t.header()):t.isRecordBatch()?n=Qt.encode(e,t.header()):t.isDictionaryBatch()&&(n=Ie.encode(e,t.header())),Rt.startMessage(e),Rt.addVersion(e,Ht.V4),Rt.addHeader(e,n),Rt.addHeaderType(e,t.headerType),Rt.addBodyLength(e,new Ln(t.bodyLength,0)),Rt.finishMessageBuffer(e,Rt.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof rt)return new Ut(0,Ht.V4,it.Schema,t);if(t instanceof Qt)return new Ut(e,Ht.V4,it.RecordBatch,t);if(t instanceof Ie)return new Ut(e,Ht.V4,it.DictionaryBatch,t);throw new Error(`Unrecognized Message header: ${t}`)}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===it.Schema}isRecordBatch(){return this.headerType===it.RecordBatch}isDictionaryBatch(){return this.headerType===it.DictionaryBatch}},Qt=class{constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=typeof t=="number"?t:t.low}get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}},Ie=class{constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=typeof e=="number"?e:e.low}get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}},Se=class{constructor(t,e){this.offset=typeof t=="number"?t:t.low,this.length=typeof e=="number"?e:e.low}},ir=class{constructor(t,e){this.length=typeof t=="number"?t:t.low,this.nullCount=typeof e=="number"?e:e.low}};function J_(r,t){return()=>{switch(t){case it.Schema:return rt.fromJSON(r);case it.RecordBatch:return Qt.fromJSON(r);case it.DictionaryBatch:return Ie.fromJSON(r)}throw new Error(`Unrecognized Message type: { name: ${it[t]}, type: ${t} }`)}}function q_(r,t){return()=>{switch(t){case it.Schema:return rt.decode(r.header(new At));case it.RecordBatch:return Qt.decode(r.header(new ne),r.version());case it.DictionaryBatch:return Ie.decode(r.header(new He),r.version())}throw new Error(`Unrecognized Message type: { name: ${it[t]}, type: ${t} }`)}}Y.encode=lm;Y.decode=om;Y.fromJSON=id;rt.encode=am;rt.decode=Q_;rt.fromJSON=td;Qt.encode=cm;Qt.decode=Z_;Qt.fromJSON=fl;Ie.encode=um;Ie.decode=tm;Ie.fromJSON=ed;ir.encode=dm;ir.decode=rm;Se.encode=fm;Se.decode=em;function Q_(r,t=new Map){let e=sm(r,t);return new rt(e,Vo(r),t)}function Z_(r,t=Ht.V4){if(r.compression()!==null)throw new Error("Record batch compression not implemented");return new Qt(r.length(),nm(r),im(r,t))}function tm(r,t=Ht.V4){return new Ie(Qt.decode(r.data(),t),r.id(),r.isDelta())}function em(r){return new Se(r.offset(),r.length())}function rm(r){return new ir(r.length(),r.nullCount())}function nm(r){let t=[];for(let e,n=-1,i=-1,s=r.nodesLength();++n<s;)(e=r.nodes(n))&&(t[++i]=ir.decode(e));return t}function im(r,t){let e=[];for(let n,i=-1,s=-1,o=r.buffersLength();++i<o;)(n=r.buffers(i))&&(t<Ht.V4&&(n.bb_pos+=8*(i+1)),e[++s]=Se.decode(n));return e}function sm(r,t){let e=[];for(let n,i=-1,s=-1,o=r.fieldsLength();++i<o;)(n=r.fields(i))&&(e[++s]=Y.decode(n,t));return e}function sd(r,t){let e=[];for(let n,i=-1,s=-1,o=r.childrenLength();++i<o;)(n=r.children(i))&&(e[++s]=Y.decode(n,t));return e}function om(r,t){let e,n,i,s,o,a;return!t||!(a=r.dictionary())?(i=ad(r,sd(r,t)),n=new Y(r.name(),i,r.nullable(),Vo(r))):t.has(e=a.id().low)?(s=(s=a.indexType())?od(s):new ur,o=new Ee(t.get(e),s,e,a.isOrdered()),n=new Y(r.name(),o,r.nullable(),Vo(r))):(s=(s=a.indexType())?od(s):new ur,t.set(e,i=ad(r,sd(r,t))),o=new Ee(i,s,e,a.isOrdered()),n=new Y(r.name(),o,r.nullable(),Vo(r))),n||null}function Vo(r){let t=new Map;if(r)for(let e,n,i=-1,s=Math.trunc(r.customMetadataLength());++i<s;)(e=r.customMetadata(i))&&(n=e.key())!=null&&t.set(n,e.value());return t}function od(r){return new Ot(r.isSigned(),r.bitWidth())}function ad(r,t){let e=r.typeType();switch(e){case It.NONE:return new le;case It.Null:return new le;case It.Binary:return new Or;case It.Utf8:return new Rr;case It.Bool:return new Mr;case It.List:return new Je((t||[])[0]);case It.Struct_:return new mt(t||[])}switch(e){case It.Int:{let n=r.type(new Wt);return new Ot(n.isSigned(),n.bitWidth())}case It.FloatingPoint:{let n=r.type(new me);return new fe(n.precision())}case It.Decimal:{let n=r.type(new Yt);return new Cr(n.scale(),n.precision(),n.bitWidth())}case It.Date:{let n=r.type(new he);return new Lr(n.unit())}case It.Time:{let n=r.type(new te);return new Ke(n.unit(),n.bitWidth())}case It.Timestamp:{let n=r.type(new ee);return new kr(n.unit(),n.timezone())}case It.Interval:{let n=r.type(new ye);return new Ur(n.unit())}case It.Union:{let n=r.type(new $t);return new qe(n.mode(),n.typeIdsArray()||[],t||[])}case It.FixedSizeBinary:{let n=r.type(new pe);return new Nr(n.byteWidth())}case It.FixedSizeList:{let n=r.type(new _e);return new Qe(n.listSize(),(t||[])[0])}case It.Map:{let n=r.type(new be);return new Ze((t||[])[0],n.keysSorted())}}throw new Error(`Unrecognized type: "${It[e]}" (${e})`)}function am(r,t){let e=t.fields.map(s=>Y.encode(r,s));At.startFieldsVector(r,e.length);let n=At.createFieldsVector(r,e),i=t.metadata&&t.metadata.size>0?At.createCustomMetadataVector(r,[...t.metadata].map(([s,o])=>{let a=r.createString(`${s}`),c=r.createString(`${o}`);return yt.startKeyValue(r),yt.addKey(r,a),yt.addValue(r,c),yt.endKeyValue(r)})):-1;return At.startSchema(r),At.addFields(r,n),At.addEndianness(r,hm?ln.Little:ln.Big),i!==-1&&At.addCustomMetadata(r,i),At.endSchema(r)}function lm(r,t){let e=-1,n=-1,i=-1,s=t.type,o=t.typeId;x.isDictionary(s)?(o=s.dictionary.typeId,i=jo.visit(s,r),n=jo.visit(s.dictionary,r)):n=jo.visit(s,r);let a=(s.children||[]).map(p=>Y.encode(r,p)),c=kt.createChildrenVector(r,a),f=t.metadata&&t.metadata.size>0?kt.createCustomMetadataVector(r,[...t.metadata].map(([p,y])=>{let g=r.createString(`${p}`),v=r.createString(`${y}`);return yt.startKeyValue(r),yt.addKey(r,g),yt.addValue(r,v),yt.endKeyValue(r)})):-1;return t.name&&(e=r.createString(t.name)),kt.startField(r),kt.addType(r,n),kt.addTypeType(r,o),kt.addChildren(r,c),kt.addNullable(r,!!t.nullable),e!==-1&&kt.addName(r,e),i!==-1&&kt.addDictionary(r,i),f!==-1&&kt.addCustomMetadata(r,f),kt.endField(r)}function cm(r,t){let e=t.nodes||[],n=t.buffers||[];ne.startNodesVector(r,e.length);for(let o of e.slice().reverse())ir.encode(r,o);let i=r.endVector();ne.startBuffersVector(r,n.length);for(let o of n.slice().reverse())Se.encode(r,o);let s=r.endVector();return ne.startRecordBatch(r),ne.addLength(r,new Ln(t.length,0)),ne.addNodes(r,i),ne.addBuffers(r,s),ne.endRecordBatch(r)}function um(r,t){let e=Qt.encode(r,t.data);return He.startDictionaryBatch(r),He.addId(r,new Ln(t.id,0)),He.addIsDelta(r,t.isDelta),He.addData(r,e),He.endDictionaryBatch(r)}function dm(r,t){return ai.createFieldNode(r,new Ln(t.length,0),new Ln(t.nullCount,0))}function fm(r,t){return oi.createBuffer(r,new Ln(t.offset,0),new Ln(t.length,0))}var hm=(()=>{let r=new ArrayBuffer(2);return new DataView(r).setInt16(0,256,!0),new Int16Array(r)[0]===256})();var pl=r=>`Expected ${it[r]} Message in stream, but was null or length 0.`,_l=r=>`Header pointer of flatbuffer-encoded ${it[r]} Message is null or length 0.`,ld=(r,t)=>`Expected to read ${r} metadata bytes, but only read ${t}.`,cd=(r,t)=>`Expected to read ${r} bytes for message body, but only read ${t}.`,ci=class{constructor(t){this.source=t instanceof Sr?t:new Sr(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?bt:t.value===-1&&(t=this.readMetadataLength()).done?bt:(t=this.readMetadata(t.value)).done?bt:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(pl(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=j(this.source.read(t));if(e.byteLength<t)throw new Error(cd(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=it.Schema,n=this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(_l(e));return i}readMetadataLength(){let t=this.source.read(Ho),e=t&&new ce(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return bt;if(e.byteLength<t)throw new Error(ld(t,e.byteLength));return{done:!1,value:Ut.decode(e)}}},as=class{constructor(t,e){this.source=t instanceof ge?t:Es(t)?new un(t,e):new ge(t)}[Symbol.asyncIterator](){return this}next(){return I(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?bt:t.value===-1&&(t=yield this.readMetadataLength()).done?bt:(t=yield this.readMetadata(t.value)).done?bt:t})}throw(t){return I(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return I(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return I(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(pl(t));return e.value})}readMessageBody(t){return I(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=j(yield this.source.read(t));if(e.byteLength<t)throw new Error(cd(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return I(this,void 0,void 0,function*(){let e=it.Schema,n=yield this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(_l(e));return i})}readMetadataLength(){return I(this,void 0,void 0,function*(){let t=yield this.source.read(Ho),e=t&&new ce(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return I(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return bt;if(e.byteLength<t)throw new Error(ld(t,e.byteLength));return{done:!1,value:Ut.decode(e)}})}},ls=class extends ci{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof Ui?t:new Ui(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:Ut.fromJSON(t.schema,it.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:Ut.fromJSON(e,it.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:Ut.fromJSON(e,it.RecordBatch)}}return this._body=[],bt}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((i,s)=>[...i,...s.VALIDITY&&[s.VALIDITY]||[],...s.TYPE&&[s.TYPE]||[],...s.OFFSET&&[s.OFFSET]||[],...s.DATA&&[s.DATA]||[],...e(s.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(pl(t));return e.value}readSchema(){let t=it.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(_l(t));return n}},Ho=4,hl="ARROW1",ui=new Uint8Array(hl.length);for(let r=0;r<hl.length;r+=1)ui[r]=hl.codePointAt(r);function zo(r,t=0){for(let e=-1,n=ui.length;++e<n;)if(ui[e]!==r[t+e])return!1;return!0}var di=ui.length,ml=di+Ho,ud=di*2+Ho;var Mt=class extends xn{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return We(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return Kt.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return Kt.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof Mt?t:As(t)?_m(t):Es(t)?bm(t):We(t)?(()=>I(this,void 0,void 0,function*(){return yield Mt.from(yield t)}))():xs(t)||Ii(t)||Bs(t)||Ue(t)?ym(new ge(t)):mm(new Sr(t))}static readAll(t){return t instanceof Mt?t.isSync()?dd(t):fd(t):As(t)||ArrayBuffer.isView(t)||Ye(t)||Ts(t)?dd(t):fd(t)}},Fr=class extends Mt{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return de(this,arguments,function*(){yield X(yield*Hn(Ce(this[Symbol.iterator]())))})}},dn=class extends Mt{constructor(t){super(t),this._impl=t}readAll(){var t,e;return I(this,void 0,void 0,function*(){let n=new Array;try{for(var i=Ce(this),s;s=yield i.next(),!s.done;){let o=s.value;n.push(o)}}catch(o){t={error:o}}finally{try{s&&!s.done&&(e=i.return)&&(yield e.call(i))}finally{if(t)throw t.error}}return n})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},fn=class extends Fr{constructor(t){super(t),this._impl=t}},cs=class extends dn{constructor(t){super(t),this._impl=t}},Wo=class{constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),i=H({type:new mt(this.schema.fields),length:t.length,children:n});return new pt(this.schema,i)}_loadDictionaryBatch(t,e){let{id:n,isDelta:i}=t,{dictionaries:s,schema:o}=this,a=s.get(n);if(i||!a){let c=o.dictionaries.get(n),f=this._loadVectors(t.data,e,[c]);return(a&&i?a.concat(new V(f)):new V(f)).memoize()}return a.memoize()}_loadVectors(t,e,n){return new Pi(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},fi=class extends Wo{constructor(t,e){super(e),this._reader=As(t)?new ls(this._handle=t):new ci(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=hd(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):bt}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):bt}next(){if(this.closed)return bt;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Cn(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},hi=class extends Wo{constructor(t,e){super(e),this._reader=new as(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return I(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return I(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=hd(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return I(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):bt})}return(t){return I(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):bt})}next(){return I(this,void 0,void 0,function*(){if(this.closed)return bt;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Cn(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return I(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},Yo=class extends fi{constructor(t,e){super(t instanceof Ni?t:new Ni(t),e)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(it.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(it.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}}_readFooter(){let{_handle:t}=this,e=t.size-ml,n=t.readInt32(e),i=t.readAt(e-n,n);return Hr.decode(i)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},yl=class extends hi{constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,i=e[0]instanceof Map?e.shift():void 0;super(t instanceof un?t:new un(t,n),i)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return I(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return I(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(it.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null})}_readDictionaryBatch(t){var e;return I(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(it.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}})}_readFooter(){return I(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-ml,n=yield t.readInt32(e),i=yield t.readAt(e-n,n);return Hr.decode(i)})}_readNextMessageAndValidate(t){return I(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},bl=class extends fi{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new mo(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function hd(r,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:r.autoDestroy}function*dd(r){let t=Mt.from(r);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function fd(r){return de(this,arguments,function*(){let e=yield X(Mt.from(r));try{if(!(yield X(e.open({autoDestroy:!1}))).closed)do yield yield X(e);while(!(yield X(e.reset().open())).closed)}finally{yield X(e.cancel())}})}function _m(r){return new Fr(new bl(r))}function mm(r){let t=r.peek(di+7&-8);return t&&t.byteLength>=4?zo(t)?new fn(new Yo(r.read())):new Fr(new fi(r)):new Fr(new fi(function*(){}()))}function ym(r){return I(this,void 0,void 0,function*(){let t=yield r.peek(di+7&-8);return t&&t.byteLength>=4?zo(t)?new fn(new Yo(yield r.read())):new dn(new hi(r)):new dn(new hi(function(){return de(this,arguments,function*(){})}()))})}function bm(r){return I(this,void 0,void 0,function*(){let{size:t}=yield r.stat(),e=new un(r,t);return t>=ud&&zo(yield e.readAt(0,di+7&-8))?new cs(new yl(e)):new dn(new hi(e))})}var Tt=class extends R{constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}static assemble(...t){let e=i=>i.flatMap(s=>Array.isArray(s)?e(s):s instanceof pt?s.data.children:s.data),n=new Tt;return n.visitMany(e(t)),n}visit(t){if(t instanceof V)return this.visitMany(t.data),this;let{type:e}=t;if(!x.isDictionary(e)){let{length:n,nullCount:i}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");x.isNull(e)||sr.call(this,i<=0?new Uint8Array(0):Jn(t.offset,n,t.nullBitmap)),this.nodes.push(new ir(n,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function sr(r){let t=r.byteLength+7&-8;return this.buffers.push(r),this.bufferRegions.push(new Se(this._byteLength,t)),this._byteLength+=t,this}function gm(r){let{type:t,length:e,typeIds:n,valueOffsets:i}=r;if(sr.call(this,n),t.mode===Ft.Sparse)return gl.call(this,r);if(t.mode===Ft.Dense){if(r.offset<=0)return sr.call(this,i),gl.call(this,r);{let s=n.reduce((p,y)=>Math.max(p,y),n[0]),o=new Int32Array(s+1),a=new Int32Array(s+1).fill(-1),c=new Int32Array(e),f=Fi(-i[0],e,i);for(let p,y,g=-1;++g<e;)(y=a[p=n[g]])===-1&&(y=a[p]=f[p]),c[g]=f[g]-y,++o[p];sr.call(this,c);for(let p,y=-1,g=t.children.length;++y<g;)if(p=r.children[y]){let v=t.typeIds[y],nt=Math.min(e,o[v]);this.visit(p.slice(a[v],nt))}}}return this}function wm(r){let t;return r.nullCount>=r.length?sr.call(this,new Uint8Array(0)):(t=r.values)instanceof Uint8Array?sr.call(this,Jn(r.offset,r.length,t)):sr.call(this,Fn(r.values))}function hn(r){return sr.call(this,r.values.subarray(0,r.length*r.stride))}function pd(r){let{length:t,values:e,valueOffsets:n}=r,i=n[0],s=n[t],o=Math.min(s-i,e.byteLength-i);return sr.call(this,Fi(-n[0],t,n)),sr.call(this,e.subarray(i,i+o)),this}function wl(r){let{length:t,valueOffsets:e}=r;return e&&sr.call(this,Fi(e[0],t,e)),this.visit(r.children[0])}function gl(r){return this.visitMany(r.type.children.map((t,e)=>r.children[e]).filter(Boolean))[0]}Tt.prototype.visitBool=wm;Tt.prototype.visitInt=hn;Tt.prototype.visitFloat=hn;Tt.prototype.visitUtf8=pd;Tt.prototype.visitBinary=pd;Tt.prototype.visitFixedSizeBinary=hn;Tt.prototype.visitDate=hn;Tt.prototype.visitTimestamp=hn;Tt.prototype.visitTime=hn;Tt.prototype.visitDecimal=hn;Tt.prototype.visitList=wl;Tt.prototype.visitStruct=gl;Tt.prototype.visitUnion=gm;Tt.prototype.visitInterval=hn;Tt.prototype.visitFixedSizeList=wl;Tt.prototype.visitMap=wl;var kn=class extends xn{constructor(t){super(),this._position=0,this._started=!1,this._sink=new vr,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,oe(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return We(t)?t.then(e=>this.writeAll(e)):Ue(t)?Sl(this,t):vl(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof vr?this._sink=t:(this._sink=new vr,t&&Nc(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&jc(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!Mn(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Et&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof pt&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!Mn(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof pt?t instanceof Cn||this._writeRecordBatch(t):t instanceof Et?this.writeAll(t.batches):Ye(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,i=Ut.encode(t),s=i.byteLength,o=this._writeLegacyIpcFormat?4:8,a=s+o+n&~n,c=a-s-o;return t.headerType===it.RecordBatch?this._recordBatchBlocks.push(new rr(a,t.bodyLength,this._position)):t.headerType===it.DictionaryBatch&&this._dictionaryBlocks.push(new rr(a,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(a-o)),s>0&&this._write(i),this._writePadding(c)}_write(t){if(this._started){let e=j(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage(Ut.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(ui)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:i,buffers:s}=Tt.assemble(t),o=new Qt(t.numRows,n,i),a=Ut.from(o,e);return this._writeDictionaries(t)._writeMessage(a)._writeBodyBuffers(s)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:i,nodes:s,bufferRegions:o,buffers:a}=Tt.assemble(new V([t])),c=new Qt(t.length,s,o),f=new Ie(c,e,n),p=Ut.from(f,i);return this._writeMessage(p)._writeBodyBuffers(a)}_writeBodyBuffers(t){let e,n,i;for(let s=-1,o=t.length;++s<o;)(e=t[s])&&(n=e.byteLength)>0&&(this._write(e),(i=(n+7&-8)-n)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(e)||0;if(i===0||(n=n==null?void 0:n.slice(i)).length>0)for(let s of n.data)this._writeDictionaryBatch(s,e,i>0),i+=s.length}return this}},Gr=class extends kn{static writeAll(t,e){let n=new Gr(e);return We(t)?t.then(i=>n.writeAll(i)):Ue(t)?Sl(n,t):vl(n,t)}},Xr=class extends kn{static writeAll(t){let e=new Xr;return We(t)?t.then(n=>e.writeAll(n)):Ue(t)?Sl(e,t):vl(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=Hr.encode(new Hr(t,Ht.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function vl(r,t){let e=t;t instanceof Et&&(e=t.batches,r.reset(void 0,t.schema));for(let n of e)r.write(n);return r.finish()}function Sl(r,t){var e,n,i,s;return I(this,void 0,void 0,function*(){try{for(e=Ce(t);n=yield e.next(),!n.done;){let o=n.value;r.write(o)}}catch(o){i={error:o}}finally{try{n&&!n.done&&(s=e.return)&&(yield s.call(e))}finally{if(i)throw i.error}}return r.finish()})}function _d(r,t){if(Ue(r))return Sm(r,t);if(Ye(r))return vm(r,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function vm(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){s(o,e||(e=r[Symbol.iterator]()))},pull(o){e?s(o,e):o.close()},cancel(){((e==null?void 0:e.return)&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){let c,f=null,p=o.desiredSize||null;for(;!(f=a.next(n?p:null)).done;)if(ArrayBuffer.isView(f.value)&&(c=j(f.value))&&(p!=null&&n&&(p=p-c.byteLength+1),f.value=c),o.enqueue(f.value),p!=null&&--p<=0)return;o.close()}}function Sm(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){return I(this,void 0,void 0,function*(){yield s(o,e||(e=r[Symbol.asyncIterator]()))})},pull(o){return I(this,void 0,void 0,function*(){e?yield s(o,e):o.close()})},cancel(){return I(this,void 0,void 0,function*(){((e==null?void 0:e.return)&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){return I(this,void 0,void 0,function*(){let c,f=null,p=o.desiredSize||null;for(;!(f=yield a.next(n?p:null)).done;)if(ArrayBuffer.isView(f.value)&&(c=j(f.value))&&(p!=null&&n&&(p=p-c.byteLength+1),f.value=c),o.enqueue(f.value),p!=null&&--p<=0)return;o.close()})}}function bd(r){return new Il(r)}var Il=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:i="count"}=t,s=kc(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=Bn(s),this._getSize=i!=="bytes"?md:yd;let{["highWaterMark"]:o=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:a=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:c=>{this._maybeFlush(this._builder,this._controller=c)},start:c=>{this._maybeFlush(this._builder,this._controller=c)}},{highWaterMark:o,size:i!=="bytes"?md:yd}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:a,size:c=>this._writeValueAndReturnChunkSize(c)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},md=r=>{var t;return(t=r==null?void 0:r.length)!==null&&t!==void 0?t:0},yd=r=>{var t;return(t=r==null?void 0:r.byteLength)!==null&&t!==void 0?t:0};function $o(r,t){let e=new vr,n=null,i=new ReadableStream({cancel(){return I(this,void 0,void 0,function*(){yield e.close()})},start(a){return I(this,void 0,void 0,function*(){yield o(a,n||(n=yield s()))})},pull(a){return I(this,void 0,void 0,function*(){n?yield o(a,n):a.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},r)),readable:i};function s(){return I(this,void 0,void 0,function*(){return yield(yield Mt.from(e)).open(t)})}function o(a,c){return I(this,void 0,void 0,function*(){let f=a.desiredSize,p=null;for(;!(p=yield c.next()).done;)if(a.enqueue(p.value),f!=null&&--f<=0)return;a.close()})}}function Go(r,t){let e=new this(r),n=new ge(e),i=new ReadableStream({cancel(){return I(this,void 0,void 0,function*(){yield n.cancel()})},pull(o){return I(this,void 0,void 0,function*(){yield s(o)})},start(o){return I(this,void 0,void 0,function*(){yield s(o)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,r),readable:i};function s(o){return I(this,void 0,void 0,function*(){let a=null,c=o.desiredSize;for(;a=yield n.read(c||null);)if(o.enqueue(a),c!=null&&(c-=a.byteLength)<=0)return;o.close()})}}function Xo(r,t="stream"){return(t==="stream"?Gr:Xr).writeAll(r).toUint8Array(!0)}var Tm=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},ka),ol),Qa),Ua),Ra),qa),{compareSchemas:Mn,compareFields:Yu,compareTypes:$u});Kt.toDOMStream=_d;St.throughDOM=bd;Mt.throughDOM=$o;fn.throughDOM=$o;Fr.throughDOM=$o;kn.throughDOM=Go;Xr.throughDOM=Go;Gr.throughDOM=Go;function pi(r){switch(r.typeId){case h.Binary:return{sqlType:"binary"};case h.Bool:return{sqlType:"bool"};case h.Date:return{sqlType:"date"};case h.DateDay:return{sqlType:"date32[d]"};case h.DateMillisecond:return{sqlType:"date64[ms]"};case h.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case h.Float:return{sqlType:"float"};case h.Float16:return{sqlType:"float16"};case h.Float32:return{sqlType:"float32"};case h.Float64:return{sqlType:"float64"};case h.Int:return{sqlType:"int32"};case h.Int16:return{sqlType:"int16"};case h.Int32:return{sqlType:"int32"};case h.Int64:return{sqlType:"int64"};case h.Uint16:return{sqlType:"uint16"};case h.Uint32:return{sqlType:"uint32"};case h.Uint64:return{sqlType:"uint64"};case h.Uint8:return{sqlType:"uint8"};case h.IntervalDayTime:return{sqlType:"interval[dt]"};case h.IntervalYearMonth:return{sqlType:"interval[m]"};case h.List:return{sqlType:"list",valueType:pi(r.valueType)};case h.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case h.Null:return{sqlType:"null"};case h.Utf8:return{sqlType:"utf8"};case h.Struct:return{sqlType:"struct",fields:r.children.map(e=>Ko(e.name,e.type))};case h.Map:{let t=r;return{sqlType:"map",keyType:pi(t.keyType),valueType:pi(t.valueType)}}case h.Time:return{sqlType:"time[s]"};case h.TimeMicrosecond:return{sqlType:"time[us]"};case h.TimeMillisecond:return{sqlType:"time[ms]"};case h.TimeNanosecond:return{sqlType:"time[ns]"};case h.TimeSecond:return{sqlType:"time[s]"};case h.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case h.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case h.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case h.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case h.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function Ko(r,t){let e=pi(t);return e.name=r,e}var Jo=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,i)=>i)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return this.failWith(t,e)}}};var qo={},Em=(()=>{var r=qo.url;return async function(t={}){var e=typeof t<"u"?t:{},n,i;e.ready=new Promise(function(l,u){n=l,i=u}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","onRuntimeInitialized"].forEach(l=>{Object.getOwnPropertyDescriptor(e.ready,l)||Object.defineProperty(e.ready,l,{get:()=>J("You are getting "+l+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>J("You are setting "+l+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var s=Object.assign({},e),o=[],a="./this.program",c=(l,u)=>{throw u},f=typeof window=="object",p=typeof importScripts=="function",y=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",g=!f&&!y&&!p;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var v="";function nt(l){return e.locateFile?e.locateFile(l,v):v+l}var tt,_t,ft,ie;function Fe(l){if(l instanceof hs)return;let u=l;l&&typeof l=="object"&&l.stack&&(u=[l,l.stack]),E("exiting due to exception: "+u)}if(y){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");let{createRequire:l}=await Promise.resolve().then(()=>Aa(zh("module")));var Tr=l(qo.url),Nn=Tr("fs"),_i=Tr("path");p?v=_i.dirname(v)+"/":v=Tr("url").fileURLToPath(new URL("./",qo.url)),tt=(u,d)=>(u=ua(u)?new URL(u):_i.normalize(u),Nn.readFileSync(u,d?void 0:"utf8")),ft=u=>{var d=tt(u,!0);return d.buffer||(d=new Uint8Array(d)),B(d.buffer),d},_t=(u,d,_)=>{u=ua(u)?new URL(u):_i.normalize(u),Nn.readFile(u,function(b,T){b?_(b):d(T.buffer)})},process.argv.length>1&&(a=process.argv[1].replace(/\\/g,"/")),o=process.argv.slice(2),process.on("uncaughtException",function(u){if(!(u instanceof hs))throw u});var us=process.versions.node.split(".")[0];us<15&&process.on("unhandledRejection",function(u){throw u}),c=(u,d)=>{if(ca())throw process.exitCode=u,d;Fe(d),process.exit(u)},e.inspect=function(){return"[Emscripten Module object]"}}else if(g){if(typeof process=="object"&&typeof Tr=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(tt=function(u){return read(u)}),ft=function(u){let d;return typeof readbuffer=="function"?new Uint8Array(readbuffer(u)):(d=read(u,"binary"),B(typeof d=="object"),d)},_t=function(u,d,_){setTimeout(()=>d(ft(u)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=l=>{}),typeof scriptArgs<"u"?o=scriptArgs:typeof arguments<"u"&&(o=arguments),typeof quit=="function"&&(c=(l,u)=>{Fe(u),quit(l)}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(f||p){if(p?v=self.location.href:typeof document<"u"&&document.currentScript&&(v=document.currentScript.src),r&&(v=r),v.indexOf("blob:")!==0?v=v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):v="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");tt=l=>{var u=new XMLHttpRequest;return u.open("GET",l,!1),u.send(null),u.responseText},p&&(ft=l=>{var u=new XMLHttpRequest;return u.open("GET",l,!1),u.responseType="arraybuffer",u.send(null),new Uint8Array(u.response)}),_t=(l,u,d)=>{var _=new XMLHttpRequest;_.open("GET",l,!0),_.responseType="arraybuffer",_.onload=()=>{if(_.status==200||_.status==0&&_.response){u(_.response);return}d()},_.onerror=d,_.send(null)},ie=l=>document.title=l}else throw new Error("environment detection error");var Kr=e.print||console.log.bind(console),E=e.printErr||console.warn.bind(console);Object.assign(e,s),s=null,wh(),e.arguments&&(o=e.arguments),xr("arguments","arguments_"),e.thisProgram&&(a=e.thisProgram),xr("thisProgram","thisProgram"),e.quit&&(c=e.quit),xr("quit","quit_"),B(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),B(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),B(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),B(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),B(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),B(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),B(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),B(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),B(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),xr("read","read_"),xr("readAsync","readAsync"),xr("readBinary","readBinary"),xr("setWindowTitle","setWindowTitle");var ue="IDBFS is no longer included by default; build with -lidbfs.js",Oe="PROXYFS is no longer included by default; build with -lproxyfs.js",Ae="WORKERFS is no longer included by default; build with -lworkerfs.js",se="NODEFS is no longer included by default; build with -lnodefs.js";B(!g,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var xt;e.wasmBinary&&(xt=e.wasmBinary),xr("wasmBinary","wasmBinary");var ht=e.noExitRuntime||!0;xr("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&J("no native wasm support detected");var Xt,or=!1,ds;function B(l,u){l||J("Assertion failed"+(u?": "+u:""))}var Dl=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Bl(l,u,d){u>>>=0;for(var _=u+d,b=u;l[b]&&!(b>=_);)++b;if(b-u>16&&l.buffer&&Dl)return Dl.decode(l.subarray(u,b));for(var T="";u<b;){var S=l[u++];if(!(S&128)){T+=String.fromCharCode(S);continue}var F=l[u++]&63;if((S&224)==192){T+=String.fromCharCode((S&31)<<6|F);continue}var M=l[u++]&63;if((S&240)==224?S=(S&15)<<12|F<<6|M:((S&248)!=240&&lr("Invalid UTF-8 leading byte "+bi(S)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),S=(S&7)<<18|F<<12|M<<6|l[u++]&63),S<65536)T+=String.fromCharCode(S);else{var N=S-65536;T+=String.fromCharCode(55296|N>>10,56320|N&1023)}}return T}function Re(l,u){return B(typeof l=="number"),l>>>=0,l?Bl(Jr,l,u):""}function Ol(l,u,d,_){if(d>>>=0,!(_>0))return 0;for(var b=d,T=d+_-1,S=0;S<l.length;++S){var F=l.charCodeAt(S);if(F>=55296&&F<=57343){var M=l.charCodeAt(++S);F=65536+((F&1023)<<10)|M&1023}if(F<=127){if(d>=T)break;u[d++>>>0]=F}else if(F<=2047){if(d+1>=T)break;u[d++>>>0]=192|F>>6,u[d++>>>0]=128|F&63}else if(F<=65535){if(d+2>=T)break;u[d++>>>0]=224|F>>12,u[d++>>>0]=128|F>>6&63,u[d++>>>0]=128|F&63}else{if(d+3>=T)break;F>1114111&&lr("Invalid Unicode code point "+bi(F)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),u[d++>>>0]=240|F>>18,u[d++>>>0]=128|F>>12&63,u[d++>>>0]=128|F>>6&63,u[d++>>>0]=128|F&63}}return u[d>>>0]=0,d-b}function sa(l,u,d){return B(typeof d=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Ol(l,Jr,u,d)}function Dd(l){for(var u=0,d=0;d<l.length;++d){var _=l.charCodeAt(d);_<=127?u++:_<=2047?u+=2:_>=55296&&_<=57343?(u+=4,++d):u+=3}return u}var Um,ar,Jr,yn,Rl,A,Dt,oa,aa;function Ml(){var l=Xt.buffer;e.HEAP8=ar=new Int8Array(l),e.HEAP16=yn=new Int16Array(l),e.HEAP32=A=new Int32Array(l),e.HEAPU8=Jr=new Uint8Array(l),e.HEAPU16=Rl=new Uint16Array(l),e.HEAPU32=Dt=new Uint32Array(l),e.HEAPF32=oa=new Float32Array(l),e.HEAPF64=aa=new Float64Array(l)}B(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),B(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),B(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),B(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var Cl;function Bd(){var l=Sa();B((l&3)==0),l==0&&(l+=4),Dt[l>>>2]=34821223,Dt[l+4>>>2]=2310721022,Dt[0]=1668509029}function mi(){if(!or){var l=Sa();l==0&&(l+=4);var u=Dt[l>>>2],d=Dt[l+4>>>2];(u!=34821223||d!=2310721022)&&J("Stack overflow! Stack cookie has been overwritten at "+bi(l)+", expected hex dwords 0x89BACDFE and 0x2135467, but received "+bi(d)+" "+bi(u)),Dt[0]!==1668509029&&J("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var l=new Int16Array(1),u=new Int8Array(l.buffer);if(l[0]=25459,u[0]!==115||u[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var la=[],Ll=[],kl=[],Nm=[],Ul=[],fs=!1;function ca(){return ht}function Od(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)Ld(e.preRun.shift());ps(la)}function Rd(){B(!fs),fs=!0,mi(),ps(Ll)}function Md(){mi(),ps(kl)}function Cd(){if(mi(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Ud(e.postRun.shift());ps(Ul)}function Ld(l){la.unshift(l)}function kd(l){Ll.unshift(l)}function jm(l){kl.unshift(l)}function Pm(l){}function Ud(l){Ul.unshift(l)}B(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),B(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),B(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),B(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var qr=0,bn=null,yi=null,jn={};function Vm(l){for(var u=l;;){if(!jn[l])return l;l=u+Math.random()}}function Nd(l){qr++,e.monitorRunDependencies&&e.monitorRunDependencies(qr),l?(B(!jn[l]),jn[l]=1,bn===null&&typeof setInterval<"u"&&(bn=setInterval(function(){if(or){clearInterval(bn),bn=null;return}var u=!1;for(var d in jn)u||(u=!0,E("still waiting on run dependencies:")),E("dependency: "+d);u&&E("(end of list)")},1e4))):E("warning: run dependency added without ID")}function jd(l){if(qr--,e.monitorRunDependencies&&e.monitorRunDependencies(qr),l?(B(jn[l]),delete jn[l]):E("warning: run dependency removed without ID"),qr==0&&(bn!==null&&(clearInterval(bn),bn=null),yi)){var u=yi;yi=null,u()}}function J(l){e.onAbort&&e.onAbort(l),l="Aborted("+l+")",E(l),or=!0,ds=1,fs&&sc();var u=new WebAssembly.RuntimeError(l);throw i(u),u}var Pd="data:application/octet-stream;base64,";function Nl(l){return l.startsWith(Pd)}function ua(l){return l.startsWith("file://")}function m(l,u){return function(){var d=l,_=u;return u||(_=e.asm),B(fs,"native function `"+d+"` called before runtime initialization"),_[l]||B(_[l],"exported native function `"+d+"` not found"),_[l].apply(null,arguments)}}var Er;e.locateFile?(Er="./duckdb-eh.wasm",Nl(Er)||(Er=nt(Er))):Er=new URL("./duckdb-eh.wasm",qo.url).href;function jl(l){try{if(l==Er&&xt)return new Uint8Array(xt);if(ft)return ft(l);throw"both async and sync fetching of the wasm failed"}catch(u){J(u)}}function Vd(l){return!xt&&(f||p)&&typeof fetch=="function"?fetch(l,{credentials:"same-origin"}).then(function(u){if(!u.ok)throw"failed to load wasm binary file at '"+l+"'";return u.arrayBuffer()}).catch(function(){return jl(l)}):Promise.resolve().then(function(){return jl(l)})}function Pl(l,u,d){return Vd(l).then(function(_){return WebAssembly.instantiate(_,u)}).then(function(_){return _}).then(d,function(_){E("failed to asynchronously prepare wasm: "+_),ua(Er)&&E("warning: Loading from a file URI ("+Er+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),J(_)})}function Hd(l,u,d,_){return!l&&typeof WebAssembly.instantiateStreaming=="function"&&!Nl(u)&&!y&&typeof fetch=="function"?fetch(u,{credentials:"same-origin"}).then(function(b){var T=WebAssembly.instantiateStreaming(b,d);return T.then(_,function(S){return E("wasm streaming compile failed: "+S),E("falling back to ArrayBuffer instantiation"),Pl(u,d,_)})}):Pl(u,d,_)}function zd(){var l={env:ec,wasi_snapshot_preview1:ec};function u(b,T){var S=b.exports;return e.asm=S,Xt=e.asm.memory,B(Xt,"memory not found in wasm exports"),Ml(),Cl=e.asm.__indirect_function_table,B(Cl,"table not found in wasm exports"),kd(e.asm.__wasm_call_ctors),jd("wasm-instantiate"),S}Nd("wasm-instantiate");var d=e;function _(b){B(e===d,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),d=null,u(b.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(l,u)}catch(b){E("Module.instantiateWasm callback failed with error: "+b),i(b)}return Hd(xt,Er,l,_).catch(i),{}}var Pn,da;function xr(l,u){Object.getOwnPropertyDescriptor(e,l)||Object.defineProperty(e,l,{configurable:!0,get:function(){J("Module."+l+" has been replaced with plain "+u+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Wd(l){Object.getOwnPropertyDescriptor(e,l)&&J("`Module."+l+"` was supplied but `"+l+"` not included in INCOMING_MODULE_JS_API")}function Vl(l){return l==="FS_createPath"||l==="FS_createDataFile"||l==="FS_createPreloadedFile"||l==="FS_unlink"||l==="addRunDependency"||l==="FS_createLazyFile"||l==="FS_createDevice"||l==="removeRunDependency"}function Yd(l,u){typeof globalThis<"u"&&Object.defineProperty(globalThis,l,{configurable:!0,get:function(){lr("`"+l+"` is not longer defined by emscripten. "+u)}})}Yd("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function $d(l){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,l)&&Object.defineProperty(globalThis,l,{configurable:!0,get:function(){var u="`"+l+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",d=l;d.startsWith("_")||(d="$"+l),u+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+d+")",Vl(l)&&(u+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),lr(u)}}),Hl(l)}function Hl(l){Object.getOwnPropertyDescriptor(e,l)||Object.defineProperty(e,l,{configurable:!0,get:function(){var u="'"+l+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";Vl(l)&&(u+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),J(u)}})}function Hm(l){console.error(l)}function hs(l){this.name="ExitStatus",this.message="Program terminated with exit("+l+")",this.status=l}function ps(l){for(;l.length>0;)l.shift()(e)}function zl(){return e.asm.__cpp_exception}function fa(l){var u=l.getArg(zl(),0);return xh(u)}function zm(l){var u=fa(l);Th(u)}function Gd(l){var u=Ia(),d=l();return Fa(u),d}function Xd(l){return Gd(function(){var u=vi(4),d=vi(4);Dh(l,u,d);var _=Dt[u>>>2],b=Dt[d>>>2],T=Re(_);ic(_);var S;return b&&(S=Re(b),ic(b)),[T,S]})}function Wl(l){var u=fa(l);return Xd(u)}e.getExceptionMessage=Wl;function Wm(l,u="i8"){switch(u.endsWith("*")&&(u="*"),u){case"i1":return ar[l>>>0];case"i8":return ar[l>>>0];case"i16":return yn[l>>>1];case"i32":return A[l>>>2];case"i64":return A[l>>>2];case"float":return oa[l>>>2];case"double":return aa[l>>>3];case"*":return Dt[l>>>2];default:J("invalid type for getValue: "+u)}}function Ym(l){var u=fa(l);Eh(u)}function bi(l){return B(typeof l=="number"),"0x"+l.toString(16).padStart(8,"0")}function $m(l,u,d="i8"){switch(d.endsWith("*")&&(d="*"),d){case"i1":ar[l>>>0]=u;break;case"i8":ar[l>>>0]=u;break;case"i16":yn[l>>>1]=u;break;case"i32":A[l>>>2]=u;break;case"i64":da=[u>>>0,(Pn=u,+Math.abs(Pn)>=1?Pn>0?(Math.min(+Math.floor(Pn/4294967296),4294967295)|0)>>>0:~~+Math.ceil((Pn-+(~~Pn>>>0))/4294967296)>>>0:0)],A[l>>>2]=da[0],A[l+4>>>2]=da[1];break;case"float":oa[l>>>2]=u;break;case"double":aa[l>>>3]=u;break;case"*":Dt[l>>>2]=u;break;default:J("invalid type for setValue: "+d)}}function lr(l){lr.shown||(lr.shown={}),lr.shown[l]||(lr.shown[l]=1,y&&(l="warning: "+l),E(l))}function Kd(l,u,d,_){J("Assertion failed: "+Re(l)+", at: "+[u?Re(u):"unknown filename",d,_?Re(_):"unknown function"])}var Yl="To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";function Jd(l,u){J(Yl)}var Qr={varargs:void 0,get:function(){B(Qr.varargs!=null),Qr.varargs+=4;var l=A[Qr.varargs-4>>>2];return l},getStr:function(l){var u=Re(l);return u}};function qd(l,u,d,_,b){B(l<=64,"nfds must be less than or equal to 64"),B(!_,"exceptfds not supported");for(var T=0,S=u?A[u>>>2]:0,F=u?A[u+4>>>2]:0,M=d?A[d>>>2]:0,N=d?A[d+4>>>2]:0,et=_?A[_>>>2]:0,Bt=_?A[_+4>>>2]:0,ct=0,Dr=0,wt=0,Nt=0,ze=0,Br=0,w=(u?A[u>>>2]:0)|(d?A[d>>>2]:0)|(_?A[_>>>2]:0),O=(u?A[u+4>>>2]:0)|(d?A[d+4>>>2]:0)|(_?A[_+4>>>2]:0),jt=function(Lh,kh,Uh,uc){return Lh<32?kh&uc:Uh&uc},ut=0;ut<l;ut++){var Vt=1<<ut%32;if(!!jt(ut,w,O,Vt)){var Zt=Qr.getStreamFromFD(ut),gn=Qr.DEFAULT_POLLMASK;Zt.stream_ops.poll&&(gn=Zt.stream_ops.poll(Zt)),gn&1&&jt(ut,S,F,Vt)&&(ut<32?ct=ct|Vt:Dr=Dr|Vt,T++),gn&4&&jt(ut,M,N,Vt)&&(ut<32?wt=wt|Vt:Nt=Nt|Vt,T++),gn&2&&jt(ut,et,Bt,Vt)&&(ut<32?ze=ze|Vt:Br=Br|Vt,T++)}}return u&&(A[u>>>2]=ct,A[u+4>>>2]=Dr),d&&(A[d>>>2]=wt,A[d+4>>>2]=Nt),_&&(A[_>>>2]=ze,A[_+4>>>2]=Br),T}function Qd(){E("missing function: $SOCKFS"),J(-1)}function $l(){E("missing function: $FS"),J(-1)}function gi(l){var u=Qd.getSocket(l);if(!u)throw new $l.ErrnoError(8);return u}function Gm(l){return A[Sh()>>>2]=l,l}var Xm={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function ha(l){return(l&255)+"."+(l>>8&255)+"."+(l>>16&255)+"."+(l>>24&255)}function Gl(l){var u="",d=0,_=0,b=0,T=0,S=0,F=0,M=[l[0]&65535,l[0]>>16,l[1]&65535,l[1]>>16,l[2]&65535,l[2]>>16,l[3]&65535,l[3]>>16],N=!0,et="";for(F=0;F<5;F++)if(M[F]!==0){N=!1;break}if(N){if(et=ha(M[6]|M[7]<<16),M[5]===-1)return u="::ffff:",u+=et,u;if(M[5]===0)return u="::",et==="0.0.0.0"&&(et=""),et==="0.0.0.1"&&(et="1"),u+=et,u}for(d=0;d<8;d++)M[d]===0&&(d-b>1&&(S=0),b=d,S++),S>_&&(_=S,T=d-_+1);for(d=0;d<8;d++){if(_>1&&M[d]===0&&d>=T&&d<T+_){d===T&&(u+=":",T===0&&(u+=":"));continue}u+=Number(rc(M[d]&65535)).toString(16),u+=d<7?":":""}return u}function Xl(l,u){var d=yn[l>>>1],_=rc(Rl[l+2>>>1]),b;switch(d){case 2:if(u!==16)return{errno:28};b=A[l+4>>>2],b=ha(b);break;case 10:if(u!==28)return{errno:28};b=[A[l+8>>>2],A[l+12>>>2],A[l+16>>>2],A[l+20>>>2]],b=Gl(b);break;default:return{errno:5}}return{family:d,addr:b,port:_}}function _s(l){for(var u=l.split("."),d=0;d<4;d++){var _=Number(u[d]);if(isNaN(_))return null;u[d]=_}return(u[0]|u[1]<<8|u[2]<<16|u[3]<<24)>>>0}function ms(l){return parseInt(l)}function pa(l){var u,d,_,b,T,S=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,F=[];if(!S.test(l))return null;if(l==="::")return[0,0,0,0,0,0,0,0];for(l.startsWith("::")?l=l.replace("::","Z:"):l=l.replace("::",":Z:"),l.indexOf(".")>0?(l=l.replace(new RegExp("[.]","g"),":"),u=l.split(":"),u[u.length-4]=ms(u[u.length-4])+ms(u[u.length-3])*256,u[u.length-3]=ms(u[u.length-2])+ms(u[u.length-1])*256,u=u.slice(0,u.length-2)):u=l.split(":"),_=0,b=0,d=0;d<u.length;d++)if(typeof u[d]=="string")if(u[d]==="Z"){for(b=0;b<8-u.length+1;b++)F[d+b]=0;_=b-1}else F[d+_]=va(parseInt(u[d],16));else F[d+_]=u[d];return[F[1]<<16|F[0],F[3]<<16|F[2],F[5]<<16|F[4],F[7]<<16|F[6]]}var Me={address_map:{id:1,addrs:{},names:{}},lookup_name:function(l){var u=_s(l);if(u!==null||(u=pa(l),u!==null))return l;var d;if(Me.address_map.addrs[l])d=Me.address_map.addrs[l];else{var _=Me.address_map.id++;B(_<65535,"exceeded max address mappings of 65535"),d="172.29."+(_&255)+"."+(_&65280),Me.address_map.names[d]=l,Me.address_map.addrs[l]=d}return d},lookup_addr:function(l){return Me.address_map.names[l]?Me.address_map.names[l]:null}};function Kl(l,u,d){if(d&&l===0)return null;var _=Xl(l,u);if(_.errno)throw new $l.ErrnoError(_.errno);return _.addr=Me.lookup_addr(_.addr)||_.addr,_}function Zd(l,u,d){var _=gi(l),b=Kl(u,d);return _.sock_ops.bind(_,b.addr,b.port),0}function tf(l,u,d){var _=gi(l),b=Kl(u,d);return _.sock_ops.connect(_,b.addr,b.port),0}function ef(l,u,d,_){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function rf(l,u,d){return Qr.varargs=d,0}function nf(l,u){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Km(l,u){return B(l==l>>>0||l==(l|0)),B(u===(u|0)),u+2097152>>>0<4194305-!!l?(l>>>0)+u*4294967296:NaN}function sf(l,u,d){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function of(l,u,d){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Jl(l,u){return Jr.fill(0,l,l+u),l}function _a(l,u,d,_,b){switch(u){case 2:d=_s(d),Jl(l,16),b&&(A[b>>>2]=16),yn[l>>>1]=u,A[l+4>>>2]=d,yn[l+2>>>1]=va(_);break;case 10:d=pa(d),Jl(l,28),b&&(A[b>>>2]=28),A[l>>>2]=u,A[l+8>>>2]=d[0],A[l+12>>>2]=d[1],A[l+16>>>2]=d[2],A[l+20>>>2]=d[3],yn[l+2>>>1]=va(_);break;default:return 5}return 0}function af(l,u,d){var _=gi(l);if(!_.daddr)return-53;var b=_a(u,_.family,Me.lookup_name(_.daddr),_.dport,d);return B(!b),0}function lf(l,u,d,_,b){var T=gi(l);return u===1&&d===4?(A[_>>>2]=T.error,A[b>>>2]=4,T.error=null,0):-50}function cf(l,u,d){return Qr.varargs=d,0}function uf(l,u){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function df(l,u,d){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ff(l,u,d,_){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function hf(l,u,d,_){Qr.varargs=_,J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function pf(l,u,d,_,b,T){var S=gi(l),F=S.sock_ops.recvmsg(S,d);if(!F)return 0;if(b){var M=_a(b,S.family,Me.lookup_name(F.addr),F.port,T);B(!M)}return Jr.set(F.buffer,u>>>0),F.buffer.byteLength}function _f(l,u,d,_){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function mf(l){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function yf(l,u,d,_,b,T){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function bf(l,u,d){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function gf(l,u){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function wf(l,u,d){J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function vf(l){var u=new WebAssembly.Exception(zl(),[l],{traceStack:!0});u.message=Wl(u);var d=u.stack.split(`
`);throw d.splice(1,1),u.stack=d.join(`
`),u}var Sf=!0;function If(){return Sf}function Ff(){J("native code called abort()")}function Af(l){J(Yl)}function Tf(l,u){return globalThis.DUCKDB_RUNTIME.createDirectory(e,l,u)}function Ef(l,u){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,l,u)}function xf(l,u){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,l,u)}function Df(l,u){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,l,u)}function Bf(l){return globalThis.DUCKDB_RUNTIME.closeFile(e,l)}function Of(l,u){return globalThis.DUCKDB_RUNTIME.checkFile(e,l,u)}function Rf(l){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,l)}function Mf(l,u,d,_){return globalThis.DUCKDB_RUNTIME.moveFile(e,l,u,d,_)}function Cf(l,u){return globalThis.DUCKDB_RUNTIME.openFile(e,l,u)}function Lf(l,u,d,_){return globalThis.DUCKDB_RUNTIME.readFile(e,l,u,d,_)}function kf(l,u){return globalThis.DUCKDB_RUNTIME.truncateFile(e,l,u)}function Uf(l,u,d,_){return globalThis.DUCKDB_RUNTIME.writeFile(e,l,u,d,_)}function Nf(l){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(l)}function jf(l,u){return globalThis.DUCKDB_RUNTIME.glob(e,l,u)}function Pf(l){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,l)}function Vf(l,u,d,_,b,T){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,l,u,d,_,b,T)}function Hf(l){B(typeof l=="number"),console.error(Re(l))}function zf(){return Date.now()}function ql(){return 4294901760}function Wf(){return ql()}var ma;y?ma=()=>{var l=process.hrtime();return l[0]*1e3+l[1]/1e6}:ma=()=>performance.now();function Yf(l,u,d){Jr.copyWithin(l>>>0,u>>>0,u+d>>>0)}function $f(l){var u=Xt.buffer;try{return Xt.grow(l-u.byteLength+65535>>>16),Ml(),1}catch(d){E("emscripten_realloc_buffer: Attempted to grow heap from "+u.byteLength+" bytes to "+l+" bytes, but got error: "+d)}}function Gf(l){var u=Jr.length;l=l>>>0,B(l>u);var d=ql();if(l>d)return E("Cannot enlarge memory, asked to go up to "+l+" bytes, but the limit is "+d+" bytes!"),!1;let _=(M,N)=>M+(N-M%N)%N;for(var b=1;b<=4;b*=2){var T=u*(1+.2/b);T=Math.min(T,l+100663296);var S=Math.min(d,_(Math.max(l,T),65536)),F=$f(S);if(F)return!0}return E("Failed to grow the heap from "+u+" bytes to "+S+" bytes, not enough memory!"),!1}var ya={};function Xf(){return a||"./this.program"}function wi(){if(!wi.strings){var l=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:l,_:Xf()};for(var d in ya)ya[d]===void 0?delete u[d]:u[d]=ya[d];var _=[];for(var d in u)_.push(d+"="+u[d]);wi.strings=_}return wi.strings}function Kf(l,u,d){for(var _=0;_<l.length;++_)B(l.charCodeAt(_)===(l.charCodeAt(_)&255)),ar[u++>>>0]=l.charCodeAt(_);d||(ar[u>>>0]=0)}function Jf(l,u){var d=0;return wi().forEach(function(_,b){var T=u+d;Dt[l+b*4>>>2]=T,Kf(_,T),d+=_.length+1}),0}function qf(l,u){var d=wi();Dt[l>>>2]=d.length;var _=0;return d.forEach(function(b){_+=b.length+1}),Dt[u>>>2]=_,0}function Qf(l){J("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function Zf(l,u){var d=l==1||l==2?2:J();return ar[u>>>0]=d,0}function th(l,u,d,_,b,T){J("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function eh(l,u,d,_,b,T){J("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function rh(l,u,d,_){J("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function nh(l,u,d,_,b){return 70}function ih(l){J("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var ba=[null,[],[]];function ga(l,u){var d=ba[l];B(d),u===0||u===10?((l===1?Kr:E)(Bl(d,0)),d.length=0):d.push(u)}function sh(){Ih(0),ba[1].length&&ga(1,10),ba[2].length&&ga(2,10)}function oh(l,u,d,_){for(var b=0,T=0;T<d;T++){var S=Dt[u>>>2],F=Dt[u+4>>>2];u+=8;for(var M=0;M<F;M++)ga(l,Jr[S+M>>>0]);b+=F}return Dt[_>>>2]=b,0}function ah(l,u,d,_){var b=[],T=null,S=0,F=0,M=0,N=0,et=0,Bt=0,ct,Dr;function wt(Nt,ze,Br,w,O,jt){var ut,Vt,Zt,gn;return Vt=Nt===10?28:16,O=Nt===10?Gl(O):ha(O),ut=nc(Vt),gn=_a(ut,Nt,O,jt),B(!gn),Zt=nc(32),A[Zt+4>>>2]=Nt,A[Zt+8>>>2]=ze,A[Zt+12>>>2]=Br,A[Zt+24>>>2]=w,Dt[Zt+20>>>2]=ut,Nt===10?A[Zt+16>>>2]=28:A[Zt+16>>>2]=16,A[Zt+28>>>2]=0,Zt}if(d&&(M=A[d>>>2],N=A[d+4>>>2],et=A[d+8>>>2],Bt=A[d+12>>>2]),et&&!Bt&&(Bt=et===2?17:6),!et&&Bt&&(et=Bt===17?2:1),Bt===0&&(Bt=6),et===0&&(et=1),!l&&!u)return-2;if(M&-1088||d!==0&&A[d>>>2]&2&&!l)return-1;if(M&32)return-2;if(et!==0&&et!==1&&et!==2)return-7;if(N!==0&&N!==2&&N!==10)return-6;if(u&&(u=Re(u),F=parseInt(u,10),isNaN(F)))return M&1024?-2:-8;if(!l)return N===0&&(N=2),(M&1)===0&&(N===2?S=wa(2130706433):S=[0,0,0,1]),ct=wt(N,et,Bt,null,S,F),Dt[_>>>2]=ct,0;if(l=Re(l),S=_s(l),S!==null)if(N===0||N===2)N=2;else if(N===10&&M&8)S=[0,0,wa(65535),S],N=10;else return-2;else if(S=pa(l),S!==null)if(N===0||N===10)N=10;else return-2;return S!=null?(ct=wt(N,et,Bt,l,S,F),Dt[_>>>2]=ct,0):M&4?-2:(l=Me.lookup_name(l),S=_s(l),N===0?N=2:N===10&&(S=[0,0,wa(65535),S]),ct=wt(N,et,Bt,null,S,F),Dt[_>>>2]=ct,0)}function lh(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function"){var l=new Uint8Array(1);return()=>(crypto.getRandomValues(l),l[0])}else if(y)try{var u=Tr("crypto");return()=>u.randomBytes(1)[0]}catch(d){}return()=>J("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function ys(l,u){ys.randomDevice||(ys.randomDevice=lh());for(var d=0;d<u;d++)ar[l+d>>>0]=ys.randomDevice();return 0}function ch(l,u,d,_,b,T,S){var F=Xl(l,u);if(F.errno)return-6;var M=F.port,N=F.addr,et=!1;if(d&&_){var Bt;if(S&1||!(Bt=Me.lookup_addr(N))){if(S&8)return-2}else N=Bt;var ct=sa(N,d,_);ct+1>=_&&(et=!0)}if(b&&T){M=""+M;var ct=sa(M,b,T);ct+1>=T&&(et=!0)}return et?-12:0}function bs(l){return l%4===0&&(l%100!==0||l%400===0)}function uh(l,u){for(var d=0,_=0;_<=u;d+=l[_++]);return d}var Ql=[31,29,31,30,31,30,31,31,30,31,30,31],Zl=[31,28,31,30,31,30,31,31,30,31,30,31];function dh(l,u){for(var d=new Date(l.getTime());u>0;){var _=bs(d.getFullYear()),b=d.getMonth(),T=(_?Ql:Zl)[b];if(u>T-d.getDate())u-=T-d.getDate()+1,d.setDate(1),b<11?d.setMonth(b+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else return d.setDate(d.getDate()+u),d}return d}function fh(l,u,d){var _=d>0?d:Dd(l)+1,b=new Array(_),T=Ol(l,b,0,b.length);return u&&(b.length=T),b}function tc(l,u){B(l.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),ar.set(l,u>>>0)}function hh(l,u,d,_){var b=A[_+40>>>2],T={tm_sec:A[_>>>2],tm_min:A[_+4>>>2],tm_hour:A[_+8>>>2],tm_mday:A[_+12>>>2],tm_mon:A[_+16>>>2],tm_year:A[_+20>>>2],tm_wday:A[_+24>>>2],tm_yday:A[_+28>>>2],tm_isdst:A[_+32>>>2],tm_gmtoff:A[_+36>>>2],tm_zone:b?Re(b):""},S=Re(d),F={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var M in F)S=S.replace(new RegExp(M,"g"),F[M]);var N=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],et=["January","February","March","April","May","June","July","August","September","October","November","December"];function Bt(w,O,jt){for(var ut=typeof w=="number"?w.toString():w||"";ut.length<O;)ut=jt[0]+ut;return ut}function ct(w,O){return Bt(w,O,"0")}function Dr(w,O){function jt(Vt){return Vt<0?-1:Vt>0?1:0}var ut;return(ut=jt(w.getFullYear()-O.getFullYear()))===0&&(ut=jt(w.getMonth()-O.getMonth()))===0&&(ut=jt(w.getDate()-O.getDate())),ut}function wt(w){switch(w.getDay()){case 0:return new Date(w.getFullYear()-1,11,29);case 1:return w;case 2:return new Date(w.getFullYear(),0,3);case 3:return new Date(w.getFullYear(),0,2);case 4:return new Date(w.getFullYear(),0,1);case 5:return new Date(w.getFullYear()-1,11,31);case 6:return new Date(w.getFullYear()-1,11,30)}}function Nt(w){var O=dh(new Date(w.tm_year+1900,0,1),w.tm_yday),jt=new Date(O.getFullYear(),0,4),ut=new Date(O.getFullYear()+1,0,4),Vt=wt(jt),Zt=wt(ut);return Dr(Vt,O)<=0?Dr(Zt,O)<=0?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}var ze={"%a":function(w){return N[w.tm_wday].substring(0,3)},"%A":function(w){return N[w.tm_wday]},"%b":function(w){return et[w.tm_mon].substring(0,3)},"%B":function(w){return et[w.tm_mon]},"%C":function(w){var O=w.tm_year+1900;return ct(O/100|0,2)},"%d":function(w){return ct(w.tm_mday,2)},"%e":function(w){return Bt(w.tm_mday,2," ")},"%g":function(w){return Nt(w).toString().substring(2)},"%G":function(w){return Nt(w)},"%H":function(w){return ct(w.tm_hour,2)},"%I":function(w){var O=w.tm_hour;return O==0?O=12:O>12&&(O-=12),ct(O,2)},"%j":function(w){return ct(w.tm_mday+uh(bs(w.tm_year+1900)?Ql:Zl,w.tm_mon-1),3)},"%m":function(w){return ct(w.tm_mon+1,2)},"%M":function(w){return ct(w.tm_min,2)},"%n":function(){return`
`},"%p":function(w){return w.tm_hour>=0&&w.tm_hour<12?"AM":"PM"},"%S":function(w){return ct(w.tm_sec,2)},"%t":function(){return"	"},"%u":function(w){return w.tm_wday||7},"%U":function(w){var O=w.tm_yday+7-w.tm_wday;return ct(Math.floor(O/7),2)},"%V":function(w){var O=Math.floor((w.tm_yday+7-(w.tm_wday+6)%7)/7);if((w.tm_wday+371-w.tm_yday-2)%7<=2&&O++,O){if(O==53){var ut=(w.tm_wday+371-w.tm_yday)%7;ut!=4&&(ut!=3||!bs(w.tm_year))&&(O=1)}}else{O=52;var jt=(w.tm_wday+7-w.tm_yday-1)%7;(jt==4||jt==5&&bs(w.tm_year%400-1))&&O++}return ct(O,2)},"%w":function(w){return w.tm_wday},"%W":function(w){var O=w.tm_yday+7-(w.tm_wday+6)%7;return ct(Math.floor(O/7),2)},"%y":function(w){return(w.tm_year+1900).toString().substring(2)},"%Y":function(w){return w.tm_year+1900},"%z":function(w){var O=w.tm_gmtoff,jt=O>=0;return O=Math.abs(O)/60,O=O/60*100+O%60,(jt?"+":"-")+String("0000"+O).slice(-4)},"%Z":function(w){return w.tm_zone},"%%":function(){return"%"}};S=S.replace(/%%/g,"\0\0");for(var M in ze)S.includes(M)&&(S=S.replace(new RegExp(M,"g"),ze[M](T)));S=S.replace(/\0\0/g,"%");var Br=fh(S,!1);return Br.length>u?0:(tc(Br,l),Br.length-1)}function ph(l,u,d,_,b){return hh(l,u,d,_)}function _h(l){ds=l,ca()||(e.onExit&&e.onExit(l),or=!0),c(l,new hs(l))}function mh(l,u){if(ds=l,Ch(),ca()&&!u){var d="program exited (with status: "+l+"), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";i(d),E(d)}_h(l)}function yh(l){if(l instanceof hs||l=="unwind")return ds;mi(),l instanceof WebAssembly.RuntimeError&&ac()<=0&&E("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to "+65536+")"),c(1,l)}function bh(l){var u=e["_"+l];return B(u,"Cannot call unknown function "+l+", make sure it is exported"),u}function gh(l,u,d,_,b){var T={string:wt=>{var Nt=0;if(wt!=null&&wt!==0){var ze=(wt.length<<2)+1;Nt=vi(ze),sa(wt,Nt,ze)}return Nt},array:wt=>{var Nt=vi(wt.length);return tc(wt,Nt),Nt}};function S(wt){return u==="string"?Re(wt):u==="boolean"?Boolean(wt):wt}var F=bh(l),M=[],N=0;if(B(u!=="array",'Return type should not be "array".'),_)for(var et=0;et<_.length;et++){var Bt=T[d[et]];Bt?(N===0&&(N=Ia()),M[et]=Bt(_[et])):M[et]=_[et]}var ct=F.apply(null,M);function Dr(wt){return N!==0&&Fa(N),S(wt)}return ct=Dr(ct),ct}function wh(){Wd("fetchSettings")}var ec={__assert_fail:Kd,__dlsym:Jd,__syscall__newselect:qd,__syscall_bind:Zd,__syscall_connect:tf,__syscall_faccessat:ef,__syscall_fcntl64:rf,__syscall_fstat64:nf,__syscall_ftruncate64:sf,__syscall_getdents64:of,__syscall_getpeername:af,__syscall_getsockopt:lf,__syscall_ioctl:cf,__syscall_lstat64:uf,__syscall_mkdirat:df,__syscall_newfstatat:ff,__syscall_openat:hf,__syscall_recvfrom:pf,__syscall_renameat:_f,__syscall_rmdir:mf,__syscall_sendto:yf,__syscall_socket:bf,__syscall_stat64:gf,__syscall_unlinkat:wf,__throw_exception_with_stack_trace:vf,_emscripten_get_now_is_monotonic:If,abort:Ff,dlopen:Af,duckdb_web_fs_directory_create:Tf,duckdb_web_fs_directory_exists:Ef,duckdb_web_fs_directory_list_files:xf,duckdb_web_fs_directory_remove:Df,duckdb_web_fs_file_close:Bf,duckdb_web_fs_file_exists:Of,duckdb_web_fs_file_get_last_modified_time:Rf,duckdb_web_fs_file_move:Mf,duckdb_web_fs_file_open:Cf,duckdb_web_fs_file_read:Lf,duckdb_web_fs_file_truncate:kf,duckdb_web_fs_file_write:Uf,duckdb_web_fs_get_default_data_protocol:Nf,duckdb_web_fs_glob:jf,duckdb_web_test_platform_feature:Pf,duckdb_web_udf_scalar_call:Vf,emscripten_console_error:Hf,emscripten_date_now:zf,emscripten_get_heap_max:Wf,emscripten_get_now:ma,emscripten_memcpy_big:Yf,emscripten_resize_heap:Gf,environ_get:Jf,environ_sizes_get:qf,fd_close:Qf,fd_fdstat_get:Zf,fd_pread:th,fd_pwrite:eh,fd_read:rh,fd_seek:nh,fd_sync:ih,fd_write:oh,getaddrinfo:ah,getentropy:ys,getnameinfo:ch,strftime_l:ph},Jm=zd(),qm=m("__wasm_call_ctors"),vh=e._main=m("main"),Qm=e._duckdb_web_fs_glob_add_path=m("duckdb_web_fs_glob_add_path"),Zm=e._duckdb_web_clear_response=m("duckdb_web_clear_response"),ty=e._duckdb_web_fail_with=m("duckdb_web_fail_with"),ey=e._duckdb_web_reset=m("duckdb_web_reset"),ry=e._duckdb_web_connect=m("duckdb_web_connect"),ny=e._duckdb_web_disconnect=m("duckdb_web_disconnect"),iy=e._duckdb_web_flush_files=m("duckdb_web_flush_files"),sy=e._duckdb_web_flush_file=m("duckdb_web_flush_file"),oy=e._duckdb_web_open=m("duckdb_web_open"),ay=e._duckdb_web_get_global_file_info=m("duckdb_web_get_global_file_info"),ly=e._duckdb_web_collect_file_stats=m("duckdb_web_collect_file_stats"),cy=e._duckdb_web_export_file_stats=m("duckdb_web_export_file_stats"),uy=e._duckdb_web_fs_drop_file=m("duckdb_web_fs_drop_file"),dy=e._duckdb_web_fs_drop_files=m("duckdb_web_fs_drop_files"),fy=e._duckdb_web_fs_glob_file_infos=m("duckdb_web_fs_glob_file_infos"),hy=e._duckdb_web_fs_get_file_info_by_id=m("duckdb_web_fs_get_file_info_by_id"),py=e._duckdb_web_fs_get_file_info_by_name=m("duckdb_web_fs_get_file_info_by_name"),_y=e._duckdb_web_fs_register_file_url=m("duckdb_web_fs_register_file_url"),my=e._duckdb_web_fs_register_file_buffer=m("duckdb_web_fs_register_file_buffer"),yy=e._duckdb_web_copy_file_to_buffer=m("duckdb_web_copy_file_to_buffer"),by=e._duckdb_web_copy_file_to_path=m("duckdb_web_copy_file_to_path"),gy=e._duckdb_web_get_version=m("duckdb_web_get_version"),wy=e._duckdb_web_get_feature_flags=m("duckdb_web_get_feature_flags"),vy=e._duckdb_web_tokenize=m("duckdb_web_tokenize"),Sy=e._duckdb_web_udf_scalar_create=m("duckdb_web_udf_scalar_create"),Iy=e._duckdb_web_prepared_create=m("duckdb_web_prepared_create"),Fy=e._duckdb_web_prepared_close=m("duckdb_web_prepared_close"),Ay=e._duckdb_web_prepared_run=m("duckdb_web_prepared_run"),Ty=e._duckdb_web_prepared_send=m("duckdb_web_prepared_send"),Ey=e._duckdb_web_query_run=m("duckdb_web_query_run"),xy=e._duckdb_web_pending_query_start=m("duckdb_web_pending_query_start"),Dy=e._duckdb_web_pending_query_poll=m("duckdb_web_pending_query_poll"),By=e._duckdb_web_pending_query_cancel=m("duckdb_web_pending_query_cancel"),Oy=e._duckdb_web_query_fetch_results=m("duckdb_web_query_fetch_results"),Ry=e._duckdb_web_get_tablenames=m("duckdb_web_get_tablenames"),My=e._duckdb_web_insert_arrow_from_ipc_stream=m("duckdb_web_insert_arrow_from_ipc_stream"),Cy=e._duckdb_web_insert_csv_from_path=m("duckdb_web_insert_csv_from_path"),Ly=e._duckdb_web_insert_json_from_path=m("duckdb_web_insert_json_from_path"),Sh=m("__errno_location"),ky=m("__dl_seterr"),Ih=e._fflush=m("fflush"),wa=m("htonl"),va=m("htons"),rc=m("ntohs"),nc=e._malloc=m("malloc"),ic=e._free=m("free"),sc=function(){return(sc=e.asm.__trap).apply(null,arguments)},oc=function(){return(oc=e.asm.emscripten_stack_init).apply(null,arguments)},Fh=function(){return(Fh=e.asm.emscripten_stack_get_free).apply(null,arguments)},Ah=function(){return(Ah=e.asm.emscripten_stack_get_base).apply(null,arguments)},Sa=function(){return(Sa=e.asm.emscripten_stack_get_end).apply(null,arguments)},Ia=m("stackSave"),Fa=m("stackRestore"),vi=m("stackAlloc"),ac=function(){return(ac=e.asm.emscripten_stack_get_current).apply(null,arguments)},Th=e.___cxa_decrement_exception_refcount=m("__cxa_decrement_exception_refcount"),Eh=e.___cxa_increment_exception_refcount=m("__cxa_increment_exception_refcount"),xh=e.___thrown_object_from_unwind_exception=m("__thrown_object_from_unwind_exception"),Dh=e.___get_exception_message=m("__get_exception_message"),Uy=e.dynCall_jiji=m("dynCall_jiji"),Ny=e.dynCall_iiiiij=m("dynCall_iiiiij"),jy=e.dynCall_iiiiijj=m("dynCall_iiiiijj"),Py=e.dynCall_iiiiiijj=m("dynCall_iiiiiijj"),Vy=e.dynCall_viijii=m("dynCall_viijii"),Hy=e.dynCall_jiii=m("dynCall_jiii"),zy=e.dynCall_jii=m("dynCall_jii"),Wy=e.dynCall_ji=m("dynCall_ji"),Yy=e.dynCall_jij=m("dynCall_jij"),$y=e.dynCall_iiij=m("dynCall_iiij"),Gy=e.dynCall_viji=m("dynCall_viji"),Xy=e.dynCall_iij=m("dynCall_iij"),Ky=e.dynCall_iiiiiji=m("dynCall_iiiiiji"),Jy=e.dynCall_vij=m("dynCall_vij"),qy=e.dynCall_viij=m("dynCall_viij"),Qy=e.dynCall_jiiiii=m("dynCall_jiiiii"),Zy=e.dynCall_viiijj=m("dynCall_viiijj"),tb=e.dynCall_viiij=m("dynCall_viiij"),eb=e.dynCall_j=m("dynCall_j"),rb=e.dynCall_viijij=m("dynCall_viijij"),nb=e.dynCall_viiijiiiijj=m("dynCall_viiijiiiijj"),ib=e.dynCall_vjjijij=m("dynCall_vjjijij"),sb=e.dynCall_vijjji=m("dynCall_vijjji"),ob=e.dynCall_vjjii=m("dynCall_vjjii"),ab=e.dynCall_viiiiiji=m("dynCall_viiiiiji"),lb=e.dynCall_jiiiji=m("dynCall_jiiiji"),cb=e.dynCall_jiiij=m("dynCall_jiiij"),ub=e.dynCall_jijjij=m("dynCall_jijjij"),db=e.dynCall_vijjj=m("dynCall_vijjj"),fb=e.dynCall_jiijii=m("dynCall_jiijii"),hb=e.dynCall_jijiii=m("dynCall_jijiii"),pb=e.dynCall_viijiiiii=m("dynCall_viijiiiii"),_b=e.dynCall_viijiiij=m("dynCall_viijiiij"),mb=e.dynCall_vijiiiji=m("dynCall_vijiiiji"),yb=e.dynCall_viiiij=m("dynCall_viiiij"),bb=e.dynCall_jiiji=m("dynCall_jiiji"),gb=e.dynCall_viiijij=m("dynCall_viiijij"),wb=e.dynCall_viijiij=m("dynCall_viijiij"),vb=e.dynCall_viiiiijj=m("dynCall_viiiiijj"),Sb=e.dynCall_viiijji=m("dynCall_viiijji"),Ib=e.dynCall_vijii=m("dynCall_vijii"),Fb=e.dynCall_jiiiij=m("dynCall_jiiiij"),Ab=e.dynCall_jj=m("dynCall_jj"),Tb=e.dynCall_ij=m("dynCall_ij"),Eb=e.dynCall_ijjj=m("dynCall_ijjj"),xb=e.dynCall_jjjd=m("dynCall_jjjd"),Db=e.dynCall_jjjjjjd=m("dynCall_jjjjjjd"),Bb=e.dynCall_jijj=m("dynCall_jijj"),Ob=e.dynCall_iiiji=m("dynCall_iiiji"),Rb=e.dynCall_viiji=m("dynCall_viiji"),Mb=e.dynCall_jiiiijj=m("dynCall_jiiiijj"),Cb=e.dynCall_jiiii=m("dynCall_jiiii"),Lb=e.dynCall_iiijj=m("dynCall_iiijj"),kb=e.dynCall_iiji=m("dynCall_iiji"),Ub=e.dynCall_viiiji=m("dynCall_viiiji"),Nb=e.dynCall_viiiiji=m("dynCall_viiiiji"),jb=e.dynCall_viijji=m("dynCall_viijji"),Pb=e.dynCall_viijj=m("dynCall_viijj"),Vb=e.dynCall_jijiiii=m("dynCall_jijiiii"),Hb=e.dynCall_viiijiji=m("dynCall_viiijiji"),zb=e.dynCall_viijiji=m("dynCall_viijiji");e.stackAlloc=vi,e.stackSave=Ia,e.stackRestore=Fa,e.ccall=gh;var Bh=["stringToNewUTF8","getHostByName","traverseStack","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromI64","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","stringToAscii","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","allocateUTF8","allocateUTF8OnStack","writeStringToMemory","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","emscriptenWebGLGet","computeUnpackAlignedImageSize","emscriptenWebGLGetTexPixelData","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","writeGLArray","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","runAndAbortIfError","ALLOC_NORMAL","ALLOC_STACK","allocate"];Bh.forEach($d);var Oh=["run","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createPreloadedFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","getRandomDevice","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","intArrayFromString","UTF16Decoder","writeArrayToMemory","writeAsciiToMemory","SYSCALLS","getSocketFromFD","getSocketAddress","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","tempFixedLengthArray","miniTempWebGLFloatBuffers","GL","AL","SDL","SDL_gfx","GLUT","EGL","GLFW","GLEW","IDBStore","SOCKFS","FS"];Oh.forEach(Hl);var gs;yi=function l(){gs||lc(),gs||(yi=l)};function Rh(){B(qr==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),B(la.length==0,"cannot call main when preRun functions remain to be called");var l=vh,u=0,d=0;try{var _=l(u,d);return mh(_,!0),_}catch(b){return yh(b)}}function Mh(){oc(),Bd()}function lc(){if(qr>0||(Mh(),Od(),qr>0))return;function l(){gs||(gs=!0,e.calledRun=!0,!or&&(Rd(),Md(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),cc&&Rh(),Cd()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),l()},1)):l(),mi()}function Ch(){var l=Kr,u=E,d=!1;Kr=E=_=>{d=!0};try{sh()}catch(_){}Kr=l,E=u,d&&(lr("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),lr("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var cc=!0;return e.noInitialRun&&(cc=!1),lc(),t.ready}})(),wd=Em;var Qo=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Mt.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Et(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((s,o)=>{try{s(this._bindings.pollPendingQuery(this._conn))}catch(a){o(a)}});let n=new Zo(this._bindings,this._conn,e),i=Mt.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new Fl(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=Xo(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},Zo=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},Fl=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Mt.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Et(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new Zo(this.bindings,this.connectionId,e),i=Mt.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}};var Id=new TextEncoder,vd=new TextDecoder("utf-8");function Al(r,t,e){let n=Id.encode(e),i=r._malloc(n.byteLength),s=r.HEAPU8.subarray(i,i+n.byteLength);s.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=i,r.HEAPF64[(t>>3)+2]=s.byteLength}function El(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Tl(r,t,e,n){let i=r.HEAPU8.subarray(t,t+n*El(e));switch(e){case"UINT8":return new Uint8Array(i.buffer,i.byteOffset,n);case"INT8":return new Int8Array(i.buffer,i.byteOffset,n);case"INT32":return new Int32Array(i.buffer,i.byteOffset,n);case"FLOAT":return new Float32Array(i.buffer,i.byteOffset,n);case"DOUBLE":return new Float64Array(i.buffer,i.byteOffset,n);case"VARCHAR":return new Float64Array(i.buffer,i.byteOffset,n);default:return new Array(0)}}function Sd(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function ta(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Fd(r,t,e,n,i,s,o,a){try{let c=r._udfFunctions.get(n);if(!c){Al(t,e,"Unknown UDF with id: "+n);return}let f=vd.decode(t.HEAPU8.subarray(i,i+s)),p=JSON.parse(f),y=ta(t,o,a/8),g=E=>{var Oe;let ue=null;switch(E.validityBuffer!==void 0&&(ue=Sd(t,y[E.validityBuffer],p.rows)),E.physicalType){case"VARCHAR":{if(E.dataBuffer===null||E.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(E.lengthBuffer===null||E.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Ae=Tl(t,y[E.dataBuffer],E.physicalType,p.rows),se=[],xt=ta(t,y[E.lengthBuffer],p.rows);for(let ht=0;ht<p.rows;++ht){if(ue!=null&&!ue[ht]){se.push(null);continue}let Xt=t.HEAPU8.subarray(Ae[ht],Ae[ht]+xt[ht]),or=vd.decode(Xt);se.push(or)}return ht=>se[ht]}case"STRUCT":{let Ae={},se=[];for(let xt=0;xt<(((Oe=E.children)==null?void 0:Oe.length)||0);++xt){let ht=E.children[xt],Xt=g(ht);se.push(or=>{Ae[ht.name]=Xt(or)})}return ue!=null?xt=>{if(!ue[xt])return null;for(let ht of se)ht(xt);return Ae}:xt=>{for(let ht of se)ht(xt);return Ae}}default:{if(E.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+E.physicalType);let Ae=Tl(t,y[E.dataBuffer],E.physicalType,p.rows);return ue!=null?se=>ue[se]?Ae[se]:null:se=>Ae[se]}}},v=[];for(let E=0;E<p.args.length;++E)v.push(g(p.args[E]));let nt=p.rows*El(p.ret.physicalType),tt=t._malloc(nt),_t=Tl(t,tt,p.ret.physicalType,p.rows),ft=t._malloc(p.rows),ie=Sd(t,ft,p.rows);if(_t.length==0||ie.length==0){Al(t,e,"Can't create physical arrays for result");return}let Fe=_t;p.ret.physicalType=="VARCHAR"&&(Fe=new Array(p.rows));let Tr=[];for(let E=0;E<p.args.length;++E)Tr.push(null);for(let E=0;E<p.rows;++E){for(let Oe=0;Oe<p.args.length;++Oe)Tr[Oe]=v[Oe](E);let ue=c.func(...Tr);Fe[E]=ue,ie[E]=ue==null?0:1}let Nn=0;switch(p.ret.physicalType){case"VARCHAR":{let E=new Array(0);Nn=t._malloc(p.rows*El("DOUBLE"));let ue=ta(t,Nn,p.rows),Oe=0;for(let ht=0;ht<p.rows;++ht){let Xt=Id.encode(Fe[ht]||"");E.push(Xt),ue[ht]=Xt.length,Oe+=Xt.length}let Ae=t._malloc(Oe),se=t.HEAPU8.subarray(Ae,Ae+Oe),xt=0;for(let ht=0;ht<p.rows;++ht){_t[ht]=xt;let Xt=E[ht];se.subarray(xt,xt+Xt.length).set(Xt),xt+=Xt.length}}}let _i=3*8,us=t._malloc(_i),Kr=ta(t,us,3);Kr[0]=tt,Kr[1]=ft,Kr[2]=Nn,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=us,t.HEAPF64[(e>>3)+2]=0}catch(c){Al(t,e,c.toString())}}function Dm(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var Bm=Dm();function Ar(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function Un(r,t,e){let n=r.HEAPU8.subarray(t,t+e),i=new Uint8Array(new ArrayBuffer(n.byteLength));return i.set(n),i}function $(r,t,e){return Bm(r.HEAPU8.subarray(t,t+e))}function at(r,t,e,n){let i=r.stackSave(),s=r.stackAlloc(3*8);e.unshift("number"),n.unshift(s),r.ccall(t,null,e,n);let o=r.HEAPF64[(s>>3)+0],a=r.HEAPF64[(s>>3)+1],c=r.HEAPF64[(s>>3)+2];return r.stackRestore(i),[o,a,c]}function gt(r){r.ccall("duckdb_web_clear_response",null,[],[])}var ea=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var Om=new TextEncoder;var ra=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,i]=at(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error($(this.mod,n,i));gt(this.mod)}reset(){let[t,e,n]=at(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error($(this.mod,e,n));gt(this.mod)}getVersion(){let[t,e,n]=at(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error($(this.mod,e,n));let i=$(this.mod,e,n);return gt(this.mod),i}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,i]=at(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=$(this.mod,n,i);return gt(this.mod),JSON.parse(s)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Qo(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,i,s]=at(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));let o=Un(this.mod,i,s);return gt(this.mod),o}startPendingQuery(t,e){let[n,i,s]=at(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));if(i==0)return null;let o=Un(this.mod,i,s);return gt(this.mod),o}pollPendingQuery(t){let[e,n,i]=at(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error($(this.mod,n,i));if(n==0)return null;let s=Un(this.mod,n,i);return gt(this.mod),s}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,i]=at(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=Un(this.mod,n,i);return gt(this.mod),s}getTableNames(t,e){let[n,i,s]=at(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));let o=$(this.mod,i,s);return gt(this.mod),JSON.parse(o)}createScalarFunction(t,e,n,i){let s={functionId:this._nextUDFId,name:e,returnType:pi(n)},o={functionId:s.functionId,connectionId:t,name:e,returnType:n,func:i};this._nextUDFId+=1;let[a,c,f]=at(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(s)]);if(a!==0)throw new Error($(this.mod,c,f));if(gt(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(o.functionId,o),this.pthread)for(let p of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])p.postMessage({cmd:"registerUDFFunction",udf:o})}createPrepared(t,e){let[n,i,s]=at(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));return gt(this.mod),i}closePrepared(t,e){let[n,i,s]=at(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));gt(this.mod)}runPrepared(t,e,n){let[i,s,o]=at(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error($(this.mod,s,o));let a=Un(this.mod,s,o);return gt(this.mod),a}sendPrepared(t,e,n){let[i,s,o]=at(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error($(this.mod,s,o));let a=Un(this.mod,s,o);return gt(this.mod),a}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let i=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(i,i+e.length).set(e);let o=n?JSON.stringify(n):"",[a,c,f]=at(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,i,e.length,o]);if(a!==0)throw new Error($(this.mod,c,f))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let f in n.columns)n.columnsFlat.push(Ko(f,n.columns[f]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,c]=at(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error($(this.mod,a,c))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let f in n.columns)n.columnsFlat.push(Ko(f,n.columns[f]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,c]=at(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error($(this.mod,a,c))}globFiles(t){let[e,n,i]=at(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=$(this.mod,n,i);gt(this.mod);let o=JSON.parse(s);return o==null?[]:o}registerFileURL(t,e,n,i=!1){e===void 0&&(e=t);let[s,o,a]=at(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,i]);if(s!==0)throw new Error($(this.mod,o,a));gt(this.mod)}registerFileText(t,e){let n=Om.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[s,o,a]=at(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(s!==0)throw new Error($(this.mod,o,a));gt(this.mod)}registerFileHandle(t,e,n,i){let[s,o,a]=at(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,i]);if(s!==0)throw new Error($(this.mod,o,a));if(gt(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let c of this.pthread.runningWorkers)c.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let c of this.pthread.unusedWorkers)c.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,i]=at(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));gt(this.mod)}dropFiles(){let[t,e,n]=at(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error($(this.mod,e,n));gt(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,i,s]=at(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));gt(this.mod)}copyFileToBuffer(t){let[e,n,i]=at(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=this.mod.HEAPU8.subarray(n,n+i),o=new Uint8Array(s.length);return o.set(s),gt(this.mod),o}collectFileStatistics(t,e){let[n,i,s]=at(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s))}exportFileStatistics(t){let[e,n,i]=at(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));return new ea(this.mod.HEAPU8.subarray(n,n+i))}};var na=class extends ra{constructor(e,n,i,s){super(e,n);this.mainModuleURL=i,this.pthreadWorkerURL=s}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let i=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let o=(async()=>{var tt;let a=new Request(this.mainModuleURL),c=await fetch(a),f=c.headers.get("content-length"),p=f&&parseInt(f,10)||0,y=new Date,g={startedAt:y,updatedAt:y,bytesTotal:p||0,bytesLoaded:0},v={transform(_t,ft){g.bytesLoaded+=_t.byteLength;let ie=new Date;if(ie.getTime()-g.updatedAt.getTime()<20){g.updatedAt=ie,ft.enqueue(_t);return}for(let Fe of i)Fe(g);ft.enqueue(_t)}},nt=new TransformStream(v);return new Response((tt=c.body)==null?void 0:tt.pipeThrough(nt),c)})();WebAssembly.instantiateStreaming(o,e).then(a=>{n(a.instance,a.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let s=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(s),e).then(o=>{n(o.instance,o.module)})}else if(typeof XMLHttpRequest=="function"){let s=new XMLHttpRequest,o=this.mainModuleURL,a=new Date,c={startedAt:a,updatedAt:a,bytesTotal:0,bytesLoaded:0};s.open("GET",o),s.responseType="arraybuffer",s.onerror=f=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+f}),new Error(f.toString())},s.onprogress=f=>{c.bytesTotal=f.total,c.bytesLoaded=f.loaded;let p=new Date;if(p.getTime()-c.updatedAt.getTime()<20){c.updatedAt=p;return}for(let y of i)y(c)},s.onload=()=>{WebAssembly.instantiate(s.response,e).then(f=>{n(f.instance,f.module)}).catch(f=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+f}),new Error(f)})},s.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let o=new Request(this.mainModuleURL),c=await(await fetch(o)).arrayBuffer();WebAssembly.instantiate(c,e).then(f=>{n(f.instance,f.module)})})();return[]}};var ia=class extends na{constructor(t,e,n,i=null){super(t,e,n,i)}instantiateImpl(t){return wd({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var pn=Aa(Ad()),Td=function(r,t,e){var n;if((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")){let i=`${r==null?void 0:r.endpoint}`,s=i.indexOf("://")+3;return i.substring(s)}else return r!=null&&r.endpoint?`${e}.${r==null?void 0:r.endpoint}`:`${e}.s3.amazonaws.com`};function Rm(r,t,e){var i,s,o,a;let n=Ed(t);return{url:n.path,query:"",host:Td(r,t,n.bucket),region:(i=r==null?void 0:r.region)!=null?i:"",service:"s3",method:e,accessKeyId:(s=r==null?void 0:r.accessKeyId)!=null?s:"",secretAccessKey:(o=r==null?void 0:r.secretAccessKey)!=null?o:"",sessionToken:(a=r==null?void 0:r.sessionToken)!=null?a:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Mm(r,t=!1){let e="0123456789ABCDEF",n="";for(let i=0;i<r.length;i++){let s=r[i];s>="A"&&s<="Z"||s>="a"&&s<="z"||s>="0"&&s<="9"||s=="_"||s=="-"||s=="~"||s=="."?n+=s:s=="/"?t?n+="%2F":n+=s:(n+="%",n+=e[s.charCodeAt(0)>>4],n+=e[s.charCodeAt(0)&15])}return n}function Cm(r,t=null){var nt;let e=(nt=t==null?void 0:t.contentHash)!=null?nt:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",r.datetimeNow),n.set("x-amz-content-sha256",e),r.sessionToken&&n.set("x-amz-security-token",r.sessionToken);let i="";t!=null&&t.contentType&&(i+="content-type;"),i+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(i+=";x-amz-security-token");let s=r.method+`
`+Mm(r.url)+`
`+r.query;t!=null&&t.contentType&&(s+=`
content-type:`+(t==null?void 0:t.contentType)),s+=`
host:`+r.host+`
x-amz-content-sha256:`+e+`
x-amz-date:`+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(s+=`
x-amz-security-token:`+r.sessionToken),s+=`

`+i+`
`+e;let o=(0,pn.sha256)(s),a=`AWS4-HMAC-SHA256
`+r.datetimeNow+`
`+r.dateNow+"/"+r.region+"/"+r.service+`/aws4_request
`+o,c="AWS4"+r.secretAccessKey,f=pn.sha256.hmac.arrayBuffer(c,r.dateNow),p=pn.sha256.hmac.arrayBuffer(f,r.region),y=pn.sha256.hmac.arrayBuffer(p,r.service),g=pn.sha256.hmac.arrayBuffer(y,"aws4_request"),v=pn.sha256.hmac(g,a);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+i+", Signature="+v),n}var Lm=function(r,t,e,n=null,i=null){let s=Rm(r,t,e),o={contentType:n,contentHash:i?pn.sha256.hex(i):null};return Cm(s,o)};function _n(r,t,e,n,i=null,s=null){((t==null?void 0:t.accessKeyId)||(t==null?void 0:t.sessionToken))&&(Lm(t,e,n,i,s).forEach((a,c)=>{r.setRequestHeader(c,a)}),i&&r.setRequestHeader("content-type",i))}function Ed(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=r.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=r.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function mn(r,t){var n;let e=Ed(t);return(n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")?`${r==null?void 0:r.endpoint}/${e.bucket}`+e.path:"https://"+Td(r,t,e.bucket)+e.path}var lt={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,t){try{let e=lt._fileInfoCache.get(t),[n,i,s]=at(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(s===0)return e;let o=$(r,i,s);gt(r);let a=JSON.parse(o);if(a==null)return null;let c={...a,blob:null};return lt._fileInfoCache.set(t,c),c}catch(e){return null}},getGlobalFileInfo(r){var t;try{let[e,n,i]=at(r,"duckdb_web_get_global_file_info",["number"],[((t=lt._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(i===0)return lt._globalFileInfo;let s=$(r,n,i);gt(r);let o=JSON.parse(s);return o==null?null:(lt._globalFileInfo={...o,blob:null},lt._globalFileInfo)}catch(e){return null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,t,e)=>{var n;try{lt._fileInfoCache.delete(t);let i=lt.getFileInfo(r,t);switch(i==null?void 0:i.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error(`Opening file ${i.fileName} failed: cannot open file with both read and write flags set`);if(e&32)throw new Error(`Opening file ${i.fileName} failed: appending to HTTP/S3 files is not supported`);if(e&2){let o=new XMLHttpRequest;if(i.dataProtocol==5?(o.open("HEAD",mn(i.s3Config,i.dataUrl),!1),_n(o,i.s3Config,i.dataUrl,"HEAD")):o.open("HEAD",i.dataUrl,!1),o.send(null),o.status!=200&&o.status!=404)throw new Error(`Opening file ${i.fileName} failed: Unexpected return status from server (${o.status})`);if(o.status==404&&!(e&8||e&16))throw new Error(`Opening file ${i.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let a=r._malloc(1),c=new Uint8Array;r.HEAPU8.set(c,a);let f=r._malloc(2*8);return r.HEAPF64[(f>>3)+0]=1,r.HEAPF64[(f>>3)+1]=a,f}else if(e!=1)throw new Error(`Opening file ${i.fileName} failed: unsupported file flags: ${e}`);let s=null;try{let o=new XMLHttpRequest;i.dataProtocol==5?(o.open("HEAD",mn(i.s3Config,i.dataUrl),!1),_n(o,i.s3Config,i.dataUrl,"HEAD")):o.open("HEAD",i.dataUrl,!1),o.setRequestHeader("Range","bytes=0-"),o.send(null);let a=o.getResponseHeader("Content-Length");if(o.status==206&&a!==null){let c=r._malloc(16);return r.HEAPF64[(c>>3)+0]=+a,r.HEAPF64[(c>>3)+1]=0,c}}catch(o){s=o,console.warn(`HEAD request with range header failed: ${o}`)}if(i.allowFullHttpReads){console.warn(`falling back to full HTTP read for: ${i.dataUrl}`);let o=new XMLHttpRequest;if(i.dataProtocol==5?(o.open("GET",mn(i.s3Config,i.dataUrl),!1),_n(o,i.s3Config,i.dataUrl,"GET")):o.open("GET",i.dataUrl,!1),o.responseType="arraybuffer",o.send(null),o.status==200){let a=r._malloc(o.response.byteLength),c=new Uint8Array(o.response,0,o.response.byteLength);r.HEAPU8.set(c,a);let f=r._malloc(2*8);return r.HEAPF64[(f>>3)+0]=o.response.byteLength,r.HEAPF64[(f>>3)+1]=a,f}}if(s!=null)throw new Error(`Reading file ${i.fileName} failed with error: ${s}`);return 0}case 2:{let s=(n=lt._files)==null?void 0:n.get(i.fileName);if(s){let c=r._malloc(16);return r.HEAPF64[(c>>3)+0]=s.size,r.HEAPF64[(c>>3)+1]=0,c}console.warn(`Buffering missing file: ${i.fileName}`);let o=r._malloc(2*8),a=r._malloc(1);return r.HEAPF64[(o>>3)+0]=1,r.HEAPF64[(o>>3)+1]=a,o}}}catch(i){console.error(i.toString()),Ar(r,i.toString())}return 0},glob:(r,t,e)=>{try{let n=$(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=lt.getGlobalFileInfo(r);i.open("HEAD",mn(s==null?void 0:s.s3Config,n),!1),_n(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);if(i.send(null),i.status!=200&&i.status!==206){Ar(r,`HEAD request failed: ${n}`);return}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[n])}}catch(n){return Ar(r,n.toString()),0}},checkFile:(r,t,e)=>{try{let n=$(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=lt.getGlobalFileInfo(r);i.open("HEAD",mn(s==null?void 0:s.s3Config,n),!1),_n(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);return i.send(null),i.status==206||i.status==200}}catch(n){return!1}return!1},syncFile:(r,t)=>{},closeFile:(r,t)=>{var n;let e=lt.getFileInfo(r,t);switch(lt._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let i=(n=lt._files)==null?void 0:n.get(e.fileName);if(!i)throw new Error(`No OPFS access handle registered with name: ${e.fileName}`);return i.flush()}}},truncateFile:(r,t,e)=>{var i;let n=lt.getFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 4:Ar(r,"Cannot truncate a http file");return;case 5:Ar(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:Ar(r,"truncateFile not implemented");return;case 3:{let s=(i=lt._files)==null?void 0:i.get(n.fileName);if(!s)throw new Error(`No OPFS access handle registered with name: ${n.fileName}`);return s.truncate(e)}}return 0},readFile(r,t,e,n,i){var s,o;try{let a=lt.getFileInfo(r,t);switch(a==null?void 0:a.dataProtocol){case 4:case 5:{if(!a.dataUrl)throw new Error(`Missing data URL for file ${t}`);try{let c=new XMLHttpRequest;if(a.dataProtocol==5?(c.open("GET",mn(a==null?void 0:a.s3Config,a.dataUrl),!1),_n(c,a==null?void 0:a.s3Config,a.dataUrl,"GET")):c.open("GET",a.dataUrl,!1),c.responseType="arraybuffer",c.setRequestHeader("Range",`bytes=${i}-${i+n-1}`),c.send(null),c.status==206||c.status==200&&n==c.response.byteLength&&i==0){let f=new Uint8Array(c.response,0,Math.min(c.response.byteLength,n));return r.HEAPU8.set(f,e),f.byteLength}else throw c.status==200?new Error(`Range request for ${a.dataUrl} did not return a partial response: ${c.status} "${c.statusText}"`):new Error(`Range request for ${a.dataUrl} did returned non-success status: ${c.status} "${c.statusText}"`)}catch(c){throw new Error(`Range request for ${a.dataUrl} failed with error: ${c}"`)}}case 2:{let c=(s=lt._files)==null?void 0:s.get(a.fileName);if(!c)throw new Error(`No HTML5 file registered with name: ${a.fileName}`);let f=c.slice(i,i+n),p=new Uint8Array(new FileReaderSync().readAsArrayBuffer(f));return r.HEAPU8.set(p,e),p.byteLength}case 3:{let c=(o=lt._files)==null?void 0:o.get(a.fileName);if(!c)throw new Error(`No OPFS access handle registered with name: ${a.fileName}`);let f=r.HEAPU8.subarray(e,e+n);return c.read(f,{at:i})}}return 0}catch(a){return Ar(r,a.toString()),0}},writeFile:(r,t,e,n,i)=>{var o;let s=lt.getFileInfo(r,t);switch(s==null?void 0:s.dataProtocol){case 4:return Ar(r,"Cannot write to HTTP file"),0;case 5:{let a=r.HEAPU8.subarray(e,e+n),c=new XMLHttpRequest;return c.open("PUT",mn(s==null?void 0:s.s3Config,s.dataUrl),!1),_n(c,s==null?void 0:s.s3Config,s.dataUrl,"PUT","",a),c.send(a),n}case 2:return Ar(r,"cannot write using the html5 file reader api"),0;case 3:{let a=(o=lt._files)==null?void 0:o.get(s.fileName);if(!a)throw new Error(`No OPFS access handle registered with name: ${s.fileName}`);let c=r.HEAPU8.subarray(e,e+n);return a.write(c,{at:i})}}return 0},getLastFileModificationTime:(r,t)=>{var n;let e=lt.getFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=lt._files)==null?void 0:n.get(e.fileName)))throw Error(`No handle available for file: ${e.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,t,e)=>{let n=$(r,t,e);return console.log(`checkDirectory: ${n}`),!1},createDirectory:(r,t,e)=>{let n=$(r,t,e);console.log(`createDirectory: ${n}`)},removeDirectory:(r,t,e)=>{let n=$(r,t,e);console.log(`removeDirectory: ${n}`)},listDirectoryEntries:(r,t,e)=>{let n=$(r,t,e);return console.log(`listDirectoryEntries: ${n}`),!1},moveFile:(r,t,e,n,i)=>{var c,f;let s=$(r,t,e),o=$(r,n,i),a=(c=lt._files)==null?void 0:c.get(s);a!==void 0&&(lt._files.delete(a),lt._files.set(o,a));for(let[p,y]of((f=lt._fileInfoCache)==null?void 0:f.entries())||[])if(y.dataUrl==s){lt._fileInfoCache.delete(p);break}return!0},removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,i,s,o)=>{Fd(lt,r,t,e,n,i,s,o)}};var xl=class extends Jo{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new ia(this,lt,t,e).instantiate(n)}};function xd(){let r=new xl;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}xd();return Wh(km);})();
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
