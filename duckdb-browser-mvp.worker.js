"use strict";var duckdb=(()=>{var Xw=Object.create;var Ds=Object.defineProperty;var Kw=Object.getOwnPropertyDescriptor;var Jw=Object.getOwnPropertyNames;var qw=Object.getPrototypeOf,Qw=Object.prototype.hasOwnProperty;var Zw=(i=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(i,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):i)(function(i){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var wl=(i,t)=>()=>(t||i((t={exports:{}}).exports,t),t.exports),kn=(i,t)=>{for(var e in t)Ds(i,e,{get:t[e],enumerable:!0})},jl=(i,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of Jw(t))!Qw.call(i,r)&&r!==e&&Ds(i,r,{get:()=>t[r],enumerable:!(n=Kw(t,r))||n.enumerable});return i};var Ma=(i,t,e)=>(e=i!=null?Xw(qw(i)):{},jl(t||!i||!i.__esModule?Ds(e,"default",{value:i,enumerable:!0}):e,i)),tj=i=>jl(Ds({},"__esModule",{value:!0}),i);var Wl=wl((ik,Os)=>{var Sl,Il,kl,Cl,Fl,Al,Tl,El,xl,Bs,La,Dl,Bl,Rl,Xn,Ol,Ml,Ll,Ul,Nl,Pl,Vl,Hl,zl,Rs;(function(i){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(n){i(e(t,e(n)))}):typeof Os=="object"&&typeof Os.exports=="object"?i(e(t,e(Os.exports))):i(e(t));function e(n,r){return n!==t&&(typeof Object.create=="function"?Object.defineProperty(n,"__esModule",{value:!0}):n.__esModule=!0),function(a,u){return n[a]=r?r(a,u):u}}})(function(i){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(n[a]=r[a])};Sl=function(n,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");t(n,r);function a(){this.constructor=n}n.prototype=r===null?Object.create(r):(a.prototype=r.prototype,new a)},Il=Object.assign||function(n){for(var r,a=1,u=arguments.length;a<u;a++){r=arguments[a];for(var _ in r)Object.prototype.hasOwnProperty.call(r,_)&&(n[_]=r[_])}return n},kl=function(n,r){var a={};for(var u in n)Object.prototype.hasOwnProperty.call(n,u)&&r.indexOf(u)<0&&(a[u]=n[u]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var _=0,u=Object.getOwnPropertySymbols(n);_<u.length;_++)r.indexOf(u[_])<0&&Object.prototype.propertyIsEnumerable.call(n,u[_])&&(a[u[_]]=n[u[_]]);return a},Cl=function(n,r,a,u){var _=arguments.length,m=_<3?r:u===null?u=Object.getOwnPropertyDescriptor(r,a):u,k;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")m=Reflect.decorate(n,r,a,u);else for(var A=n.length-1;A>=0;A--)(k=n[A])&&(m=(_<3?k(m):_>3?k(r,a,m):k(r,a))||m);return _>3&&m&&Object.defineProperty(r,a,m),m},Fl=function(n,r){return function(a,u){r(a,u,n)}},Al=function(n,r){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(n,r)},Tl=function(n,r,a,u){function _(m){return m instanceof a?m:new a(function(k){k(m)})}return new(a||(a=Promise))(function(m,k){function A(R){try{B(u.next(R))}catch(_t){k(_t)}}function D(R){try{B(u.throw(R))}catch(_t){k(_t)}}function B(R){R.done?m(R.value):_(R.value).then(A,D)}B((u=u.apply(n,r||[])).next())})},El=function(n,r){var a={label:0,sent:function(){if(m[0]&1)throw m[1];return m[1]},trys:[],ops:[]},u,_,m,k;return k={next:A(0),throw:A(1),return:A(2)},typeof Symbol=="function"&&(k[Symbol.iterator]=function(){return this}),k;function A(B){return function(R){return D([B,R])}}function D(B){if(u)throw new TypeError("Generator is already executing.");for(;a;)try{if(u=1,_&&(m=B[0]&2?_.return:B[0]?_.throw||((m=_.return)&&m.call(_),0):_.next)&&!(m=m.call(_,B[1])).done)return m;switch(_=0,m&&(B=[B[0]&2,m.value]),B[0]){case 0:case 1:m=B;break;case 4:return a.label++,{value:B[1],done:!1};case 5:a.label++,_=B[1],B=[0];continue;case 7:B=a.ops.pop(),a.trys.pop();continue;default:if(m=a.trys,!(m=m.length>0&&m[m.length-1])&&(B[0]===6||B[0]===2)){a=0;continue}if(B[0]===3&&(!m||B[1]>m[0]&&B[1]<m[3])){a.label=B[1];break}if(B[0]===6&&a.label<m[1]){a.label=m[1],m=B;break}if(m&&a.label<m[2]){a.label=m[2],a.ops.push(B);break}m[2]&&a.ops.pop(),a.trys.pop();continue}B=r.call(n,a)}catch(R){B=[6,R],_=0}finally{u=m=0}if(B[0]&5)throw B[1];return{value:B[0]?B[1]:void 0,done:!0}}},xl=function(n,r){for(var a in n)a!=="default"&&!Object.prototype.hasOwnProperty.call(r,a)&&Rs(r,n,a)},Rs=Object.create?function(n,r,a,u){u===void 0&&(u=a);var _=Object.getOwnPropertyDescriptor(r,a);(!_||("get"in _?!r.__esModule:_.writable||_.configurable))&&(_={enumerable:!0,get:function(){return r[a]}}),Object.defineProperty(n,u,_)}:function(n,r,a,u){u===void 0&&(u=a),n[u]=r[a]},Bs=function(n){var r=typeof Symbol=="function"&&Symbol.iterator,a=r&&n[r],u=0;if(a)return a.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&u>=n.length&&(n=void 0),{value:n&&n[u++],done:!n}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},La=function(n,r){var a=typeof Symbol=="function"&&n[Symbol.iterator];if(!a)return n;var u=a.call(n),_,m=[],k;try{for(;(r===void 0||r-- >0)&&!(_=u.next()).done;)m.push(_.value)}catch(A){k={error:A}}finally{try{_&&!_.done&&(a=u.return)&&a.call(u)}finally{if(k)throw k.error}}return m},Dl=function(){for(var n=[],r=0;r<arguments.length;r++)n=n.concat(La(arguments[r]));return n},Bl=function(){for(var n=0,r=0,a=arguments.length;r<a;r++)n+=arguments[r].length;for(var u=Array(n),_=0,r=0;r<a;r++)for(var m=arguments[r],k=0,A=m.length;k<A;k++,_++)u[_]=m[k];return u},Rl=function(n,r,a){if(a||arguments.length===2)for(var u=0,_=r.length,m;u<_;u++)(m||!(u in r))&&(m||(m=Array.prototype.slice.call(r,0,u)),m[u]=r[u]);return n.concat(m||Array.prototype.slice.call(r))},Xn=function(n){return this instanceof Xn?(this.v=n,this):new Xn(n)},Ol=function(n,r,a){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var u=a.apply(n,r||[]),_,m=[];return _={},k("next"),k("throw"),k("return"),_[Symbol.asyncIterator]=function(){return this},_;function k(dt){u[dt]&&(_[dt]=function(Ft){return new Promise(function(It,fe){m.push([dt,Ft,It,fe])>1||A(dt,Ft)})})}function A(dt,Ft){try{D(u[dt](Ft))}catch(It){_t(m[0][3],It)}}function D(dt){dt.value instanceof Xn?Promise.resolve(dt.value.v).then(B,R):_t(m[0][2],dt)}function B(dt){A("next",dt)}function R(dt){A("throw",dt)}function _t(dt,Ft){dt(Ft),m.shift(),m.length&&A(m[0][0],m[0][1])}},Ml=function(n){var r,a;return r={},u("next"),u("throw",function(_){throw _}),u("return"),r[Symbol.iterator]=function(){return this},r;function u(_,m){r[_]=n[_]?function(k){return(a=!a)?{value:Xn(n[_](k)),done:_==="return"}:m?m(k):k}:m}},Ll=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n[Symbol.asyncIterator],a;return r?r.call(n):(n=typeof Bs=="function"?Bs(n):n[Symbol.iterator](),a={},u("next"),u("throw"),u("return"),a[Symbol.asyncIterator]=function(){return this},a);function u(m){a[m]=n[m]&&function(k){return new Promise(function(A,D){k=n[m](k),_(A,D,k.done,k.value)})}}function _(m,k,A,D){Promise.resolve(D).then(function(B){m({value:B,done:A})},k)}},Ul=function(n,r){return Object.defineProperty?Object.defineProperty(n,"raw",{value:r}):n.raw=r,n};var e=Object.create?function(n,r){Object.defineProperty(n,"default",{enumerable:!0,value:r})}:function(n,r){n.default=r};Nl=function(n){if(n&&n.__esModule)return n;var r={};if(n!=null)for(var a in n)a!=="default"&&Object.prototype.hasOwnProperty.call(n,a)&&Rs(r,n,a);return e(r,n),r},Pl=function(n){return n&&n.__esModule?n:{default:n}},Vl=function(n,r,a,u){if(a==="a"&&!u)throw new TypeError("Private accessor was defined without a getter");if(typeof r=="function"?n!==r||!u:!r.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return a==="m"?u:a==="a"?u.call(n):u?u.value:r.get(n)},Hl=function(n,r,a,u,_){if(u==="m")throw new TypeError("Private method is not writable");if(u==="a"&&!_)throw new TypeError("Private accessor was defined without a setter");if(typeof r=="function"?n!==r||!_:!r.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return u==="a"?_.call(n,a):_?_.value=a:r.set(n,a),a},zl=function(n,r){if(r===null||typeof r!="object"&&typeof r!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof n=="function"?r===n:n.has(r)},i("__extends",Sl),i("__assign",Il),i("__rest",kl),i("__decorate",Cl),i("__param",Fl),i("__metadata",Al),i("__awaiter",Tl),i("__generator",El),i("__exportStar",xl),i("__createBinding",Rs),i("__values",Bs),i("__read",La),i("__spread",Dl),i("__spreadArrays",Bl),i("__spreadArray",Rl),i("__await",Xn),i("__asyncGenerator",Ol),i("__asyncDelegator",Ml),i("__asyncValues",Ll),i("__makeTemplateObject",Ul),i("__importStar",Nl),i("__importDefault",Pl),i("__classPrivateFieldGet",Vl),i("__classPrivateFieldSet",Hl),i("__classPrivateFieldIn",zl)})});var Od=wl((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(i){return Object.prototype.toString.call(i)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(i){return typeof i=="object"&&i.buffer&&i.buffer.constructor===ArrayBuffer});var createOutputMethod=function(i,t){return function(e){return new Sha256(t,!0).update(e)[i]()}},createMethod=function(i){var t=createOutputMethod("hex",i);NODE_JS&&(t=nodeWrap(t,i)),t.create=function(){return new Sha256(i)},t.update=function(r){return t.create().update(r)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,i)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(i){if(typeof i=="string")return crypto.createHash(algorithm).update(i,"utf8").digest("hex");if(i==null)throw new Error(ERROR);return i.constructor===ArrayBuffer&&(i=new Uint8Array(i)),Array.isArray(i)||ArrayBuffer.isView(i)||i.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(i)).digest("hex"):method(i)};return nodeMethod},createHmacOutputMethod=function(i,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[i]()}},createHmacMethod=function(i){var t=createHmacOutputMethod("hex",i);t.create=function(r){return new HmacSha256(r,i)},t.update=function(r,a){return t.create(r).update(a)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,i)}return t};function Sha256(i,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],i?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=i}Sha256.prototype.update=function(i){if(!this.finalized){var t,e=typeof i;if(e!=="string"){if(e==="object"){if(i===null)throw new Error(ERROR);if(ARRAY_BUFFER&&i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(!Array.isArray(i)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(i)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,r=0,a,u=i.length,_=this.blocks;r<u;){if(this.hashed&&(this.hashed=!1,_[0]=this.block,_[16]=_[1]=_[2]=_[3]=_[4]=_[5]=_[6]=_[7]=_[8]=_[9]=_[10]=_[11]=_[12]=_[13]=_[14]=_[15]=0),t)for(a=this.start;r<u&&a<64;++r)_[a>>2]|=i[r]<<SHIFT[a++&3];else for(a=this.start;r<u&&a<64;++r)n=i.charCodeAt(r),n<128?_[a>>2]|=n<<SHIFT[a++&3]:n<2048?(_[a>>2]|=(192|n>>6)<<SHIFT[a++&3],_[a>>2]|=(128|n&63)<<SHIFT[a++&3]):n<55296||n>=57344?(_[a>>2]|=(224|n>>12)<<SHIFT[a++&3],_[a>>2]|=(128|n>>6&63)<<SHIFT[a++&3],_[a>>2]|=(128|n&63)<<SHIFT[a++&3]):(n=65536+((n&1023)<<10|i.charCodeAt(++r)&1023),_[a>>2]|=(240|n>>18)<<SHIFT[a++&3],_[a>>2]|=(128|n>>12&63)<<SHIFT[a++&3],_[a>>2]|=(128|n>>6&63)<<SHIFT[a++&3],_[a>>2]|=(128|n&63)<<SHIFT[a++&3]);this.lastByteIndex=a,this.bytes+=a-this.start,a>=64?(this.block=_[16],this.start=a-64,this.hash(),this.hashed=!0):this.start=a}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var i=this.blocks,t=this.lastByteIndex;i[16]=this.block,i[t>>2]|=EXTRA[t&3],this.block=i[16],t>=56&&(this.hashed||this.hash(),i[0]=this.block,i[16]=i[1]=i[2]=i[3]=i[4]=i[5]=i[6]=i[7]=i[8]=i[9]=i[10]=i[11]=i[12]=i[13]=i[14]=i[15]=0),i[14]=this.hBytes<<3|this.bytes>>>29,i[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var i=this.h0,t=this.h1,e=this.h2,n=this.h3,r=this.h4,a=this.h5,u=this.h6,_=this.h7,m=this.blocks,k,A,D,B,R,_t,dt,Ft,It,fe,Be;for(k=16;k<64;++k)R=m[k-15],A=(R>>>7|R<<25)^(R>>>18|R<<14)^R>>>3,R=m[k-2],D=(R>>>17|R<<15)^(R>>>19|R<<13)^R>>>10,m[k]=m[k-16]+A+m[k-7]+D<<0;for(Be=t&e,k=0;k<64;k+=4)this.first?(this.is224?(Ft=300032,R=m[0]-1413257819,_=R-150054599<<0,n=R+24177077<<0):(Ft=704751109,R=m[0]-210244248,_=R-1521486534<<0,n=R+143694565<<0),this.first=!1):(A=(i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10),D=(r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7),Ft=i&t,B=Ft^i&e^Be,dt=r&a^~r&u,R=_+D+dt+K[k]+m[k],_t=A+B,_=n+R<<0,n=R+_t<<0),A=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),D=(_>>>6|_<<26)^(_>>>11|_<<21)^(_>>>25|_<<7),It=n&i,B=It^n&t^Ft,dt=_&r^~_&a,R=u+D+dt+K[k+1]+m[k+1],_t=A+B,u=e+R<<0,e=R+_t<<0,A=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),D=(u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7),fe=e&n,B=fe^e&i^It,dt=u&_^~u&r,R=a+D+dt+K[k+2]+m[k+2],_t=A+B,a=t+R<<0,t=R+_t<<0,A=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),D=(a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7),Be=t&e,B=Be^t&n^fe,dt=a&u^~a&_,R=r+D+dt+K[k+3]+m[k+3],_t=A+B,r=i+R<<0,i=R+_t<<0;this.h0=this.h0+i<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+r<<0,this.h5=this.h5+a<<0,this.h6=this.h6+u<<0,this.h7=this.h7+_<<0},Sha256.prototype.hex=function(){this.finalize();var i=this.h0,t=this.h1,e=this.h2,n=this.h3,r=this.h4,a=this.h5,u=this.h6,_=this.h7,m=HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]+HEX_CHARS[u>>28&15]+HEX_CHARS[u>>24&15]+HEX_CHARS[u>>20&15]+HEX_CHARS[u>>16&15]+HEX_CHARS[u>>12&15]+HEX_CHARS[u>>8&15]+HEX_CHARS[u>>4&15]+HEX_CHARS[u&15];return this.is224||(m+=HEX_CHARS[_>>28&15]+HEX_CHARS[_>>24&15]+HEX_CHARS[_>>20&15]+HEX_CHARS[_>>16&15]+HEX_CHARS[_>>12&15]+HEX_CHARS[_>>8&15]+HEX_CHARS[_>>4&15]+HEX_CHARS[_&15]),m},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var i=this.h0,t=this.h1,e=this.h2,n=this.h3,r=this.h4,a=this.h5,u=this.h6,_=this.h7,m=[i>>24&255,i>>16&255,i>>8&255,i&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,r>>24&255,r>>16&255,r>>8&255,r&255,a>>24&255,a>>16&255,a>>8&255,a&255,u>>24&255,u>>16&255,u>>8&255,u&255];return this.is224||m.push(_>>24&255,_>>16&255,_>>8&255,_&255),m},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var i=new ArrayBuffer(this.is224?28:32),t=new DataView(i);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),i};function HmacSha256(i,t,e){var n,r=typeof i;if(r==="string"){var a=[],u=i.length,_=0,m;for(n=0;n<u;++n)m=i.charCodeAt(n),m<128?a[_++]=m:m<2048?(a[_++]=192|m>>6,a[_++]=128|m&63):m<55296||m>=57344?(a[_++]=224|m>>12,a[_++]=128|m>>6&63,a[_++]=128|m&63):(m=65536+((m&1023)<<10|i.charCodeAt(++n)&1023),a[_++]=240|m>>18,a[_++]=128|m>>12&63,a[_++]=128|m>>6&63,a[_++]=128|m&63);i=a}else if(r==="object"){if(i===null)throw new Error(ERROR);if(ARRAY_BUFFER&&i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(!Array.isArray(i)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(i)))throw new Error(ERROR)}else throw new Error(ERROR);i.length>64&&(i=new Sha256(t,!0).update(i).array());var k=[],A=[];for(n=0;n<64;++n){var D=i[n]||0;k[n]=92^D,A[n]=54^D}Sha256.call(this,t,e),this.update(A),this.oKeyPad=k,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var i=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(i),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var $I={};kn($I,{registerWorker:()=>Ud});var Yl=Ma(Wl(),1),{__extends:nk,__assign:rk,__rest:$l,__decorate:sk,__param:ok,__metadata:ak,__awaiter:L,__generator:ck,__exportStar:lk,__createBinding:uk,__values:dk,__read:fk,__spread:hk,__spreadArrays:_k,__spreadArray:pk,__await:at,__asyncGenerator:ge,__asyncDelegator:Kn,__asyncValues:ze,__makeTemplateObject:yk,__importStar:mk,__importDefault:vk,__classPrivateFieldGet:bk,__classPrivateFieldSet:gk,__classPrivateFieldIn:wk}=Yl.default;var za={};kn(za,{compareArrayLike:()=>Ha,joinUint8Arrays:()=>Oe,memcpy:()=>Jn,rebaseValueOffsets:()=>Br,toArrayBufferView:()=>ct,toArrayBufferViewAsyncIterator:()=>ti,toArrayBufferViewIterator:()=>yi,toBigInt64Array:()=>aj,toBigUint64Array:()=>uj,toFloat32Array:()=>dj,toFloat32ArrayAsyncIterator:()=>Fj,toFloat32ArrayIterator:()=>bj,toFloat64Array:()=>fj,toFloat64ArrayAsyncIterator:()=>Aj,toFloat64ArrayIterator:()=>gj,toInt16Array:()=>oj,toInt16ArrayAsyncIterator:()=>Sj,toInt16ArrayIterator:()=>pj,toInt32Array:()=>Cn,toInt32ArrayAsyncIterator:()=>Ij,toInt32ArrayIterator:()=>yj,toInt8Array:()=>sj,toInt8ArrayAsyncIterator:()=>jj,toInt8ArrayIterator:()=>_j,toUint16Array:()=>cj,toUint16ArrayAsyncIterator:()=>kj,toUint16ArrayIterator:()=>mj,toUint32Array:()=>lj,toUint32ArrayAsyncIterator:()=>Cj,toUint32ArrayIterator:()=>vj,toUint8Array:()=>q,toUint8ArrayAsyncIterator:()=>Va,toUint8ArrayIterator:()=>Pa,toUint8ClampedArray:()=>hj,toUint8ClampedArrayAsyncIterator:()=>Tj,toUint8ClampedArrayIterator:()=>wj});var ej=new TextDecoder("utf-8"),xr=i=>ej.decode(i),ij=new TextEncoder,sn=i=>ij.encode(i);var[Ik,Ms]=(()=>{let i=()=>{throw new Error("BigInt is not available in this environment")};function t(){throw i()}return t.asIntN=()=>{throw i()},t.asUintN=()=>{throw i()},typeof BigInt<"u"?[BigInt,!0]:[t,!1]})(),[We,kk]=(()=>{let i=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw i()}static from(){throw i()}constructor(){throw i()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[Ye,Ck]=(()=>{let i=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw i()}static from(){throw i()}constructor(){throw i()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var nj=i=>typeof i=="number",Gl=i=>typeof i=="boolean",Xt=i=>typeof i=="function",_e=i=>i!=null&&Object(i)===i,Qe=i=>_e(i)&&Xt(i.then);var Ze=i=>_e(i)&&Xt(i[Symbol.iterator]),$e=i=>_e(i)&&Xt(i[Symbol.asyncIterator]),Ls=i=>_e(i)&&_e(i.schema);var Us=i=>_e(i)&&"done"in i&&"value"in i;var Ns=i=>_e(i)&&Xt(i.stat)&&nj(i.fd);var Ps=i=>_e(i)&&Dr(i.body),Vs=i=>"_getDOMStream"in i&&"_getNodeStream"in i,Xl=i=>_e(i)&&Xt(i.abort)&&Xt(i.getWriter)&&!Vs(i),Dr=i=>_e(i)&&Xt(i.cancel)&&Xt(i.getReader)&&!Vs(i),Kl=i=>_e(i)&&Xt(i.end)&&Xt(i.write)&&Gl(i.writable)&&!Vs(i),Hs=i=>_e(i)&&Xt(i.read)&&Xt(i.pipe)&&Gl(i.readable)&&!Vs(i),Jl=i=>_e(i)&&Xt(i.clear)&&Xt(i.bytes)&&Xt(i.position)&&Xt(i.setPosition)&&Xt(i.capacity)&&Xt(i.getBufferIdentifier)&&Xt(i.createLong);var Na=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function rj(i){let t=i[0]?[i[0]]:[],e,n,r,a;for(let u,_,m=0,k=0,A=i.length;++m<A;){if(u=t[k],_=i[m],!u||!_||u.buffer!==_.buffer||_.byteOffset<u.byteOffset){_&&(t[++k]=_);continue}if({byteOffset:e,byteLength:r}=u,{byteOffset:n,byteLength:a}=_,e+r<n||n+a<e){_&&(t[++k]=_);continue}t[k]=new Uint8Array(u.buffer,e,n-e+a)}return t}function Jn(i,t,e=0,n=t.byteLength){let r=i.byteLength,a=new Uint8Array(i.buffer,i.byteOffset,r),u=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,r));return a.set(u,e),i}function Oe(i,t){let e=rj(i),n=e.reduce((A,D)=>A+D.byteLength,0),r,a,u,_=0,m=-1,k=Math.min(t||Number.POSITIVE_INFINITY,n);for(let A=e.length;++m<A;){if(r=e[m],a=r.subarray(0,Math.min(r.length,k-_)),k<=_+a.length){a.length<r.length?e[m]=r.subarray(a.length):a.length===r.length&&m++,u?Jn(u,a,_):u=a;break}Jn(u||(u=new Uint8Array(k)),a,_),_+=a.length}return[u||new Uint8Array(0),e.slice(m),n-(u?u.byteLength:0)]}function ct(i,t){let e=Us(t)?t.value:t;return e instanceof i?i===Uint8Array?new i(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=sn(e)),e instanceof ArrayBuffer?new i(e):e instanceof Na?new i(e):Jl(e)?ct(i,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new i(0):new i(e.buffer,e.byteOffset,e.byteLength/i.BYTES_PER_ELEMENT):i.from(e)):new i(0)}var sj=i=>ct(Int8Array,i),oj=i=>ct(Int16Array,i),Cn=i=>ct(Int32Array,i),aj=i=>ct(We,i),q=i=>ct(Uint8Array,i),cj=i=>ct(Uint16Array,i),lj=i=>ct(Uint32Array,i),uj=i=>ct(Ye,i),dj=i=>ct(Float32Array,i),fj=i=>ct(Float64Array,i),hj=i=>ct(Uint8ClampedArray,i),Ua=i=>(i.next(),i);function*yi(i,t){let e=function*(r){yield r},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Na?e(t):Ze(t)?t:e(t);return yield*Ua(function*(r){let a=null;do a=r.next(yield ct(i,a));while(!a.done)}(n[Symbol.iterator]())),new i}var _j=i=>yi(Int8Array,i),pj=i=>yi(Int16Array,i),yj=i=>yi(Int32Array,i),Pa=i=>yi(Uint8Array,i),mj=i=>yi(Uint16Array,i),vj=i=>yi(Uint32Array,i),bj=i=>yi(Float32Array,i),gj=i=>yi(Float64Array,i),wj=i=>yi(Uint8ClampedArray,i);function ti(i,t){return ge(this,arguments,function*(){if(Qe(t))return yield at(yield at(yield*Kn(ze(ti(i,yield at(t))))));let n=function(u){return ge(this,arguments,function*(){yield yield at(yield at(u))})},r=function(u){return ge(this,arguments,function*(){yield at(yield*Kn(ze(Ua(function*(_){let m=null;do m=_.next(yield m==null?void 0:m.value);while(!m.done)}(u[Symbol.iterator]())))))})},a=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Na?n(t):Ze(t)?r(t):$e(t)?t:n(t);return yield at(yield*Kn(ze(Ua(function(u){return ge(this,arguments,function*(){let _=null;do _=yield at(u.next(yield yield at(ct(i,_))));while(!_.done)})}(a[Symbol.asyncIterator]()))))),yield at(new i)})}var jj=i=>ti(Int8Array,i),Sj=i=>ti(Int16Array,i),Ij=i=>ti(Int32Array,i),Va=i=>ti(Uint8Array,i),kj=i=>ti(Uint16Array,i),Cj=i=>ti(Uint32Array,i),Fj=i=>ti(Float32Array,i),Aj=i=>ti(Float64Array,i),Tj=i=>ti(Uint8ClampedArray,i);function Br(i,t,e){if(i!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=i}return e}function Ha(i,t){let e=0,n=i.length;if(n!==t.length)return!1;if(n>0)do if(i[e]!==t[e])return!1;while(++e<n);return!0}var ne={fromIterable(i){return zs(Ej(i))},fromAsyncIterable(i){return zs(xj(i))},fromDOMStream(i){return zs(Dj(i))},fromNodeStream(i){return zs(Bj(i))},toDOMStream(i,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(i,t){throw new Error('"toNodeStream" not available in this environment')}},zs=i=>(i.next(),i);function*Ej(i){let t,e=!1,n=[],r,a,u,_=0;function m(){return a==="peek"?Oe(n,u)[0]:([r,n,_]=Oe(n,u),r)}({cmd:a,size:u}=yield null);let k=Pa(i)[Symbol.iterator]();try{do if({done:t,value:r}=Number.isNaN(u-_)?k.next():k.next(u-_),!t&&r.byteLength>0&&(n.push(r),_+=r.byteLength),t||u<=_)do({cmd:a,size:u}=yield m());while(u<_);while(!t)}catch(A){(e=!0)&&typeof k.throw=="function"&&k.throw(A)}finally{e===!1&&typeof k.return=="function"&&k.return(null)}return null}function xj(i){return ge(this,arguments,function*(){let e,n=!1,r=[],a,u,_,m=0;function k(){return u==="peek"?Oe(r,_)[0]:([a,r,m]=Oe(r,_),a)}({cmd:u,size:_}=yield yield at(null));let A=Va(i)[Symbol.asyncIterator]();try{do if({done:e,value:a}=Number.isNaN(_-m)?yield at(A.next()):yield at(A.next(_-m)),!e&&a.byteLength>0&&(r.push(a),m+=a.byteLength),e||_<=m)do({cmd:u,size:_}=yield yield at(k()));while(_<m);while(!e)}catch(D){(n=!0)&&typeof A.throw=="function"&&(yield at(A.throw(D)))}finally{n===!1&&typeof A.return=="function"&&(yield at(A.return(new Uint8Array(0))))}return yield at(null)})}function Dj(i){return ge(this,arguments,function*(){let e=!1,n=!1,r=[],a,u,_,m=0;function k(){return u==="peek"?Oe(r,_)[0]:([a,r,m]=Oe(r,_),a)}({cmd:u,size:_}=yield yield at(null));let A=new Ya(i);try{do if({done:e,value:a}=Number.isNaN(_-m)?yield at(A.read()):yield at(A.read(_-m)),!e&&a.byteLength>0&&(r.push(q(a)),m+=a.byteLength),e||_<=m)do({cmd:u,size:_}=yield yield at(k()));while(_<m);while(!e)}catch(D){(n=!0)&&(yield at(A.cancel(D)))}finally{n===!1?yield at(A.cancel()):i.locked&&A.releaseLock()}return yield at(null)})}var Ya=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return L(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return L(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=q(e)),e})}},Wa=(i,t)=>{let e=r=>n([t,r]),n;return[t,e,new Promise(r=>(n=r)&&i.once(t,e))]};function Bj(i){return ge(this,arguments,function*(){let e=[],n="error",r=!1,a=null,u,_,m=0,k=[],A;function D(){return u==="peek"?Oe(k,_)[0]:([A,k,m]=Oe(k,_),A)}if({cmd:u,size:_}=yield yield at(null),i.isTTY)return yield yield at(new Uint8Array(0)),yield at(null);try{e[0]=Wa(i,"end"),e[1]=Wa(i,"error");do{if(e[2]=Wa(i,"readable"),[n,a]=yield at(Promise.race(e.map(R=>R[2]))),n==="error")break;if((r=n==="end")||(Number.isFinite(_-m)?(A=q(i.read(_-m)),A.byteLength<_-m&&(A=q(i.read()))):A=q(i.read()),A.byteLength>0&&(k.push(A),m+=A.byteLength)),r||_<=m)do({cmd:u,size:_}=yield yield at(D()));while(_<m)}while(!r)}finally{yield at(B(e,n==="error"?a:null))}return yield at(null);function B(R,_t){return A=k=null,new Promise((dt,Ft)=>{for(let[It,fe]of R)i.off(It,fe);try{let It=i.destroy;It&&It.call(i,_t),_t=void 0}catch(It){_t=It||_t}finally{_t!=null?Ft(_t):dt()}})}})}var Jt;(function(i){i[i.V1=0]="V1",i[i.V2=1]="V2",i[i.V3=2]="V3",i[i.V4=3]="V4",i[i.V5=4]="V5"})(Jt||(Jt={}));var Ot;(function(i){i[i.Sparse=0]="Sparse",i[i.Dense=1]="Dense"})(Ot||(Ot={}));var Dt;(function(i){i[i.HALF=0]="HALF",i[i.SINGLE=1]="SINGLE",i[i.DOUBLE=2]="DOUBLE"})(Dt||(Dt={}));var re;(function(i){i[i.DAY=0]="DAY",i[i.MILLISECOND=1]="MILLISECOND"})(re||(re={}));var ut;(function(i){i[i.SECOND=0]="SECOND",i[i.MILLISECOND=1]="MILLISECOND",i[i.MICROSECOND=2]="MICROSECOND",i[i.NANOSECOND=3]="NANOSECOND"})(ut||(ut={}));var pe;(function(i){i[i.YEAR_MONTH=0]="YEAR_MONTH",i[i.DAY_TIME=1]="DAY_TIME",i[i.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(pe||(pe={}));var pt;(function(i){i[i.NONE=0]="NONE",i[i.Schema=1]="Schema",i[i.DictionaryBatch=2]="DictionaryBatch",i[i.RecordBatch=3]="RecordBatch",i[i.Tensor=4]="Tensor",i[i.SparseTensor=5]="SparseTensor"})(pt||(pt={}));var F;(function(i){i[i.NONE=0]="NONE",i[i.Null=1]="Null",i[i.Int=2]="Int",i[i.Float=3]="Float",i[i.Binary=4]="Binary",i[i.Utf8=5]="Utf8",i[i.Bool=6]="Bool",i[i.Decimal=7]="Decimal",i[i.Date=8]="Date",i[i.Time=9]="Time",i[i.Timestamp=10]="Timestamp",i[i.Interval=11]="Interval",i[i.List=12]="List",i[i.Struct=13]="Struct",i[i.Union=14]="Union",i[i.FixedSizeBinary=15]="FixedSizeBinary",i[i.FixedSizeList=16]="FixedSizeList",i[i.Map=17]="Map",i[i.Dictionary=-1]="Dictionary",i[i.Int8=-2]="Int8",i[i.Int16=-3]="Int16",i[i.Int32=-4]="Int32",i[i.Int64=-5]="Int64",i[i.Uint8=-6]="Uint8",i[i.Uint16=-7]="Uint16",i[i.Uint32=-8]="Uint32",i[i.Uint64=-9]="Uint64",i[i.Float16=-10]="Float16",i[i.Float32=-11]="Float32",i[i.Float64=-12]="Float64",i[i.DateDay=-13]="DateDay",i[i.DateMillisecond=-14]="DateMillisecond",i[i.TimestampSecond=-15]="TimestampSecond",i[i.TimestampMillisecond=-16]="TimestampMillisecond",i[i.TimestampMicrosecond=-17]="TimestampMicrosecond",i[i.TimestampNanosecond=-18]="TimestampNanosecond",i[i.TimeSecond=-19]="TimeSecond",i[i.TimeMillisecond=-20]="TimeMillisecond",i[i.TimeMicrosecond=-21]="TimeMicrosecond",i[i.TimeNanosecond=-22]="TimeNanosecond",i[i.DenseUnion=-23]="DenseUnion",i[i.SparseUnion=-24]="SparseUnion",i[i.IntervalDayTime=-25]="IntervalDayTime",i[i.IntervalYearMonth=-26]="IntervalYearMonth"})(F||(F={}));var Ge;(function(i){i[i.OFFSET=0]="OFFSET",i[i.DATA=1]="DATA",i[i.VALIDITY=2]="VALIDITY",i[i.TYPE=3]="TYPE"})(Ge||(Ge={}));var cc={};kn(cc,{clampIndex:()=>IS,clampRange:()=>Mr,createElementComparator:()=>ln});var Rj=void 0;function ei(i){if(i===null)return"null";if(i===Rj)return"undefined";switch(typeof i){case"number":return`${i}`;case"bigint":return`${i}`;case"string":return`"${i}"`}return typeof i[Symbol.toPrimitive]=="function"?i[Symbol.toPrimitive]("string"):ArrayBuffer.isView(i)?i instanceof We||i instanceof Ye?`[${[...i].map(t=>ei(t))}]`:`[${i}]`:ArrayBuffer.isView(i)?`[${i}]`:JSON.stringify(i,(t,e)=>typeof e=="bigint"?`${e}`:e)}var Ga={};kn(Ga,{BN:()=>Fn,bignumToBigInt:()=>Ws,bignumToString:()=>on,isArrowBigNumSymbol:()=>ql});var ql=Symbol.for("isArrowBigNum");function ii(i,...t){return t.length===0?Object.setPrototypeOf(ct(this.TypedArray,i),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(i,...t),this.constructor.prototype)}ii.prototype[ql]=!0;ii.prototype.toJSON=function(){return`"${on(this)}"`};ii.prototype.valueOf=function(){return Ql(this)};ii.prototype.toString=function(){return on(this)};ii.prototype[Symbol.toPrimitive]=function(i="default"){switch(i){case"number":return Ql(this);case"string":return on(this);case"default":return Ws(this)}return on(this)};function qn(...i){return ii.apply(this,i)}function Qn(...i){return ii.apply(this,i)}function Rr(...i){return ii.apply(this,i)}Object.setPrototypeOf(qn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(Qn.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(Rr.prototype,Object.create(Uint32Array.prototype));Object.assign(qn.prototype,ii.prototype,{constructor:qn,signed:!0,TypedArray:Int32Array,BigIntArray:We});Object.assign(Qn.prototype,ii.prototype,{constructor:Qn,signed:!1,TypedArray:Uint32Array,BigIntArray:Ye});Object.assign(Rr.prototype,ii.prototype,{constructor:Rr,signed:!0,TypedArray:Uint32Array,BigIntArray:Ye});function Ql(i){let{buffer:t,byteOffset:e,length:n,signed:r}=i,a=new Ye(t,e,n),u=r&&a[a.length-1]&BigInt(1)<<BigInt(63),_=BigInt(u?1:0),m=BigInt(0);if(u){for(let k of a)_+=~k*(BigInt(1)<<BigInt(32)*m++);_*=BigInt(-1)}else for(let k of a)_+=k*(BigInt(1)<<BigInt(32)*m++);return _}var on,Ws;Ms?(Ws=i=>i.byteLength===8?new i.BigIntArray(i.buffer,i.byteOffset,1)[0]:$a(i),on=i=>i.byteLength===8?`${new i.BigIntArray(i.buffer,i.byteOffset,1)[0]}`:$a(i)):(on=$a,Ws=on);function $a(i){let t="",e=new Uint32Array(2),n=new Uint16Array(i.buffer,i.byteOffset,i.byteLength/2),r=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),a=-1,u=n.length-1;do{for(e[0]=n[a=0];a<u;)n[a++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[a];n[a]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t=`${e[0]}${t}`}while(r[0]||r[1]||r[2]||r[3]);return t!=null?t:"0"}var Fn=class{static new(t,e){switch(e){case!0:return new qn(t);case!1:return new Qn(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case We:return new qn(t)}return t.byteLength===16?new Rr(t):new Qn(t)}static signed(t){return new qn(t)}static unsigned(t){return new Qn(t)}static decimal(t){return new Rr(t)}constructor(t,e){return Fn.new(t,e)}};var Zl,tu,eu,iu,nu,ru,su,ou,au,cu,lu,uu,du,fu,hu,_u,pu,yu,mu,V=class{static isNull(t){return(t==null?void 0:t.typeId)===F.Null}static isInt(t){return(t==null?void 0:t.typeId)===F.Int}static isFloat(t){return(t==null?void 0:t.typeId)===F.Float}static isBinary(t){return(t==null?void 0:t.typeId)===F.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===F.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===F.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===F.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===F.Date}static isTime(t){return(t==null?void 0:t.typeId)===F.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===F.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===F.Interval}static isList(t){return(t==null?void 0:t.typeId)===F.List}static isStruct(t){return(t==null?void 0:t.typeId)===F.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===F.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===F.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===F.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===F.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===F.Dictionary}static isDenseUnion(t){return V.isUnion(t)&&t.mode===Ot.Dense}static isSparseUnion(t){return V.isUnion(t)&&t.mode===Ot.Sparse}get typeId(){return F.NONE}};Zl=Symbol.toStringTag;V[Zl]=(i=>(i.children=null,i.ArrayType=Array,i[Symbol.toStringTag]="DataType"))(V.prototype);var ye=class extends V{toString(){return"Null"}get typeId(){return F.Null}};tu=Symbol.toStringTag;ye[tu]=(i=>i[Symbol.toStringTag]="Null")(ye.prototype);var Pt=class extends V{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return F.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?We:Ye}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`${this.isSigned?"I":"Ui"}nt${this.bitWidth}`}};eu=Symbol.toStringTag;Pt[eu]=(i=>(i.isSigned=null,i.bitWidth=null,i[Symbol.toStringTag]="Int"))(Pt.prototype);var Ys=class extends Pt{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},$s=class extends Pt{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},mi=class extends Pt{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},Gs=class extends Pt{constructor(){super(!0,64)}get ArrayType(){return We}},Xs=class extends Pt{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},Ks=class extends Pt{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},Js=class extends Pt{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},qs=class extends Pt{constructor(){super(!1,64)}get ArrayType(){return Ye}};Object.defineProperty(Ys.prototype,"ArrayType",{value:Int8Array});Object.defineProperty($s.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(mi.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(Gs.prototype,"ArrayType",{value:We});Object.defineProperty(Xs.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(Ks.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Js.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(qs.prototype,"ArrayType",{value:Ye});var we=class extends V{constructor(t){super(),this.precision=t}get typeId(){return F.Float}get ArrayType(){switch(this.precision){case Dt.HALF:return Uint16Array;case Dt.SINGLE:return Float32Array;case Dt.DOUBLE:return Float64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`Float${this.precision<<5||16}`}};iu=Symbol.toStringTag;we[iu]=(i=>(i.precision=null,i[Symbol.toStringTag]="Float"))(we.prototype);var Qs=class extends we{constructor(){super(Dt.HALF)}},Zs=class extends we{constructor(){super(Dt.SINGLE)}},to=class extends we{constructor(){super(Dt.DOUBLE)}};Object.defineProperty(Qs.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Zs.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(to.prototype,"ArrayType",{value:Float64Array});var Mi=class extends V{constructor(){super()}get typeId(){return F.Binary}toString(){return"Binary"}};nu=Symbol.toStringTag;Mi[nu]=(i=>(i.ArrayType=Uint8Array,i[Symbol.toStringTag]="Binary"))(Mi.prototype);var Li=class extends V{constructor(){super()}get typeId(){return F.Utf8}toString(){return"Utf8"}};ru=Symbol.toStringTag;Li[ru]=(i=>(i.ArrayType=Uint8Array,i[Symbol.toStringTag]="Utf8"))(Li.prototype);var Ui=class extends V{constructor(){super()}get typeId(){return F.Bool}toString(){return"Bool"}};su=Symbol.toStringTag;Ui[su]=(i=>(i.ArrayType=Uint8Array,i[Symbol.toStringTag]="Bool"))(Ui.prototype);var Ni=class extends V{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return F.Decimal}toString(){return`Decimal[${this.precision}e${this.scale>0?"+":""}${this.scale}]`}};ou=Symbol.toStringTag;Ni[ou]=(i=>(i.scale=null,i.precision=null,i.ArrayType=Uint32Array,i[Symbol.toStringTag]="Decimal"))(Ni.prototype);var Pi=class extends V{constructor(t){super(),this.unit=t}get typeId(){return F.Date}toString(){return`Date${(this.unit+1)*32}<${re[this.unit]}>`}};au=Symbol.toStringTag;Pi[au]=(i=>(i.unit=null,i.ArrayType=Int32Array,i[Symbol.toStringTag]="Date"))(Pi.prototype);var ni=class extends V{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return F.Time}toString(){return`Time${this.bitWidth}<${ut[this.unit]}>`}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return We}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}};cu=Symbol.toStringTag;ni[cu]=(i=>(i.unit=null,i.bitWidth=null,i[Symbol.toStringTag]="Time"))(ni.prototype);var Vi=class extends V{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return F.Timestamp}toString(){return`Timestamp<${ut[this.unit]}${this.timezone?`, ${this.timezone}`:""}>`}};lu=Symbol.toStringTag;Vi[lu]=(i=>(i.unit=null,i.timezone=null,i.ArrayType=Int32Array,i[Symbol.toStringTag]="Timestamp"))(Vi.prototype);var Hi=class extends V{constructor(t){super(),this.unit=t}get typeId(){return F.Interval}toString(){return`Interval<${pe[this.unit]}>`}};uu=Symbol.toStringTag;Hi[uu]=(i=>(i.unit=null,i.ArrayType=Int32Array,i[Symbol.toStringTag]="Interval"))(Hi.prototype);var ri=class extends V{constructor(t){super(),this.children=[t]}get typeId(){return F.List}toString(){return`List<${this.valueType}>`}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};du=Symbol.toStringTag;ri[du]=(i=>(i.children=null,i[Symbol.toStringTag]="List"))(ri.prototype);var At=class extends V{constructor(t){super(),this.children=t}get typeId(){return F.Struct}toString(){return`Struct<{${this.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};fu=Symbol.toStringTag;At[fu]=(i=>(i.children=null,i[Symbol.toStringTag]="Struct"))(At.prototype);var si=class extends V{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((r,a,u)=>(r[a]=u)&&r||r,Object.create(null))}get typeId(){return F.Union}toString(){return`${this[Symbol.toStringTag]}<${this.children.map(t=>`${t.type}`).join(" | ")}>`}};hu=Symbol.toStringTag;si[hu]=(i=>(i.mode=null,i.typeIds=null,i.children=null,i.typeIdToChildIndex=null,i.ArrayType=Int8Array,i[Symbol.toStringTag]="Union"))(si.prototype);var zi=class extends V{constructor(t){super(),this.byteWidth=t}get typeId(){return F.FixedSizeBinary}toString(){return`FixedSizeBinary[${this.byteWidth}]`}};_u=Symbol.toStringTag;zi[_u]=(i=>(i.byteWidth=null,i.ArrayType=Uint8Array,i[Symbol.toStringTag]="FixedSizeBinary"))(zi.prototype);var oi=class extends V{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return F.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return`FixedSizeList[${this.listSize}]<${this.valueType}>`}};pu=Symbol.toStringTag;oi[pu]=(i=>(i.children=null,i.listSize=null,i[Symbol.toStringTag]="FixedSizeList"))(oi.prototype);var ai=class extends V{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return F.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return`Map<{${this.children[0].type.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};yu=Symbol.toStringTag;ai[yu]=(i=>(i.children=null,i.keysSorted=null,i[Symbol.toStringTag]="Map_"))(ai.prototype);var Oj=(i=>()=>++i)(-1),Me=class extends V{constructor(t,e,n,r){super(),this.indices=e,this.dictionary=t,this.isOrdered=r||!1,this.id=n==null?Oj():typeof n=="number"?n:n.low}get typeId(){return F.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return`Dictionary<${this.indices}, ${this.dictionary}>`}};mu=Symbol.toStringTag;Me[mu]=(i=>(i.id=null,i.indices=null,i.isOrdered=null,i.dictionary=null,i[Symbol.toStringTag]="Dictionary"))(Me.prototype);function Le(i){let t=i;switch(i.typeId){case F.Decimal:return i.bitWidth/32;case F.Timestamp:return 2;case F.Date:return 1+t.unit;case F.Interval:return 1+t.unit;case F.FixedSizeList:return t.listSize;case F.FixedSizeBinary:return t.byteWidth;default:return 1}}var Y=class{visitMany(t,...e){return t.map((n,r)=>this.visit(n,...e.map(a=>a[r])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return Mj(this,t,e)}getVisitFnByTypeId(t,e=!0){return Zn(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function Mj(i,t,e=!0){return typeof t=="number"?Zn(i,t,e):typeof t=="string"&&t in F?Zn(i,F[t],e):t&&t instanceof V?Zn(i,vu(t),e):(t==null?void 0:t.type)&&t.type instanceof V?Zn(i,vu(t.type),e):Zn(i,F.NONE,e)}function Zn(i,t,e=!0){let n=null;switch(t){case F.Null:n=i.visitNull;break;case F.Bool:n=i.visitBool;break;case F.Int:n=i.visitInt;break;case F.Int8:n=i.visitInt8||i.visitInt;break;case F.Int16:n=i.visitInt16||i.visitInt;break;case F.Int32:n=i.visitInt32||i.visitInt;break;case F.Int64:n=i.visitInt64||i.visitInt;break;case F.Uint8:n=i.visitUint8||i.visitInt;break;case F.Uint16:n=i.visitUint16||i.visitInt;break;case F.Uint32:n=i.visitUint32||i.visitInt;break;case F.Uint64:n=i.visitUint64||i.visitInt;break;case F.Float:n=i.visitFloat;break;case F.Float16:n=i.visitFloat16||i.visitFloat;break;case F.Float32:n=i.visitFloat32||i.visitFloat;break;case F.Float64:n=i.visitFloat64||i.visitFloat;break;case F.Utf8:n=i.visitUtf8;break;case F.Binary:n=i.visitBinary;break;case F.FixedSizeBinary:n=i.visitFixedSizeBinary;break;case F.Date:n=i.visitDate;break;case F.DateDay:n=i.visitDateDay||i.visitDate;break;case F.DateMillisecond:n=i.visitDateMillisecond||i.visitDate;break;case F.Timestamp:n=i.visitTimestamp;break;case F.TimestampSecond:n=i.visitTimestampSecond||i.visitTimestamp;break;case F.TimestampMillisecond:n=i.visitTimestampMillisecond||i.visitTimestamp;break;case F.TimestampMicrosecond:n=i.visitTimestampMicrosecond||i.visitTimestamp;break;case F.TimestampNanosecond:n=i.visitTimestampNanosecond||i.visitTimestamp;break;case F.Time:n=i.visitTime;break;case F.TimeSecond:n=i.visitTimeSecond||i.visitTime;break;case F.TimeMillisecond:n=i.visitTimeMillisecond||i.visitTime;break;case F.TimeMicrosecond:n=i.visitTimeMicrosecond||i.visitTime;break;case F.TimeNanosecond:n=i.visitTimeNanosecond||i.visitTime;break;case F.Decimal:n=i.visitDecimal;break;case F.List:n=i.visitList;break;case F.Struct:n=i.visitStruct;break;case F.Union:n=i.visitUnion;break;case F.DenseUnion:n=i.visitDenseUnion||i.visitUnion;break;case F.SparseUnion:n=i.visitSparseUnion||i.visitUnion;break;case F.Dictionary:n=i.visitDictionary;break;case F.Interval:n=i.visitInterval;break;case F.IntervalDayTime:n=i.visitIntervalDayTime||i.visitInterval;break;case F.IntervalYearMonth:n=i.visitIntervalYearMonth||i.visitInterval;break;case F.FixedSizeList:n=i.visitFixedSizeList;break;case F.Map:n=i.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error(`Unrecognized type '${F[t]}'`)}function vu(i){switch(i.typeId){case F.Null:return F.Null;case F.Int:{let{bitWidth:t,isSigned:e}=i;switch(t){case 8:return e?F.Int8:F.Uint8;case 16:return e?F.Int16:F.Uint16;case 32:return e?F.Int32:F.Uint32;case 64:return e?F.Int64:F.Uint64}return F.Int}case F.Float:switch(i.precision){case Dt.HALF:return F.Float16;case Dt.SINGLE:return F.Float32;case Dt.DOUBLE:return F.Float64}return F.Float;case F.Binary:return F.Binary;case F.Utf8:return F.Utf8;case F.Bool:return F.Bool;case F.Decimal:return F.Decimal;case F.Time:switch(i.unit){case ut.SECOND:return F.TimeSecond;case ut.MILLISECOND:return F.TimeMillisecond;case ut.MICROSECOND:return F.TimeMicrosecond;case ut.NANOSECOND:return F.TimeNanosecond}return F.Time;case F.Timestamp:switch(i.unit){case ut.SECOND:return F.TimestampSecond;case ut.MILLISECOND:return F.TimestampMillisecond;case ut.MICROSECOND:return F.TimestampMicrosecond;case ut.NANOSECOND:return F.TimestampNanosecond}return F.Timestamp;case F.Date:switch(i.unit){case re.DAY:return F.DateDay;case re.MILLISECOND:return F.DateMillisecond}return F.Date;case F.Interval:switch(i.unit){case pe.DAY_TIME:return F.IntervalDayTime;case pe.YEAR_MONTH:return F.IntervalYearMonth}return F.Interval;case F.Map:return F.Map;case F.List:return F.List;case F.Struct:return F.Struct;case F.Union:switch(i.mode){case Ot.Dense:return F.DenseUnion;case Ot.Sparse:return F.SparseUnion}return F.Union;case F.FixedSizeBinary:return F.FixedSizeBinary;case F.FixedSizeList:return F.FixedSizeList;case F.Dictionary:return F.Dictionary}throw new Error(`Unrecognized type '${F[i.typeId]}'`)}Y.prototype.visitInt8=null;Y.prototype.visitInt16=null;Y.prototype.visitInt32=null;Y.prototype.visitInt64=null;Y.prototype.visitUint8=null;Y.prototype.visitUint16=null;Y.prototype.visitUint32=null;Y.prototype.visitUint64=null;Y.prototype.visitFloat16=null;Y.prototype.visitFloat32=null;Y.prototype.visitFloat64=null;Y.prototype.visitDateDay=null;Y.prototype.visitDateMillisecond=null;Y.prototype.visitTimestampSecond=null;Y.prototype.visitTimestampMillisecond=null;Y.prototype.visitTimestampMicrosecond=null;Y.prototype.visitTimestampNanosecond=null;Y.prototype.visitTimeSecond=null;Y.prototype.visitTimeMillisecond=null;Y.prototype.visitTimeMicrosecond=null;Y.prototype.visitTimeNanosecond=null;Y.prototype.visitDenseUnion=null;Y.prototype.visitSparseUnion=null;Y.prototype.visitIntervalDayTime=null;Y.prototype.visitIntervalYearMonth=null;var Xa={};kn(Xa,{float64ToUint16:()=>Or,uint16ToFloat64:()=>eo});var bu=new Float64Array(1),tr=new Uint32Array(bu.buffer);function eo(i){let t=(i&31744)>>10,e=(i&1023)/1024,n=Math.pow(-1,(i&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function Or(i){if(i!==i)return 32256;bu[0]=i;let t=(tr[1]&2147483648)>>16&65535,e=tr[1]&2146435072,n=0;return e>=1089470464?tr[0]>0?e=31744:(e=(e&2080374784)>>16,n=(tr[1]&1048575)>>10):e<=1056964608?(n=1048576+(tr[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(tr[1]&1048575)+512>>10),t|e|n&65535}var Q=class extends Y{};function st(i){return(t,e,n)=>{if(t.setValid(e,n!=null))return i(t,e,n)}}var Lj=(i,t,e)=>{i[t]=Math.trunc(e/864e5)},Ka=(i,t,e)=>{i[t]=Math.trunc(e%4294967296),i[t+1]=Math.trunc(e/4294967296)},Uj=(i,t,e)=>{i[t]=Math.trunc(e*1e3%4294967296),i[t+1]=Math.trunc(e*1e3/4294967296)},Nj=(i,t,e)=>{i[t]=Math.trunc(e*1e6%4294967296),i[t+1]=Math.trunc(e*1e6/4294967296)},gu=(i,t,e,n)=>{if(e+1<t.length){let{[e]:r,[e+1]:a}=t;i.set(n.subarray(0,a-r),r)}},Pj=({offset:i,values:t},e,n)=>{let r=i+e;n?t[r>>3]|=1<<r%8:t[r>>3]&=~(1<<r%8)},Wi=({values:i},t,e)=>{i[t]=e},Ja=({values:i},t,e)=>{i[t]=e},wu=({values:i},t,e)=>{i[t]=Or(e)},Vj=(i,t,e)=>{switch(i.type.precision){case Dt.HALF:return wu(i,t,e);case Dt.SINGLE:case Dt.DOUBLE:return Ja(i,t,e)}},io=({values:i},t,e)=>{Lj(i,t,e.valueOf())},no=({values:i},t,e)=>{Ka(i,t*2,e.valueOf())},qa=({stride:i,values:t},e,n)=>{t.set(n.subarray(0,i),i*e)},Hj=({values:i,valueOffsets:t},e,n)=>gu(i,t,e,n),zj=({values:i,valueOffsets:t},e,n)=>{gu(i,t,e,sn(n))},Qa=(i,t,e)=>{i.type.unit===re.DAY?io(i,t,e):no(i,t,e)},ro=({values:i},t,e)=>Ka(i,t*2,e/1e3),so=({values:i},t,e)=>Ka(i,t*2,e),oo=({values:i},t,e)=>Uj(i,t*2,e),ao=({values:i},t,e)=>Nj(i,t*2,e),Za=(i,t,e)=>{switch(i.type.unit){case ut.SECOND:return ro(i,t,e);case ut.MILLISECOND:return so(i,t,e);case ut.MICROSECOND:return oo(i,t,e);case ut.NANOSECOND:return ao(i,t,e)}},co=({values:i},t,e)=>{i[t]=e},lo=({values:i},t,e)=>{i[t]=e},uo=({values:i},t,e)=>{i[t]=e},fo=({values:i},t,e)=>{i[t]=e},tc=(i,t,e)=>{switch(i.type.unit){case ut.SECOND:return co(i,t,e);case ut.MILLISECOND:return lo(i,t,e);case ut.MICROSECOND:return uo(i,t,e);case ut.NANOSECOND:return fo(i,t,e)}},ec=({values:i,stride:t},e,n)=>{i.set(n.subarray(0,t),t*e)},Wj=(i,t,e)=>{let n=i.children[0],r=i.valueOffsets,a=se.getVisitFn(n);if(Array.isArray(e))for(let u=-1,_=r[t],m=r[t+1];_<m;)a(n,_++,e[++u]);else for(let u=-1,_=r[t],m=r[t+1];_<m;)a(n,_++,e.get(++u))},Yj=(i,t,e)=>{let n=i.children[0],{valueOffsets:r}=i,a=se.getVisitFn(n),{[t]:u,[t+1]:_}=r,m=e instanceof Map?e.entries():Object.entries(e);for(let k of m)if(a(n,u,k),++u>=_)break},$j=(i,t)=>(e,n,r,a)=>n&&e(n,i,t[a]),Gj=(i,t)=>(e,n,r,a)=>n&&e(n,i,t.get(a)),Xj=(i,t)=>(e,n,r,a)=>n&&e(n,i,t.get(r.name)),Kj=(i,t)=>(e,n,r,a)=>n&&e(n,i,t[r.name]),Jj=(i,t,e)=>{let n=i.type.children.map(a=>se.getVisitFn(a.type)),r=e instanceof Map?Xj(t,e):e instanceof Z?Gj(t,e):Array.isArray(e)?$j(t,e):Kj(t,e);i.type.children.forEach((a,u)=>r(n[u],i.children[u],a,u))},qj=(i,t,e)=>{i.type.mode===Ot.Dense?ju(i,t,e):Su(i,t,e)},ju=(i,t,e)=>{let n=i.type.typeIdToChildIndex[i.typeIds[t]],r=i.children[n];se.visit(r,i.valueOffsets[t],e)},Su=(i,t,e)=>{let n=i.type.typeIdToChildIndex[i.typeIds[t]],r=i.children[n];se.visit(r,t,e)},Qj=(i,t,e)=>{var n;(n=i.dictionary)===null||n===void 0||n.set(i.values[t],e)},ic=(i,t,e)=>{i.type.unit===pe.DAY_TIME?ho(i,t,e):_o(i,t,e)},ho=({values:i},t,e)=>{i.set(e.subarray(0,2),2*t)},_o=({values:i},t,e)=>{i[t]=e[0]*12+e[1]%12},Zj=(i,t,e)=>{let{stride:n}=i,r=i.children[0],a=se.getVisitFn(r);if(Array.isArray(e))for(let u=-1,_=t*n;++u<n;)a(r,_+u,e[u]);else for(let u=-1,_=t*n;++u<n;)a(r,_+u,e.get(u))};Q.prototype.visitBool=st(Pj);Q.prototype.visitInt=st(Wi);Q.prototype.visitInt8=st(Wi);Q.prototype.visitInt16=st(Wi);Q.prototype.visitInt32=st(Wi);Q.prototype.visitInt64=st(Wi);Q.prototype.visitUint8=st(Wi);Q.prototype.visitUint16=st(Wi);Q.prototype.visitUint32=st(Wi);Q.prototype.visitUint64=st(Wi);Q.prototype.visitFloat=st(Vj);Q.prototype.visitFloat16=st(wu);Q.prototype.visitFloat32=st(Ja);Q.prototype.visitFloat64=st(Ja);Q.prototype.visitUtf8=st(zj);Q.prototype.visitBinary=st(Hj);Q.prototype.visitFixedSizeBinary=st(qa);Q.prototype.visitDate=st(Qa);Q.prototype.visitDateDay=st(io);Q.prototype.visitDateMillisecond=st(no);Q.prototype.visitTimestamp=st(Za);Q.prototype.visitTimestampSecond=st(ro);Q.prototype.visitTimestampMillisecond=st(so);Q.prototype.visitTimestampMicrosecond=st(oo);Q.prototype.visitTimestampNanosecond=st(ao);Q.prototype.visitTime=st(tc);Q.prototype.visitTimeSecond=st(co);Q.prototype.visitTimeMillisecond=st(lo);Q.prototype.visitTimeMicrosecond=st(uo);Q.prototype.visitTimeNanosecond=st(fo);Q.prototype.visitDecimal=st(ec);Q.prototype.visitList=st(Wj);Q.prototype.visitStruct=st(Jj);Q.prototype.visitUnion=st(qj);Q.prototype.visitDenseUnion=st(ju);Q.prototype.visitSparseUnion=st(Su);Q.prototype.visitDictionary=st(Qj);Q.prototype.visitInterval=st(ic);Q.prototype.visitIntervalDayTime=st(ho);Q.prototype.visitIntervalYearMonth=st(_o);Q.prototype.visitFixedSizeList=st(Zj);Q.prototype.visitMap=st(Yj);var se=new Q;var ci=Symbol.for("parent"),er=Symbol.for("rowIndex"),an=class{constructor(t,e){return this[ci]=t,this[er]=e,new Proxy(this,new rc)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[er],e=this[ci],n=e.type.children,r={};for(let a=-1,u=n.length;++a<u;)r[n[a].name]=zt.visit(e.children[a],t);return r}toString(){return`{${[...this].map(([t,e])=>`${ei(t)}: ${ei(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new nc(this[ci],this[er])}},nc=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,zt.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(an.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[ci]:{writable:!0,enumerable:!1,configurable:!1,value:null},[er]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var rc=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[ci].type.children.map(e=>e.name)}has(t,e){return t[ci].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[ci].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[ci].type.children.findIndex(r=>r.name===e);if(n!==-1){let r=zt.visit(t[ci].children[n],t[er]);return Reflect.set(t,e,r),r}}set(t,e,n){let r=t[ci].type.children.findIndex(a=>a.name===e);return r!==-1?(se.visit(t[ci].children[r],t[er],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var $=class extends Y{};function et(i){return(t,e)=>t.getValid(e)?i(t,e):null}var tS=(i,t)=>864e5*i[t],sc=(i,t)=>4294967296*i[t+1]+(i[t]>>>0),eS=(i,t)=>4294967296*(i[t+1]/1e3)+(i[t]>>>0)/1e3,iS=(i,t)=>4294967296*(i[t+1]/1e6)+(i[t]>>>0)/1e6,Iu=i=>new Date(i),nS=(i,t)=>Iu(tS(i,t)),rS=(i,t)=>Iu(sc(i,t)),sS=(i,t)=>null,ku=(i,t,e)=>{if(e+1>=t.length)return null;let n=t[e],r=t[e+1];return i.subarray(n,r)},oS=({offset:i,values:t},e)=>{let n=i+e;return(t[n>>3]&1<<n%8)!==0},Cu=({values:i},t)=>nS(i,t),Fu=({values:i},t)=>rS(i,t*2),cn=({stride:i,values:t},e)=>t[i*e],aS=({stride:i,values:t},e)=>eo(t[i*e]),Au=({values:i},t)=>i[t],cS=({stride:i,values:t},e)=>t.subarray(i*e,i*(e+1)),lS=({values:i,valueOffsets:t},e)=>ku(i,t,e),uS=({values:i,valueOffsets:t},e)=>{let n=ku(i,t,e);return n!==null?xr(n):null},dS=({values:i},t)=>i[t],fS=({type:i,values:t},e)=>i.precision!==Dt.HALF?t[e]:eo(t[e]),hS=(i,t)=>i.type.unit===re.DAY?Cu(i,t):Fu(i,t),Tu=({values:i},t)=>1e3*sc(i,t*2),Eu=({values:i},t)=>sc(i,t*2),xu=({values:i},t)=>eS(i,t*2),Du=({values:i},t)=>iS(i,t*2),_S=(i,t)=>{switch(i.type.unit){case ut.SECOND:return Tu(i,t);case ut.MILLISECOND:return Eu(i,t);case ut.MICROSECOND:return xu(i,t);case ut.NANOSECOND:return Du(i,t)}},Bu=({values:i},t)=>i[t],Ru=({values:i},t)=>i[t],Ou=({values:i},t)=>i[t],Mu=({values:i},t)=>i[t],pS=(i,t)=>{switch(i.type.unit){case ut.SECOND:return Bu(i,t);case ut.MILLISECOND:return Ru(i,t);case ut.MICROSECOND:return Ou(i,t);case ut.NANOSECOND:return Mu(i,t)}},yS=({values:i,stride:t},e)=>Fn.decimal(i.subarray(t*e,t*(e+1))),mS=(i,t)=>{let{valueOffsets:e,stride:n,children:r}=i,{[t*n]:a,[t*n+1]:u}=e,m=r[0].slice(a,u-a);return new Z([m])},vS=(i,t)=>{let{valueOffsets:e,children:n}=i,{[t]:r,[t+1]:a}=e,u=n[0];return new vi(u.slice(r,a-r))},bS=(i,t)=>new an(i,t),gS=(i,t)=>i.type.mode===Ot.Dense?Lu(i,t):Uu(i,t),Lu=(i,t)=>{let e=i.type.typeIdToChildIndex[i.typeIds[t]],n=i.children[e];return zt.visit(n,i.valueOffsets[t])},Uu=(i,t)=>{let e=i.type.typeIdToChildIndex[i.typeIds[t]],n=i.children[e];return zt.visit(n,t)},wS=(i,t)=>{var e;return(e=i.dictionary)===null||e===void 0?void 0:e.get(i.values[t])},jS=(i,t)=>i.type.unit===pe.DAY_TIME?Nu(i,t):Pu(i,t),Nu=({values:i},t)=>i.subarray(2*t,2*(t+1)),Pu=({values:i},t)=>{let e=i[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},SS=(i,t)=>{let{stride:e,children:n}=i,a=n[0].slice(t*e,e);return new Z([a])};$.prototype.visitNull=et(sS);$.prototype.visitBool=et(oS);$.prototype.visitInt=et(dS);$.prototype.visitInt8=et(cn);$.prototype.visitInt16=et(cn);$.prototype.visitInt32=et(cn);$.prototype.visitInt64=et(Au);$.prototype.visitUint8=et(cn);$.prototype.visitUint16=et(cn);$.prototype.visitUint32=et(cn);$.prototype.visitUint64=et(Au);$.prototype.visitFloat=et(fS);$.prototype.visitFloat16=et(aS);$.prototype.visitFloat32=et(cn);$.prototype.visitFloat64=et(cn);$.prototype.visitUtf8=et(uS);$.prototype.visitBinary=et(lS);$.prototype.visitFixedSizeBinary=et(cS);$.prototype.visitDate=et(hS);$.prototype.visitDateDay=et(Cu);$.prototype.visitDateMillisecond=et(Fu);$.prototype.visitTimestamp=et(_S);$.prototype.visitTimestampSecond=et(Tu);$.prototype.visitTimestampMillisecond=et(Eu);$.prototype.visitTimestampMicrosecond=et(xu);$.prototype.visitTimestampNanosecond=et(Du);$.prototype.visitTime=et(pS);$.prototype.visitTimeSecond=et(Bu);$.prototype.visitTimeMillisecond=et(Ru);$.prototype.visitTimeMicrosecond=et(Ou);$.prototype.visitTimeNanosecond=et(Mu);$.prototype.visitDecimal=et(yS);$.prototype.visitList=et(mS);$.prototype.visitStruct=et(bS);$.prototype.visitUnion=et(gS);$.prototype.visitDenseUnion=et(Lu);$.prototype.visitSparseUnion=et(Uu);$.prototype.visitDictionary=et(wS);$.prototype.visitInterval=et(jS);$.prototype.visitIntervalDayTime=et(Nu);$.prototype.visitIntervalYearMonth=et(Pu);$.prototype.visitFixedSizeList=et(SS);$.prototype.visitMap=et(vS);var zt=new $;var Xe=Symbol.for("keys"),ir=Symbol.for("vals"),vi=class{constructor(t){return this[Xe]=new Z([t.children[0]]).memoize(),this[ir]=t.children[1],new Proxy(this,new ac)}[Symbol.iterator](){return new oc(this[Xe],this[ir])}get size(){return this[Xe].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Xe],e=this[ir],n={};for(let r=-1,a=t.length;++r<a;)n[t.get(r)]=zt.visit(e,r);return n}toString(){return`{${[...this].map(([t,e])=>`${ei(t)}: ${ei(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},oc=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),zt.visit(this.vals,t)]})}},ac=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[Xe].toArray().map(String)}has(t,e){return t[Xe].includes(e)}getOwnPropertyDescriptor(t,e){if(t[Xe].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[Xe].indexOf(e);if(n!==-1){let r=zt.visit(Reflect.get(t,ir),n);return Reflect.set(t,e,r),r}}set(t,e,n){let r=t[Xe].indexOf(e);return r!==-1?(se.visit(Reflect.get(t,ir),r,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(vi.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[Xe]:{writable:!0,enumerable:!1,configurable:!1,value:null},[ir]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function IS(i,t,e){let n=i.length,r=t>-1?t:n+t%n;return e?e(i,r):r}var Vu;function Mr(i,t,e,n){let{length:r=0}=i,a=typeof t!="number"?0:t,u=typeof e!="number"?r:e;return a<0&&(a=(a%r+r)%r),u<0&&(u=(u%r+r)%r),u<a&&(Vu=a,a=u,u=Vu),u>r&&(u=r),n?n(i,a,u):[a,u]}var Hu=i=>i!==i;function ln(i){if(typeof i!=="object"||i===null)return Hu(i)?Hu:e=>e===i;if(i instanceof Date){let e=i.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(i)?e=>e?Ha(i,e):!1:i instanceof Map?CS(i):Array.isArray(i)?kS(i):i instanceof Z?FS(i):AS(i,!0)}function kS(i){let t=[];for(let e=-1,n=i.length;++e<n;)t[e]=ln(i[e]);return po(t)}function CS(i){let t=-1,e=[];for(let n of i.values())e[++t]=ln(n);return po(e)}function FS(i){let t=[];for(let e=-1,n=i.length;++e<n;)t[e]=ln(i.get(e));return po(t)}function AS(i,t=!1){let e=Object.keys(i);if(!t&&e.length===0)return()=>!1;let n=[];for(let r=-1,a=e.length;++r<a;)n[r]=ln(i[e[r]]);return po(n,e)}function po(i,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return TS(i,e);case Map:return zu(i,e,e.keys());case vi:case an:case Object:case void 0:return zu(i,e,t||Object.keys(e))}return e instanceof Z?ES(i,e):!1}}function TS(i,t){let e=i.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!i[n](t[n]))return!1;return!0}function ES(i,t){let e=i.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!i[n](t.get(n)))return!1;return!0}function zu(i,t,e){let n=e[Symbol.iterator](),r=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),a=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),u=0,_=i.length,m=a.next(),k=n.next(),A=r.next();for(;u<_&&!k.done&&!A.done&&!m.done&&!(k.value!==A.value||!i[u](m.value));++u,k=n.next(),A=r.next(),m=a.next());return u===_&&k.done&&A.done&&m.done?!0:(n.return&&n.return(),r.return&&r.return(),a.return&&a.return(),!1)}var lc={};kn(lc,{BitIterator:()=>An,getBit:()=>Wu,getBool:()=>mo,packBools:()=>Tn,popcnt_array:()=>Yu,popcnt_bit_range:()=>Lr,popcnt_uint32:()=>yo,setBool:()=>xS,truncateBitmap:()=>nr});function mo(i,t,e,n){return(e&1<<n)!==0}function Wu(i,t,e,n){return(e&1<<n)>>n}function xS(i,t,e){return e?!!(i[t>>3]|=1<<t%8)||!0:!(i[t>>3]&=~(1<<t%8))&&!1}function nr(i,t,e){let n=e.byteLength+7&-8;if(i>0||e.byteLength<n){let r=new Uint8Array(n);return r.set(i%8===0?e.subarray(i>>3):Tn(new An(e,i,t,null,mo)).subarray(0,n)),r}return e}function Tn(i){let t=[],e=0,n=0,r=0;for(let u of i)u&&(r|=1<<n),++n===8&&(t[e++]=r,r=n=0);(e===0||n>0)&&(t[e++]=r);let a=new Uint8Array(t.length+7&-8);return a.set(t),a}var An=class{constructor(t,e,n,r,a){this.bytes=t,this.length=n,this.context=r,this.get=a,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function Lr(i,t,e){if(e-t<=0)return 0;if(e-t<8){let a=0;for(let u of new An(i,t,e-t,i,Wu))a+=u;return a}let n=e>>3<<3,r=t+(t%8===0?0:8-t%8);return Lr(i,t,r)+Lr(i,n,e)+Yu(i,r>>3,n-r>>3)}function Yu(i,t,e){let n=0,r=Math.trunc(t),a=new DataView(i.buffer,i.byteOffset,i.byteLength),u=e===void 0?i.byteLength:r+e;for(;u-r>=4;)n+=yo(a.getUint32(r)),r+=4;for(;u-r>=2;)n+=yo(a.getUint16(r)),r+=2;for(;u-r>=1;)n+=yo(a.getUint8(r)),r+=1;return n}function yo(i){let t=Math.trunc(i);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var DS=-1,mt=class{constructor(t,e,n,r,a,u=[],_){this.type=t,this.children=u,this.dictionary=_,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(r||0,-1));let m;a instanceof mt?(this.stride=a.stride,this.values=a.values,this.typeIds=a.typeIds,this.nullBitmap=a.nullBitmap,this.valueOffsets=a.valueOffsets):(this.stride=Le(t),a&&((m=a[0])&&(this.valueOffsets=m),(m=a[1])&&(this.values=m),(m=a[2])&&(this.nullBitmap=m),(m=a[3])&&(this.typeIds=m))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:r,typeIds:a}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),r&&(t+=r.byteLength),a&&(t+=a.byteLength),this.children.reduce((u,_)=>u+_.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=DS&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-Lr(e,this.offset,this.offset+this.length)),t}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:m}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:m,_nullCount:0})}let{nullBitmap:n,offset:r}=this,a=r+t>>3,u=(r+t)%8,_=n[a]>>u&1;return e?_===0&&(n[a]|=1<<u,this._nullCount=this.nullCount+1):_===1&&(n[a]&=~(1<<u),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,r=this._nullCount,a=this,u=this.children){return new mt(t,e,n,r,a,u,this.dictionary)}slice(t,e){let{stride:n,typeId:r,children:a}=this,u=+(this._nullCount===0)-1,_=r===16?n:1,m=this._sliceBuffers(t,e,n,r);return this.clone(this.type,this.offset+t,e,u,m,a.length===0||this.valueOffsets?a:this._sliceChildren(a,_*t,_*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===F.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,r=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);r[e>>3]=(1<<e-(e&-8))-1,n>0&&r.set(nr(this.offset,e,this.nullBitmap),0);let a=this.buffers;return a[Ge.VALIDITY]=r,this.clone(this.type,0,t,n+(t-e),a)}_sliceBuffers(t,e,n,r){let a,{buffers:u}=this;return(a=u[Ge.TYPE])&&(u[Ge.TYPE]=a.subarray(t,t+e)),(a=u[Ge.OFFSET])&&(u[Ge.OFFSET]=a.subarray(t,t+e+1))||(a=u[Ge.DATA])&&(u[Ge.DATA]=r===6?a:a.subarray(n*t,n*(t+e))),u}_sliceChildren(t,e,n){return t.map(r=>r.slice(e,n))}};mt.prototype.children=Object.freeze([]);var En=class extends Y{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:r=0}=t;return new mt(e,n,r,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length>>3,["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length,["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length,["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.data),a=q(t.nullBitmap),u=Cn(t.valueOffsets),{["length"]:_=u.length-1,["nullCount"]:m=t.nullBitmap?-1:0}=t;return new mt(e,n,_,m,[u,r,a])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.data),a=q(t.nullBitmap),u=Cn(t.valueOffsets),{["length"]:_=u.length-1,["nullCount"]:m=t.nullBitmap?-1:0}=t;return new mt(e,n,_,m,[u,r,a])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:r}=t,a=q(t.nullBitmap),u=Cn(t.valueOffsets),{["length"]:_=u.length-1,["nullCount"]:m=t.nullBitmap?-1:0}=t;return new mt(e,n,_,m,[u,void 0,a],[r])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:r=[]}=t,a=q(t.nullBitmap),{length:u=r.reduce((m,{length:k})=>Math.max(m,k),0),nullCount:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,void 0,a],r)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:r=[]}=t,a=q(t.nullBitmap),u=ct(e.ArrayType,t.typeIds),{["length"]:_=u.length,["nullCount"]:m=t.nullBitmap?-1:0}=t;if(V.isSparseUnion(e))return new mt(e,n,_,m,[void 0,void 0,a,u],r);let k=Cn(t.valueOffsets);return new mt(e,n,_,m,[k,void 0,a,u],r)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.indices.ArrayType,t.data),{["dictionary"]:u=new Z([new En().visit({type:e.dictionary})])}=t,{["length"]:_=a.length,["nullCount"]:m=t.nullBitmap?-1:0}=t;return new mt(e,n,_,m,[void 0,a,r],[],u)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,r=q(t.nullBitmap),a=ct(e.ArrayType,t.data),{["length"]:u=a.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,a,r])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:r=new En().visit({type:e.valueType})}=t,a=q(t.nullBitmap),{["length"]:u=r.length/Le(e),["nullCount"]:_=t.nullBitmap?-1:0}=t;return new mt(e,n,u,_,[void 0,void 0,a],[r])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:r=new En().visit({type:e.childType})}=t,a=q(t.nullBitmap),u=Cn(t.valueOffsets),{["length"]:_=u.length-1,["nullCount"]:m=t.nullBitmap?-1:0}=t;return new mt(e,n,_,m,[u,void 0,a],[r])}};function tt(i){return new En().visit(i)}var Ur=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function vo(i){return i.reduce((t,e)=>t+e.nullCount,0)}function bo(i){return i.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(i.length+1))}function go(i,t,e,n){let r=[];for(let a=-1,u=i.length;++a<u;){let _=i[a],m=t[a],{length:k}=_;if(m>=n)break;if(e>=m+k)continue;if(m>=e&&m+k<=n){r.push(_);continue}let A=Math.max(0,e-m),D=Math.min(n-m,k);r.push(_.slice(A,D-A))}return r.length===0&&r.push(i[0].slice(0,0)),r}function uc(i,t,e,n){let r=0,a=0,u=t.length-1;do{if(r>=u-1)return e<t[u]?n(i,r,e-t[r]):null;a=r+Math.trunc((u-r)*.5),e<t[a]?u=a:r=a}while(r<u)}function Nr(i,t){return i.getValid(t)}function un(i){function t(e,n,r){return i(e[n],r)}return function(e){let n=this.data;return uc(n,this._offsets,e,t)}}function wo(i){let t;function e(n,r,a){return i(n[r],a,t)}return function(n,r){let a=this.data;t=r;let u=uc(a,this._offsets,n,e);return t=void 0,u}}function jo(i){let t;function e(n,r,a){let u=a,_=0,m=0;for(let k=r-1,A=n.length;++k<A;){let D=n[k];if(~(_=i(D,t,u)))return m+_;u=0,m+=D.length}return-1}return function(n,r){t=n;let a=this.data,u=typeof r!="number"?e(a,0,0):uc(a,this._offsets,r,e);return t=void 0,u}}var G=class extends Y{};function BS(i,t){return t===null&&i.length>0?0:-1}function RS(i,t){let{nullBitmap:e}=i;if(!e||i.nullCount<=0)return-1;let n=0;for(let r of new An(e,i.offset+(t||0),i.length,e,mo)){if(!r)return n;++n}return-1}function lt(i,t,e){if(t===void 0)return-1;if(t===null)return RS(i,e);let n=zt.getVisitFn(i),r=ln(t);for(let a=(e||0)-1,u=i.length;++a<u;)if(r(n(i,a)))return a;return-1}function $u(i,t,e){let n=zt.getVisitFn(i),r=ln(t);for(let a=(e||0)-1,u=i.length;++a<u;)if(r(n(i,a)))return a;return-1}G.prototype.visitNull=BS;G.prototype.visitBool=lt;G.prototype.visitInt=lt;G.prototype.visitInt8=lt;G.prototype.visitInt16=lt;G.prototype.visitInt32=lt;G.prototype.visitInt64=lt;G.prototype.visitUint8=lt;G.prototype.visitUint16=lt;G.prototype.visitUint32=lt;G.prototype.visitUint64=lt;G.prototype.visitFloat=lt;G.prototype.visitFloat16=lt;G.prototype.visitFloat32=lt;G.prototype.visitFloat64=lt;G.prototype.visitUtf8=lt;G.prototype.visitBinary=lt;G.prototype.visitFixedSizeBinary=lt;G.prototype.visitDate=lt;G.prototype.visitDateDay=lt;G.prototype.visitDateMillisecond=lt;G.prototype.visitTimestamp=lt;G.prototype.visitTimestampSecond=lt;G.prototype.visitTimestampMillisecond=lt;G.prototype.visitTimestampMicrosecond=lt;G.prototype.visitTimestampNanosecond=lt;G.prototype.visitTime=lt;G.prototype.visitTimeSecond=lt;G.prototype.visitTimeMillisecond=lt;G.prototype.visitTimeMicrosecond=lt;G.prototype.visitTimeNanosecond=lt;G.prototype.visitDecimal=lt;G.prototype.visitList=lt;G.prototype.visitStruct=lt;G.prototype.visitUnion=lt;G.prototype.visitDenseUnion=$u;G.prototype.visitSparseUnion=$u;G.prototype.visitDictionary=lt;G.prototype.visitInterval=lt;G.prototype.visitIntervalDayTime=lt;G.prototype.visitIntervalYearMonth=lt;G.prototype.visitFixedSizeList=lt;G.prototype.visitMap=lt;var xn=new G;var X=class extends Y{};function it(i){let{type:t}=i;if(i.nullCount===0&&i.stride===1&&(t.typeId===F.Timestamp||t instanceof Pt&&t.bitWidth!==64||t instanceof ni&&t.bitWidth!==64||t instanceof we&&t.precision!==Dt.HALF))return new Ur(i.data.length,n=>{let r=i.data[n];return r.values.subarray(0,r.length)[Symbol.iterator]()});let e=0;return new Ur(i.data.length,n=>{let a=i.data[n].length,u=i.slice(e,e+a);return e+=a,new dc(u)})}var dc=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};X.prototype.visitNull=it;X.prototype.visitBool=it;X.prototype.visitInt=it;X.prototype.visitInt8=it;X.prototype.visitInt16=it;X.prototype.visitInt32=it;X.prototype.visitInt64=it;X.prototype.visitUint8=it;X.prototype.visitUint16=it;X.prototype.visitUint32=it;X.prototype.visitUint64=it;X.prototype.visitFloat=it;X.prototype.visitFloat16=it;X.prototype.visitFloat32=it;X.prototype.visitFloat64=it;X.prototype.visitUtf8=it;X.prototype.visitBinary=it;X.prototype.visitFixedSizeBinary=it;X.prototype.visitDate=it;X.prototype.visitDateDay=it;X.prototype.visitDateMillisecond=it;X.prototype.visitTimestamp=it;X.prototype.visitTimestampSecond=it;X.prototype.visitTimestampMillisecond=it;X.prototype.visitTimestampMicrosecond=it;X.prototype.visitTimestampNanosecond=it;X.prototype.visitTime=it;X.prototype.visitTimeSecond=it;X.prototype.visitTimeMillisecond=it;X.prototype.visitTimeMicrosecond=it;X.prototype.visitTimeNanosecond=it;X.prototype.visitDecimal=it;X.prototype.visitList=it;X.prototype.visitStruct=it;X.prototype.visitUnion=it;X.prototype.visitDenseUnion=it;X.prototype.visitSparseUnion=it;X.prototype.visitDictionary=it;X.prototype.visitInterval=it;X.prototype.visitIntervalDayTime=it;X.prototype.visitIntervalYearMonth=it;X.prototype.visitFixedSizeList=it;X.prototype.visitMap=it;var rr=new X;var OS=(i,t)=>i+t,bi=class extends Y{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===ut.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,r)=>n+Ue.visit(r,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,r)=>n+Ue.visit(r,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},MS=({valueOffsets:i},t)=>8+(i[t+1]-i[t]),LS=({valueOffsets:i},t)=>8+(i[t+1]-i[t]),US=({valueOffsets:i,stride:t,children:e},n)=>{let r=e[0],{[n*t]:a}=i,{[n*t+1]:u}=i,_=Ue.getVisitFn(r.type),m=r.slice(a,u-a),k=8;for(let A=-1,D=u-a;++A<D;)k+=_(m,A);return k},NS=({stride:i,children:t},e)=>{let n=t[0],r=n.slice(e*i,i),a=Ue.getVisitFn(n.type),u=0;for(let _=-1,m=r.length;++_<m;)u+=a(r,_);return u},PS=(i,t)=>i.type.mode===Ot.Dense?Gu(i,t):Xu(i,t),Gu=({type:i,children:t,typeIds:e,valueOffsets:n},r)=>{let a=i.typeIdToChildIndex[e[r]];return 8+Ue.visit(t[a],n[r])},Xu=({children:i},t)=>4+Ue.visitMany(i,i.map(()=>t)).reduce(OS,0);bi.prototype.visitUtf8=MS;bi.prototype.visitBinary=LS;bi.prototype.visitList=US;bi.prototype.visitFixedSizeList=NS;bi.prototype.visitUnion=PS;bi.prototype.visitDenseUnion=Gu;bi.prototype.visitSparseUnion=Xu;var Ue=new bi;var Ku,Ju={},qu={},Z=class{constructor(t){var e,n,r;let a=t[0]instanceof Z?t.flatMap(_=>_.data):t;if(a.length===0||a.some(_=>!(_ instanceof mt)))throw new TypeError("Vector constructor expects an Array of Data instances.");let u=(e=a[0])===null||e===void 0?void 0:e.type;switch(a.length){case 0:this._offsets=[0];break;case 1:{let{get:_,set:m,indexOf:k,byteLength:A}=Ju[u.typeId],D=a[0];this.isValid=B=>Nr(D,B),this.get=B=>_(D,B),this.set=(B,R)=>m(D,B,R),this.indexOf=B=>k(D,B),this.getByteLength=B=>A(D,B),this._offsets=[0,D.length];break}default:Object.setPrototypeOf(this,qu[u.typeId]),this._offsets=bo(a);break}this.data=a,this.type=u,this.stride=Le(u),this.numChildren=(r=(n=u.children)===null||n===void 0?void 0:n.length)!==null&&r!==void 0?r:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=vo(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return`${this.VectorName}<${this.type[Symbol.toStringTag]}>`}get VectorName(){return`${F[this.type.typeId]}Vector`}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return rr.visit(this)}concat(...t){return new Z(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new Z(Mr(this,t,e,({data:n,_offsets:r},a,u)=>go(n,r,a,u)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:r,ArrayType:a}=this;switch(t.typeId){case F.Int:case F.Float:case F.Decimal:case F.Time:case F.Timestamp:switch(e.length){case 0:return new a;case 1:return e[0].values.subarray(0,n*r);default:return e.reduce((u,{values:_,length:m})=>(u.array.set(_.subarray(0,m*r),u.offset),u.offset+=m*r,u),{array:new a(n*r),offset:0}).array}}return[...this]}toString(){return`[${[...this].join(",")}]`}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new Z(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return V.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(V.isDictionary(this.type)){let t=new sr(this.data[0].dictionary),e=this.data.map(n=>{let r=n.clone();return r.dictionary=t,r});return new Z(e)}return new sr(this)}unmemoize(){if(V.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let r=n.clone();return r.dictionary=t,r});return new Z(e)}return this}};Ku=Symbol.toStringTag;Z[Ku]=(i=>{i.type=V.prototype,i.data=[],i.length=0,i.stride=1,i.numChildren=0,i._nullCount=-1,i._byteLength=-1,i._offsets=new Uint32Array([0]),i[Symbol.isConcatSpreadable]=!0;let t=Object.keys(F).map(e=>F[e]).filter(e=>typeof e=="number"&&e!==F.NONE);for(let e of t){let n=zt.getVisitFnByTypeId(e),r=se.getVisitFnByTypeId(e),a=xn.getVisitFnByTypeId(e),u=Ue.getVisitFnByTypeId(e);Ju[e]={get:n,set:r,indexOf:a,byteLength:u},qu[e]=Object.create(i,{isValid:{value:un(Nr)},get:{value:un(zt.getVisitFnByTypeId(e))},set:{value:wo(se.getVisitFnByTypeId(e))},indexOf:{value:jo(xn.getVisitFnByTypeId(e))},getByteLength:{value:un(Ue.getVisitFnByTypeId(e))}})}return"Vector"})(Z.prototype);var sr=class extends Z{constructor(t){super(t.data);let e=this.get,n=this.set,r=this.slice,a=new Array(this.length);Object.defineProperty(this,"get",{value(u){let _=a[u];if(_!==void 0)return _;let m=e.call(this,u);return a[u]=m,m}}),Object.defineProperty(this,"set",{value(u,_){n.call(this,u,_),a[u]=_}}),Object.defineProperty(this,"slice",{value:(u,_)=>new sr(r.call(this,u,_))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new Z(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function Qu(i){if(!i||i.length<=0)return function(r){return!0};let t="",e=i.filter(n=>n===n);return e.length>0&&(t=`
    switch (x) {${e.map(n=>`
        case ${VS(n)}:`).join("")}
            return false;
    }`),i.length!==e.length&&(t=`if (x !== x) return false;
${t}`),new Function("x",`${t}
return true;`)}function VS(i){return typeof i!="bigint"?ei(i):Ms?`${ei(i)}n`:`"${ei(i)}"`}var fc=(i,t)=>(Math.ceil(i)*t+63&-64||64)/t,HS=(i,t=0)=>i.length>=t?i.subarray(0,t):Jn(new i.constructor(t),i,0),dn=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,r=this.buffer.length;n>=r&&this._resize(r===0?fc(n*1,this.BYTES_PER_ELEMENT):fc(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=fc(t*this.stride,this.BYTES_PER_ELEMENT);let e=HS(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=Jn(new this.ArrayType(t),this.buffer)}};dn.prototype.offset=0;var Yi=class extends dn{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},or=class extends Yi{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),r=t>>3,a=t%8,u=n[r]>>a&1;return e?u===0&&(n[r]|=1<<a,++this.numValid):u===1&&(n[r]&=~(1<<a),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},ar=class extends Yi{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,r=this.reserve(t-n+1).buffer;return n<t++&&r.fill(r[n],n,t),r[t]=r[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var Bt=class{constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=Le(t),this._nulls=new or,e&&e.length>0&&(this._isValid=Qu(e))}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}toVector(){return new Z([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:r,_typeIds:a,children:u}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),r&&(t+=r.byteLength),a&&(t+=a.byteLength),u.reduce((_,m)=>_+m.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e=`${this.numChildren}`){throw new Error(`Cannot append children to non-nested type "${this.type}"`)}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,r,{type:a,length:u,nullCount:_,_typeIds:m,_offsets:k,_values:A,_nulls:D}=this;(e=m==null?void 0:m.flush(u))?r=k==null?void 0:k.flush(u):(r=k==null?void 0:k.flush(u))?t=A==null?void 0:A.flush(k.last()):t=A==null?void 0:A.flush(u),_>0&&(n=D==null?void 0:D.flush(u));let B=this.children.map(R=>R.flush());return this.clear(),tt({type:a,length:u,nullCount:_,children:B,child:B[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:r})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,r;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(r=this._typeIds)===null||r===void 0||r.clear();for(let a of this.children)a.clear();return this}};Bt.prototype.length=1;Bt.prototype.stride=1;Bt.prototype.children=null;Bt.prototype.finished=!1;Bt.prototype.nullValues=null;Bt.prototype._isValid=()=>!0;var qt=class extends Bt{constructor(t){super(t),this._values=new Yi(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},gi=class extends Bt{constructor(t){super(t),this._pendingLength=0,this._offsets=new ar}setValue(t,e){let n=this._pending||(this._pending=new Map),r=n.get(t);r&&(this._pendingLength-=r.length),this._pendingLength+=e instanceof vi?e[Xe].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var Dn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,r){return t.prep(8,24),t.writeInt64(r),t.pad(4),t.writeInt32(n),t.writeInt64(e),t.offset()}};var wi=new Int32Array(2),So=new Float32Array(wi.buffer),Io=new Float64Array(wi.buffer),cr=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var Wt=class{constructor(t,e){this.low=t|0,this.high=e|0}static create(t,e){return t==0&&e==0?Wt.ZERO:new Wt(t,e)}toFloat64(){return(this.low>>>0)+this.high*4294967296}equals(t){return this.low==t.low&&this.high==t.high}};Wt.ZERO=new Wt(0,0);var Pr;(function(i){i[i.UTF8_BYTES=1]="UTF8_BYTES",i[i.UTF16_STRING=2]="UTF16_STRING"})(Pr||(Pr={}));var me=class{constructor(t){this.bytes_=t,this.position_=0}static allocate(t){return new me(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return new Wt(this.readInt32(t),this.readInt32(t+4))}readUint64(t){return new Wt(this.readUint32(t),this.readUint32(t+4))}readFloat32(t){return wi[0]=this.readInt32(t),So[0]}readFloat64(t){return wi[cr?0:1]=this.readInt32(t),wi[cr?1:0]=this.readInt32(t+4),Io[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)}writeUint64(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)}writeFloat32(t,e){So[0]=e,this.writeInt32(t,wi[0])}writeFloat64(t,e){Io[0]=e,this.writeInt32(t,wi[cr?0:1]),this.writeInt32(t+4,wi[cr?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t),r="",a=0;if(t+=4,e===Pr.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;a<n;){let u,_=this.readUint8(t+a++);if(_<192)u=_;else{let m=this.readUint8(t+a++);if(_<224)u=(_&31)<<6|m&63;else{let k=this.readUint8(t+a++);if(_<240)u=(_&15)<<12|(m&63)<<6|k&63;else{let A=this.readUint8(t+a++);u=(_&7)<<18|(m&63)<<12|(k&63)<<6|A&63}}}u<65536?r+=String.fromCharCode(u):(u-=65536,r+=String.fromCharCode((u>>10)+55296,(u&(1<<10)-1)+56320))}return r}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createLong(t,e){return Wt.create(t,e)}createScalarList(t,e){let n=[];for(let r=0;r<e;++r)t(r)!==null&&n.push(t(r));return n}createObjList(t,e){let n=[];for(let r=0;r<e;++r){let a=t(r);a!==null&&n.push(a.unpack())}return n}};var $i=class{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null;let e;t?e=t:e=1024,this.bb=me.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let r=this.bb.capacity();this.bb=$i.growByteBuffer(this.bb),this.space+=this.bb.capacity()-r}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||!e.equals(n))&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,r=me.allocate(n);return r.setPosition(n-e),r.bytes().set(t.bytes(),n-e),r}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let r=2;this.addInt16(t-this.object_start);let a=(n+r)*2;this.addInt16(a);let u=0,_=this.space;t:for(e=0;e<this.vtables.length;e++){let m=this.bb.capacity()-this.vtables[e];if(a==this.bb.readInt16(m)){for(let k=2;k<a;k+=2)if(this.bb.readInt16(_+k)!=this.bb.readInt16(m+k))continue t;u=this.vtables[e];break}}return u?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,u-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let r=n?4:0;if(e){let a=e;if(this.prep(this.minalign,4+4+r),a.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let u=4-1;u>=0;u--)this.writeInt8(a.charCodeAt(u))}this.prep(this.minalign,4+r),this.addOffset(t),r&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,r=n-this.bb.readInt32(n);if(!(this.bb.readInt16(r+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(!t)return 0;let e;if(t instanceof Uint8Array)e=t;else{e=[];let n=0;for(;n<t.length;){let r,a=t.charCodeAt(n++);if(a<55296||a>=56320)r=a;else{let u=t.charCodeAt(n++);r=(a<<10)+u+(65536-(55296<<10)-56320)}r<128?e.push(r):(r<2048?e.push(r>>6&31|192):(r<65536?e.push(r>>12&15|224):e.push(r>>18&7|240,r>>12&63|128),e.push(r>>6&63|128)),e.push(r&63|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,r=this.space,a=this.bb.bytes();n<e.length;n++)a[r++]=e[n];return this.endVector()}createLong(t,e){return Wt.create(t,e)}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let r=t[n];if(r!==null)e.push(this.createObjectOffset(r));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t),this.endVector()}};var Tt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new Tt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new Tt).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return Tt.startKeyValue(t),Tt.addKey(t,e),Tt.addValue(t,n),Tt.endKeyValue(t)}};var fn;(function(i){i[i.V1=0]="V1",i[i.V2=1]="V2",i[i.V3=2]="V3",i[i.V4=3]="V4",i[i.V5=4]="V5"})(fn||(fn={}));var hn;(function(i){i[i.Little=0]="Little",i[i.Big=1]="Big"})(hn||(hn={}));var Vr;(function(i){i[i.DenseArray=0]="DenseArray"})(Vr||(Vr={}));var Qt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new Qt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new Qt).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return Qt.startInt(t),Qt.addBitWidth(t,e),Qt.addIsSigned(t,n),Qt.endInt(t)}};var Ne=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new Ne).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new Ne).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Qt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):Vr.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,Vr.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var ji=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new ji).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new ji).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return ji.startBinary(t),ji.endBinary(t)}};var Si=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new Si).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new Si).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return Si.startBool(t),Si.endBool(t)}};var Hr;(function(i){i[i.DAY=0]="DAY",i[i.MILLISECOND=1]="MILLISECOND"})(Hr||(Hr={}));var je=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new je).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new je).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Hr.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Hr.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return je.startDate(t),je.addUnit(t,e),je.endDate(t)}};var Zt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new Zt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new Zt).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,r){return Zt.startDecimal(t),Zt.addPrecision(t,e),Zt.addScale(t,n),Zt.addBitWidth(t,r),Zt.endDecimal(t)}};var _n;(function(i){i[i.SECOND=0]="SECOND",i[i.MILLISECOND=1]="MILLISECOND",i[i.MICROSECOND=2]="MICROSECOND",i[i.NANOSECOND=3]="NANOSECOND"})(_n||(_n={}));var Se=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new Se).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new Se).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return Se.startFixedSizeBinary(t),Se.addByteWidth(t,e),Se.endFixedSizeBinary(t)}};var Ie=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new Ie).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new Ie).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return Ie.startFixedSizeList(t),Ie.addListSize(t,e),Ie.endFixedSizeList(t)}};var zr;(function(i){i[i.HALF=0]="HALF",i[i.SINGLE=1]="SINGLE",i[i.DOUBLE=2]="DOUBLE"})(zr||(zr={}));var ke=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new ke).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new ke).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):zr.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,zr.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return ke.startFloatingPoint(t),ke.addPrecision(t,e),ke.endFloatingPoint(t)}};var Wr;(function(i){i[i.YEAR_MONTH=0]="YEAR_MONTH",i[i.DAY_TIME=1]="DAY_TIME",i[i.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Wr||(Wr={}));var Ce=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new Ce).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new Ce).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Wr.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Wr.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return Ce.startInterval(t),Ce.addUnit(t,e),Ce.endInterval(t)}};var Ii=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new Ii).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new Ii).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return Ii.startList(t),Ii.endList(t)}};var Fe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new Fe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new Fe).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return Fe.startMap(t),Fe.addKeysSorted(t,e),Fe.endMap(t)}};var ki=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new ki).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new ki).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return ki.startNull(t),ki.endNull(t)}};var Ci=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new Ci).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new Ci).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return Ci.startStruct_(t),Ci.endStruct_(t)}};var ce=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new ce).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new ce).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):_n.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,_n.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return ce.startTime(t),ce.addUnit(t,e),ce.addBitWidth(t,n),ce.endTime(t)}};var le=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new le).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new le).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):_n.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,_n.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return le.startTimestamp(t),le.addUnit(t,e),le.addTimezone(t,n),le.endTimestamp(t)}};var Yr;(function(i){i[i.Sparse=0]="Sparse",i[i.Dense=1]="Dense"})(Yr||(Yr={}));var te=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new te).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new te).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Yr.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,Yr.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return te.startUnion(t),te.addMode(t,e),te.addTypeIds(t,n),te.endUnion(t)}};var Fi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new Fi).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new Fi).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return Fi.startUtf8(t),Fi.endUtf8(t)}};var Rt;(function(i){i[i.NONE=0]="NONE",i[i.Null=1]="Null",i[i.Int=2]="Int",i[i.FloatingPoint=3]="FloatingPoint",i[i.Binary=4]="Binary",i[i.Utf8=5]="Utf8",i[i.Bool=6]="Bool",i[i.Decimal=7]="Decimal",i[i.Date=8]="Date",i[i.Time=9]="Time",i[i.Timestamp=10]="Timestamp",i[i.Interval=11]="Interval",i[i.List=12]="List",i[i.Struct_=13]="Struct_",i[i.Union=14]="Union",i[i.FixedSizeBinary=15]="FixedSizeBinary",i[i.FixedSizeList=16]="FixedSizeList",i[i.Map=17]="Map",i[i.Duration=18]="Duration",i[i.LargeBinary=19]="LargeBinary",i[i.LargeUtf8=20]="LargeUtf8",i[i.LargeList=21]="LargeList"})(Rt||(Rt={}));var Yt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new Yt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new Yt).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):Rt.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Ne).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new Yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new Tt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,Rt.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var Mt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new Mt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new Mt).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):hn.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new Yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Tt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):this.bb.createLong(0,0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,hn.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,r,a){return Mt.startSchema(t),Mt.addEndianness(t,e),Mt.addFields(t,n),Mt.addCustomMetadata(t,r),Mt.addFeatures(t,a),Mt.endSchema(t)}};var ue=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new ue).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new ue).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):fn.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Mt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Dn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new Dn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new Tt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,fn.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var ft=class{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=hc(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,e)=>`${e}: ${t}`).join(", ")} }>`}select(t){let e=new Set(t),n=this.fields.filter(r=>e.has(r.name));return new ft(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new ft(e,this.metadata)}assign(...t){let e=t[0]instanceof ft?t[0]:Array.isArray(t[0])?new ft(t[0]):new ft(t),n=[...this.fields],r=Co(Co(new Map,this.metadata),e.metadata),a=e.fields.filter(_=>{let m=n.findIndex(k=>k.name===_.name);return~m?(n[m]=_.clone({metadata:Co(Co(new Map,n[m].metadata),_.metadata)}))&&!1:!0}),u=hc(a,new Map);return new ft([...n,...a],r,new Map([...this.dictionaries,...u]))}};ft.prototype.fields=null;ft.prototype.metadata=null;ft.prototype.dictionaries=null;var nt=class{constructor(t,e,n=!1,r){this.name=t,this.type=e,this.nullable=n,this.metadata=r||new Map}static new(...t){let[e,n,r,a]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),r===void 0&&(r=t[0].nullable),a===void 0&&(a=t[0].metadata)),new nt(`${e}`,n,r,a)}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[e,n,r,a]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,r=this.nullable,a=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:r=this.nullable,metadata:a=this.metadata}=t[0],nt.new(e,n,r,a)}};nt.prototype.type=null;nt.prototype.name=null;nt.prototype.nullable=null;nt.prototype.metadata=null;function Co(i,t){return new Map([...i||new Map,...t||new Map])}function hc(i,t=new Map){for(let e=-1,n=i.length;++e<n;){let a=i[e].type;if(V.isDictionary(a)){if(!t.has(a.id))t.set(a.id,a.dictionary);else if(t.get(a.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}a.children&&a.children.length>0&&hc(a.children,t)}return t}var Zu=Wt,zS=$i,WS=me,Gi=class{constructor(t,e=Jt.V4,n,r){this.schema=t,this.version=e,n&&(this._recordBatches=n),r&&(this._dictionaryBatches=r)}static decode(t){t=new WS(q(t));let e=ue.getRootAsFooter(t),n=ft.decode(e.schema());return new _c(n,e)}static encode(t){let e=new zS,n=ft.encode(e,t.schema);ue.startRecordBatchesVector(e,t.numRecordBatches);for(let u of[...t.recordBatches()].slice().reverse())ui.encode(e,u);let r=e.endVector();ue.startDictionariesVector(e,t.numDictionaries);for(let u of[...t.dictionaryBatches()].slice().reverse())ui.encode(e,u);let a=e.endVector();return ue.startFooter(e),ue.addSchema(e,n),ue.addVersion(e,Jt.V4),ue.addRecordBatches(e,r),ue.addDictionaries(e,a),ue.finishFooterBuffer(e,ue.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var _c=class extends Gi{constructor(t,e){super(t,e.version()),this._footer=e}get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return ui.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return ui.decode(e)}return null}},ui=class{constructor(t,e,n){this.metaDataLength=t,this.offset=typeof n=="number"?n:n.low,this.bodyLength=typeof e=="number"?e:e.low}static decode(t){return new ui(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,r=new Zu(e.offset,0),a=new Zu(e.bodyLength,0);return Dn.createBlock(t,r,n,a)}};var Et=Object.freeze({done:!0,value:void 0}),$r=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},Bn=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},Fo=class extends Bn{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return L(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(Et);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return ne.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return ne.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return L(this,void 0,void 0,function*(){return yield this.abort(t),Et})}return(t){return L(this,void 0,void 0,function*(){return yield this.close(),Et})}read(t){return L(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return L(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(Et)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var Ai=class extends Fo{write(t){if((t=q(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?xr(this.toUint8Array(!0)):this.toUint8Array(!1).then(xr)}toUint8Array(t=!1){return t?Oe(this._values)[0]:(()=>L(this,void 0,void 0,function*(){var e,n;let r=[],a=0;try{for(var u=ze(this),_;_=yield u.next(),!_.done;){let m=_.value;r.push(m),a+=m.byteLength}}catch(m){e={error:m}}finally{try{_&&!_.done&&(n=u.return)&&(yield n.call(u))}finally{if(e)throw e.error}}return Oe(r,a)[0]}))()}},Ti=class{constructor(t){t&&(this.source=new pc(ne.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},Ae=class{constructor(t){t instanceof Ae?this.source=t.source:t instanceof Ai?this.source=new Xi(ne.fromAsyncIterable(t)):Hs(t)?this.source=new Xi(ne.fromNodeStream(t)):Dr(t)?this.source=new Xi(ne.fromDOMStream(t)):Ps(t)?this.source=new Xi(ne.fromDOMStream(t.body)):Ze(t)?this.source=new Xi(ne.fromIterable(t)):Qe(t)?this.source=new Xi(ne.fromAsyncIterable(t)):$e(t)&&(this.source=new Xi(ne.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},pc=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||Et)}return(t){return Object.create(this.source.return&&this.source.return(t)||Et)}},Xi=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return L(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return L(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return L(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return L(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return L(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||Et;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return L(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||Et;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var Gr=class extends Ti{constructor(t,e){super(),this.position=0,this.buffer=q(t),this.size=typeof e>"u"?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:r}=this;return e&&r<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,r+Math.min(n-r,t)),e.subarray(r,this.position)):null}readAt(t,e){let n=this.buffer,r=Math.min(this.size,t+e);return n?n.subarray(t,r):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},pn=class extends Ae{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>L(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return L(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return L(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return L(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:r}=this;if(e&&r<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let a=r,u=0,_=0,m=Math.min(n,a+Math.min(n-a,t)),k=new Uint8Array(Math.max(0,(this.position=m)-a));for(;(a+=_)<m&&(u+=_)<k.byteLength;)({bytesRead:_}=yield e.read(k,u,k.byteLength-u,a));return k}return null})}readAt(t,e){return L(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:r}=this;if(n&&t+e<r){let a=Math.min(r,t+e),u=new Uint8Array(a-t);return(yield n.read(u,0,e,t)).buffer}return new Uint8Array(e)})}close(){return L(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return L(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return L(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var mc={};kn(mc,{BaseInt64:()=>Xr,Int128:()=>Te,Int64:()=>ee,Uint64:()=>vt});function lr(i){return i<0&&(i=4294967295+i+1),`0x${i.toString(16)}`}var ur=8,yc=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],Xr=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),r=e[3]*n[3];this.buffer[0]=r&65535;let a=r>>>16;return r=e[2]*n[3],a+=r,r=e[3]*n[2]>>>0,a+=r,this.buffer[0]+=a<<16,this.buffer[1]=a>>>0<r?65536:0,this.buffer[1]+=a>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return`${lr(this.buffer[1])} ${lr(this.buffer[0])}`}},vt=class extends Xr{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return vt.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return vt.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,r=new vt(e);for(let a=0;a<n;){let u=ur<n-a?ur:n-a,_=new vt(new Uint32Array([Number.parseInt(t.slice(a,a+u),10),0])),m=new vt(new Uint32Array([yc[u],0]));r.times(m),r.plus(_),a+=u}return r}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,r=t.length;++n<r;)vt.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new vt(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new vt(new Uint32Array(t.buffer)).plus(e)}},ee=class extends Xr{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return ee.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return ee.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),r=t.length,a=new ee(e);for(let u=n?1:0;u<r;){let _=ur<r-u?ur:r-u,m=new ee(new Uint32Array([Number.parseInt(t.slice(u,u+_),10),0])),k=new ee(new Uint32Array([yc[_],0]));a.times(k),a.plus(m),u+=_}return n?a.negate():a}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,r=t.length;++n<r;)ee.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new ee(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new ee(new Uint32Array(t.buffer)).plus(e)}},Te=class{constructor(t){this.buffer=t}high(){return new ee(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new ee(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new vt(new Uint32Array([this.buffer[3],0])),n=new vt(new Uint32Array([this.buffer[2],0])),r=new vt(new Uint32Array([this.buffer[1],0])),a=new vt(new Uint32Array([this.buffer[0],0])),u=new vt(new Uint32Array([t.buffer[3],0])),_=new vt(new Uint32Array([t.buffer[2],0])),m=new vt(new Uint32Array([t.buffer[1],0])),k=new vt(new Uint32Array([t.buffer[0],0])),A=vt.multiply(a,k);this.buffer[0]=A.low();let D=new vt(new Uint32Array([A.high(),0]));return A=vt.multiply(r,k),D.plus(A),A=vt.multiply(a,m),D.plus(A),this.buffer[1]=D.low(),this.buffer[3]=D.lessThan(A)?1:0,this.buffer[2]=D.high(),new vt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(vt.multiply(n,k)).plus(vt.multiply(r,m)).plus(vt.multiply(a,_)),this.buffer[3]+=vt.multiply(e,k).plus(vt.multiply(n,m)).plus(vt.multiply(r,_)).plus(vt.multiply(a,u)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return`${lr(this.buffer[3])} ${lr(this.buffer[2])} ${lr(this.buffer[1])} ${lr(this.buffer[0])}`}static multiply(t,e){return new Te(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new Te(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return Te.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return Te.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),r=t.length,a=new Te(e);for(let u=n?1:0;u<r;){let _=ur<r-u?ur:r-u,m=new Te(new Uint32Array([Number.parseInt(t.slice(u,u+_),10),0,0,0])),k=new Te(new Uint32Array([yc[_],0,0,0]));a.times(k),a.plus(m),u+=_}return n?a.negate():a}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,r=t.length;++n<r;)Te.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var Kr=class extends Y{constructor(t,e,n,r){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=r}visit(t){return super.visit(t instanceof nt?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return tt({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===Ot.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return tt({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},Ao=class extends Kr{constructor(t,e,n,r){super(new Uint8Array(0),e,n,r),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):Tn(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return ct(Uint8Array,ct(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return ct(Uint8Array,ct(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return V.isTimestamp(t)?ct(Uint8Array,ee.convertArray(n[e])):(V.isInt(t)||V.isTime(t))&&t.bitWidth===64?ct(Uint8Array,ee.convertArray(n[e])):V.isDate(t)&&t.unit===re.MILLISECOND?ct(Uint8Array,ee.convertArray(n[e])):V.isDecimal(t)?ct(Uint8Array,Te.convertArray(n[e])):V.isBinary(t)||V.isFixedSizeBinary(t)?YS(n[e]):V.isBool(t)?Tn(n[e]):V.isUtf8(t)?sn(n[e].join("")):ct(Uint8Array,ct(t.ArrayType,n[e].map(r=>+r)))}};function YS(i){let t=i.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var dr=class extends gi{constructor(t){super(t),this._values=new dn(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,q(e))}_flushPending(t,e){let n=this._offsets,r=this._values.reserve(e).buffer,a=0;for(let[u,_]of t)if(_===void 0)n.set(u,0);else{let m=_.length;r.set(_,a),n.set(u,m),a+=m}}};var To=class extends Bt{constructor(t){super(t),this._values=new or}setValue(t,e){this._values.set(t,+e)}};var Rn=class extends qt{};Rn.prototype._setValue=Qa;var Jr=class extends Rn{};Jr.prototype._setValue=io;var qr=class extends Rn{};qr.prototype._setValue=no;var Qr=class extends qt{};Qr.prototype._setValue=ec;var Eo=class extends Bt{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new Me(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=On({type:this.type.indices,nullValues:e}),this.dictionary=On({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,r=this.valueToKey(e),a=n[r];return a===void 0&&(n[r]=a=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,a)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),r=this.indices.flush().clone(t);return r.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=r.dictionary,this.clear(),r}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:`${t}`}};var Zr=class extends qt{};Zr.prototype._setValue=qa;var xo=class extends Bt{setValue(t,e){let[n]=this.children,r=t*this.stride;for(let a=-1,u=e.length;++a<u;)n.set(r+a,e[a])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new oi(this.type.listSize,new nt(e,t.type,!0)),n}};var Mn=class extends qt{setValue(t,e){this._values.set(t,e)}},Do=class extends Mn{setValue(t,e){super.setValue(t,Or(e))}},Bo=class extends Mn{},Ro=class extends Mn{};var Ln=class extends qt{};Ln.prototype._setValue=ic;var ts=class extends Ln{};ts.prototype._setValue=ho;var es=class extends Ln{};es.prototype._setValue=_o;var Je=class extends qt{setValue(t,e){this._values.set(t,e)}},Oo=class extends Je{},Mo=class extends Je{},Lo=class extends Je{},Uo=class extends Je{},No=class extends Je{},Po=class extends Je{},Vo=class extends Je{},Ho=class extends Je{};var zo=class extends gi{constructor(t){super(t),this._offsets=new ar}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new ri(new nt(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[r,a]of t)if(typeof a>"u")e.set(r,0);else{let u=a.length,_=e.set(r,u).buffer[r];for(let m=-1;++m<u;)n.set(_+m,a[m])}}};var Wo=class extends gi{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),r=this._pending||(this._pending=new Map),a=r.get(t);a&&(this._pendingLength-=a.size),this._pendingLength+=n.size,r.set(t,n)}addChild(t,e=`${this.numChildren}`){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new ai(new nt(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[r,a]of t)if(a===void 0)e.set(r,0);else{let{[r]:u,[r+1]:_}=e.set(r,a.size).buffer;for(let m of a.entries())if(n.set(u,m),++u>=_)break}}};var Yo=class extends Bt{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var $o=class extends Bt{setValue(t,e){let{children:n,type:r}=this;switch(Array.isArray(e)||e.constructor){case!0:return r.children.forEach((a,u)=>n[u].set(t,e[u]));case Map:return r.children.forEach((a,u)=>n[u].set(t,e.get(a.name)));default:return r.children.forEach((a,u)=>n[u].set(t,e[a.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e=`${this.numChildren}`){let n=this.children.push(t);return this.type=new At([...this.type.children,new nt(e,t.type,!0)]),n}};var Ki=class extends qt{};Ki.prototype._setValue=Za;var is=class extends Ki{};is.prototype._setValue=ro;var ns=class extends Ki{};ns.prototype._setValue=so;var rs=class extends Ki{};rs.prototype._setValue=oo;var ss=class extends Ki{};ss.prototype._setValue=ao;var Ji=class extends qt{};Ji.prototype._setValue=tc;var os=class extends Ji{};os.prototype._setValue=co;var as=class extends Ji{};as.prototype._setValue=lo;var cs=class extends Ji{};cs.prototype._setValue=uo;var ls=class extends Ji{};ls.prototype._setValue=fo;var fr=class extends Bt{constructor(t){super(t),this._typeIds=new Yi(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let r=this.type.typeIdToChildIndex[n],a=this.children[r];a==null||a.set(t,e)}addChild(t,e=`${this.children.length}`){let n=this.children.push(t),{type:{children:r,mode:a,typeIds:u}}=this,_=[...r,new nt(e,t.type)];return this.type=new si(a,[...u,n],_),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},Go=class extends fr{},Xo=class extends fr{constructor(t){super(t),this._offsets=new Yi(new Int32Array(0))}setValue(t,e,n){let r=this._typeIds.set(t,n).buffer[t],a=this.getChildAt(this.type.typeIdToChildIndex[r]),u=this._offsets.set(t,a.length).buffer[t];a==null||a.set(u,e)}};var us=class extends gi{constructor(t){super(t),this._values=new dn(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,sn(e))}_flushPending(t,e){}};us.prototype._flushPending=dr.prototype._flushPending;var vc=class extends Y{visitNull(){return Yo}visitBool(){return To}visitInt(){return Je}visitInt8(){return Oo}visitInt16(){return Mo}visitInt32(){return Lo}visitInt64(){return Uo}visitUint8(){return No}visitUint16(){return Po}visitUint32(){return Vo}visitUint64(){return Ho}visitFloat(){return Mn}visitFloat16(){return Do}visitFloat32(){return Bo}visitFloat64(){return Ro}visitUtf8(){return us}visitBinary(){return dr}visitFixedSizeBinary(){return Zr}visitDate(){return Rn}visitDateDay(){return Jr}visitDateMillisecond(){return qr}visitTimestamp(){return Ki}visitTimestampSecond(){return is}visitTimestampMillisecond(){return ns}visitTimestampMicrosecond(){return rs}visitTimestampNanosecond(){return ss}visitTime(){return Ji}visitTimeSecond(){return os}visitTimeMillisecond(){return as}visitTimeMicrosecond(){return cs}visitTimeNanosecond(){return ls}visitDecimal(){return Qr}visitList(){return zo}visitStruct(){return $o}visitUnion(){return fr}visitDenseUnion(){return Xo}visitSparseUnion(){return Go}visitDictionary(){return Eo}visitInterval(){return Ln}visitIntervalDayTime(){return ts}visitIntervalYearMonth(){return es}visitFixedSizeList(){return xo}visitMap(){return Wo}},td=new vc;var J=class extends Y{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,r)=>this.compareFields(n,e[r]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function Ee(i,t){return t instanceof i.constructor}function ds(i,t){return i===t||Ee(i,t)}function qi(i,t){return i===t||Ee(i,t)&&i.bitWidth===t.bitWidth&&i.isSigned===t.isSigned}function Ko(i,t){return i===t||Ee(i,t)&&i.precision===t.precision}function $S(i,t){return i===t||Ee(i,t)&&i.byteWidth===t.byteWidth}function bc(i,t){return i===t||Ee(i,t)&&i.unit===t.unit}function fs(i,t){return i===t||Ee(i,t)&&i.unit===t.unit&&i.timezone===t.timezone}function hs(i,t){return i===t||Ee(i,t)&&i.unit===t.unit&&i.bitWidth===t.bitWidth}function GS(i,t){return i===t||Ee(i,t)&&i.children.length===t.children.length&&Ei.compareManyFields(i.children,t.children)}function XS(i,t){return i===t||Ee(i,t)&&i.children.length===t.children.length&&Ei.compareManyFields(i.children,t.children)}function gc(i,t){return i===t||Ee(i,t)&&i.mode===t.mode&&i.typeIds.every((e,n)=>e===t.typeIds[n])&&Ei.compareManyFields(i.children,t.children)}function KS(i,t){return i===t||Ee(i,t)&&i.id===t.id&&i.isOrdered===t.isOrdered&&Ei.visit(i.indices,t.indices)&&Ei.visit(i.dictionary,t.dictionary)}function wc(i,t){return i===t||Ee(i,t)&&i.unit===t.unit}function JS(i,t){return i===t||Ee(i,t)&&i.listSize===t.listSize&&i.children.length===t.children.length&&Ei.compareManyFields(i.children,t.children)}function qS(i,t){return i===t||Ee(i,t)&&i.keysSorted===t.keysSorted&&i.children.length===t.children.length&&Ei.compareManyFields(i.children,t.children)}J.prototype.visitNull=ds;J.prototype.visitBool=ds;J.prototype.visitInt=qi;J.prototype.visitInt8=qi;J.prototype.visitInt16=qi;J.prototype.visitInt32=qi;J.prototype.visitInt64=qi;J.prototype.visitUint8=qi;J.prototype.visitUint16=qi;J.prototype.visitUint32=qi;J.prototype.visitUint64=qi;J.prototype.visitFloat=Ko;J.prototype.visitFloat16=Ko;J.prototype.visitFloat32=Ko;J.prototype.visitFloat64=Ko;J.prototype.visitUtf8=ds;J.prototype.visitBinary=ds;J.prototype.visitFixedSizeBinary=$S;J.prototype.visitDate=bc;J.prototype.visitDateDay=bc;J.prototype.visitDateMillisecond=bc;J.prototype.visitTimestamp=fs;J.prototype.visitTimestampSecond=fs;J.prototype.visitTimestampMillisecond=fs;J.prototype.visitTimestampMicrosecond=fs;J.prototype.visitTimestampNanosecond=fs;J.prototype.visitTime=hs;J.prototype.visitTimeSecond=hs;J.prototype.visitTimeMillisecond=hs;J.prototype.visitTimeMicrosecond=hs;J.prototype.visitTimeNanosecond=hs;J.prototype.visitDecimal=ds;J.prototype.visitList=GS;J.prototype.visitStruct=XS;J.prototype.visitUnion=gc;J.prototype.visitDenseUnion=gc;J.prototype.visitSparseUnion=gc;J.prototype.visitDictionary=KS;J.prototype.visitInterval=wc;J.prototype.visitIntervalDayTime=wc;J.prototype.visitIntervalYearMonth=wc;J.prototype.visitFixedSizeList=JS;J.prototype.visitMap=qS;var Ei=new J;function Un(i,t){return Ei.compareSchemas(i,t)}function ed(i,t){return Ei.compareFields(i,t)}function id(i,t){return Ei.visit(i,t)}function On(i){let t=i.type,e=new(td.getVisitFn(t)())(i);if(t.children&&t.children.length>0){let n=i.children||[],r={nullValues:i.nullValues},a=Array.isArray(n)?(u,_)=>n[_]||r:({name:u})=>n[u]||r;for(let[u,_]of t.children.entries()){let{type:m}=_,k=a(_,u);e.children.push(On(Object.assign(Object.assign({},k),{type:m})))}}return e}function Jo(i,t){return QS(i,t.map(e=>e.data.concat()))}function QS(i,t){let e=[...i.fields],n=[],r={numBatches:t.reduce((D,B)=>Math.max(D,B.length),0)},a=0,u=0,_=-1,m=t.length,k,A=[];for(;r.numBatches-- >0;){for(u=Number.POSITIVE_INFINITY,_=-1;++_<m;)A[_]=k=t[_].shift(),u=Math.min(u,k?k.length:u);Number.isFinite(u)&&(A=ZS(e,u,A,t,r),u>0&&(n[a++]=tt({type:new At(e),length:u,nullCount:0,children:A.slice()})))}return[i=i.assign(e),n.map(D=>new Ct(i,D))]}function ZS(i,t,e,n,r){var a;let u=(t+63&-64)>>3;for(let _=-1,m=n.length;++_<m;){let k=e[_],A=k==null?void 0:k.length;if(A>=t)A===t?e[_]=k:(e[_]=k.slice(0,t),r.numBatches=Math.max(r.numBatches,n[_].unshift(k.slice(t,A-t))));else{let D=i[_];i[_]=D.clone({nullable:!0}),e[_]=(a=k==null?void 0:k._changeLengthAndBackfillNullBitmap(t))!==null&&a!==void 0?a:tt({type:D.type,length:t,nullCount:t,nullBitmap:new Uint8Array(u)})}}return e}var nd,Ut=class{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new ft([]),this._offsets=[0],this;let r,a;t[0]instanceof ft&&(r=t.shift()),t[t.length-1]instanceof Uint32Array&&(a=t.pop());let u=m=>{if(m){if(m instanceof Ct)return[m];if(m instanceof Ut)return m.batches;if(m instanceof mt){if(m.type instanceof At)return[new Ct(new ft(m.type.children),m)]}else{if(Array.isArray(m))return m.flatMap(k=>u(k));if(typeof m[Symbol.iterator]=="function")return[...m].flatMap(k=>u(k));if(typeof m=="object"){let k=Object.keys(m),A=k.map(R=>new Z([m[R]])),D=new ft(k.map((R,_t)=>new nt(String(R),A[_t].type))),[,B]=Jo(D,A);return B.length===0?[new Ct(m)]:B}}}return[]},_=t.flatMap(m=>u(m));if(r=(n=r!=null?r:(e=_[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new ft([]),!(r instanceof ft))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let m of _){if(!(m instanceof Ct))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!Un(r,m.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=r,this.batches=_,this._offsets=a!=null?a:bo(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=vo(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?rr.visit(new Z(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return`[
  ${this.toArray().join(`,
  `)}
]`}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:r})=>r));return new Ut(e,n.map(r=>new Ct(e,r)))}slice(t,e){let n=this.schema;[t,e]=Mr({length:this.numRows},t,e);let r=go(this.data,this._offsets,t,e);return new Ut(n,r.map(a=>new Ct(n,a)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],r=tt({type:n,length:0,nullCount:0});e.push(r._changeLengthAndBackfillNullBitmap(this.numRows))}return new Z(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(r=>r.name===t),e)}setChildAt(t,e){let n=this.schema,r=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new Z([tt({type:new ye,length:this.numRows})]));let a=n.fields.slice(),u=a[t].clone({type:e.type}),_=this.schema.fields.map((m,k)=>this.getChildAt(k));[a[t],_[t]]=[u,e],[n,r]=Jo(n,_)}return new Ut(n,r)}select(t){let e=this.schema.fields.reduce((n,r,a)=>n.set(r.name,a),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(r=>r.selectAt(t));return new Ut(e,n)}assign(t){let e=this.schema.fields,[n,r]=t.schema.fields.reduce((_,m,k)=>{let[A,D]=_,B=e.findIndex(R=>R.name===m.name);return~B?D[B]=k:A.push(k),_},[[],[]]),a=this.schema.assign(t.schema),u=[...e.map((_,m)=>[m,r[m]]).map(([_,m])=>m===void 0?this.getChildAt(_):t.getChildAt(m)),...n.map(_=>t.getChildAt(_))].filter(Boolean);return new Ut(...Jo(a,u))}};nd=Symbol.toStringTag;Ut[nd]=(i=>(i.schema=null,i.batches=[],i._offsets=new Uint32Array([0]),i._nullCount=-1,i[Symbol.isConcatSpreadable]=!0,i.isValid=un(Nr),i.get=un(zt.getVisitFn(F.Struct)),i.set=wo(se.getVisitFn(F.Struct)),i.indexOf=jo(xn.getVisitFn(F.Struct)),i.getByteLength=un(Ue.getVisitFn(F.Struct)),"Table"))(Ut.prototype);var sd,Ct=class{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof ft))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=tt({nullCount:0,type:new At(this.schema.fields),children:this.schema.fields.map(e=>tt({type:e.type,nullCount:0}))})]=t,!(this.data instanceof mt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=rd(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:r,length:a}=Object.keys(e).reduce((m,k,A)=>(m.children[A]=e[k],m.length=Math.max(m.length,e[k].length),m.fields[A]=nt.new({name:k,type:e[k].type,nullable:!0}),m),{length:0,fields:new Array,children:new Array}),u=new ft(n),_=tt({type:new At(n),length:a,children:r,nullCount:0});[this.schema,this.data]=rd(u,_.children,a);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=od(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return zt.visit(this.data,t)}set(t,e){return se.visit(this.data,t,e)}indexOf(t,e){return xn.visit(this.data,t,e)}getByteLength(t){return Ue.visit(this.data,t)}[Symbol.iterator](){return rr.visit(new Z([this.data]))}toArray(){return[...this]}concat(...t){return new Ut(this.schema,[this,...t])}slice(t,e){let[n]=new Z([this.data]).slice(t,e).data;return new Ct(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new Z([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(r=>r.name===t),e)}setChildAt(t,e){let n=this.schema,r=this.data;if(t>-1&&t<this.numCols){e||(e=new Z([tt({type:new ye,length:this.numRows})]));let a=n.fields.slice(),u=r.children.slice(),_=a[t].clone({type:e.type});[a[t],u[t]]=[_,e.data[0]],n=new ft(a,new Map(this.schema.metadata)),r=tt({type:new At(a),children:u})}return new Ct(n,r)}select(t){let e=this.schema.select(t),n=new At(e.fields),r=[];for(let a of t){let u=this.schema.fields.findIndex(_=>_.name===a);~u&&(r[u]=this.data.children[u])}return new Ct(e,tt({type:n,length:this.numRows,children:r}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(a=>this.data.children[a]).filter(Boolean),r=tt({type:new At(e.fields),length:this.numRows,children:n});return new Ct(e,r)}};sd=Symbol.toStringTag;Ct[sd]=(i=>(i._nullCount=-1,i[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(Ct.prototype);function rd(i,t,e=t.reduce((n,r)=>Math.max(n,r.length),0)){var n;let r=[...i.fields],a=[...t],u=(e+63&-64)>>3;for(let[_,m]of i.fields.entries()){let k=t[_];(!k||k.length!==e)&&(r[_]=m.clone({nullable:!0}),a[_]=(n=k==null?void 0:k._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:tt({type:m.type,length:e,nullCount:e,nullBitmap:new Uint8Array(u)}))}return[i.assign(r),tt({type:new At(r),length:e,children:a})]}function od(i,t,e=new Map){for(let n=-1,r=i.length;++n<r;){let u=i[n].type,_=t[n];if(V.isDictionary(u)){if(!e.has(u.id))_.dictionary&&e.set(u.id,_.dictionary);else if(e.get(u.id)!==_.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}u.children&&u.children.length>0&&od(u.children,_.children,e)}return e}var Nn=class extends Ct{constructor(t){let e=t.fields.map(r=>tt({type:r.type})),n=tt({type:new At(t.fields),nullCount:0,children:e});super(t,n)}};var _s;(function(i){i[i.BUFFER=0]="BUFFER"})(_s||(_s={}));var ps;(function(i){i[i.LZ4_FRAME=0]="LZ4_FRAME",i[i.ZSTD=1]="ZSTD"})(ps||(ps={}));var di=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new di).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new di).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):ps.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):_s.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,ps.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,_s.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return di.startBodyCompression(t),di.addCodec(t,e),di.addMethod(t,n),di.endBodyCompression(t)}};var hr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var _r=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var de=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new de).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new de).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new _r).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new hr).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new di).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var qe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new qe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new qe).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new de).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var pr;(function(i){i[i.NONE=0]="NONE",i[i.Schema=1]="Schema",i[i.DictionaryBatch=2]="DictionaryBatch",i[i.RecordBatch=3]="RecordBatch",i[i.Tensor=4]="Tensor",i[i.SparseTensor=5]="SparseTensor"})(pr||(pr={}));var Vt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new Vt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new Vt).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):fn.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):pr.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new Tt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,fn.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,pr.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,t.createLong(0,0))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,r,a,u){return Vt.startMessage(t),Vt.addVersion(t,e),Vt.addHeaderType(t,n),Vt.addHeader(t,r),Vt.addBodyLength(t,a),Vt.addCustomMetadata(t,u),Vt.endMessage(t)}};var eI=Wt,jc=class extends Y{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return ki.startNull(e),ki.endNull(e)}visitInt(t,e){return Qt.startInt(e),Qt.addBitWidth(e,t.bitWidth),Qt.addIsSigned(e,t.isSigned),Qt.endInt(e)}visitFloat(t,e){return ke.startFloatingPoint(e),ke.addPrecision(e,t.precision),ke.endFloatingPoint(e)}visitBinary(t,e){return ji.startBinary(e),ji.endBinary(e)}visitBool(t,e){return Si.startBool(e),Si.endBool(e)}visitUtf8(t,e){return Fi.startUtf8(e),Fi.endUtf8(e)}visitDecimal(t,e){return Zt.startDecimal(e),Zt.addScale(e,t.scale),Zt.addPrecision(e,t.precision),Zt.addBitWidth(e,t.bitWidth),Zt.endDecimal(e)}visitDate(t,e){return je.startDate(e),je.addUnit(e,t.unit),je.endDate(e)}visitTime(t,e){return ce.startTime(e),ce.addUnit(e,t.unit),ce.addBitWidth(e,t.bitWidth),ce.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return le.startTimestamp(e),le.addUnit(e,t.unit),n!==void 0&&le.addTimezone(e,n),le.endTimestamp(e)}visitInterval(t,e){return Ce.startInterval(e),Ce.addUnit(e,t.unit),Ce.endInterval(e)}visitList(t,e){return Ii.startList(e),Ii.endList(e)}visitStruct(t,e){return Ci.startStruct_(e),Ci.endStruct_(e)}visitUnion(t,e){te.startTypeIdsVector(e,t.typeIds.length);let n=te.createTypeIdsVector(e,t.typeIds);return te.startUnion(e),te.addMode(e,t.mode),te.addTypeIds(e,n),te.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Ne.startDictionaryEncoding(e),Ne.addId(e,new eI(t.id,0)),Ne.addIsOrdered(e,t.isOrdered),n!==void 0&&Ne.addIndexType(e,n),Ne.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return Se.startFixedSizeBinary(e),Se.addByteWidth(e,t.byteWidth),Se.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return Ie.startFixedSizeList(e),Ie.addListSize(e,t.listSize),Ie.endFixedSizeList(e)}visitMap(t,e){return Fe.startMap(e),Fe.addKeysSorted(e,t.keysSorted),Fe.endMap(e)}},qo=new jc;function ud(i,t=new Map){return new ft(iI(i,t),Qo(i.customMetadata),t)}function Sc(i){return new oe(i.count,fd(i.columns),hd(i.columns))}function dd(i){return new De(Sc(i.data),i.id,i.isDelta)}function iI(i,t){return(i.fields||[]).filter(Boolean).map(e=>nt.fromJSON(e,t))}function ad(i,t){return(i.children||[]).filter(Boolean).map(e=>nt.fromJSON(e,t))}function fd(i){return(i||[]).reduce((t,e)=>[...t,new fi(e.count,nI(e.VALIDITY)),...fd(e.children)],[])}function hd(i,t=[]){for(let e=-1,n=(i||[]).length;++e<n;){let r=i[e];r.VALIDITY&&t.push(new xe(t.length,r.VALIDITY.length)),r.TYPE&&t.push(new xe(t.length,r.TYPE.length)),r.OFFSET&&t.push(new xe(t.length,r.OFFSET.length)),r.DATA&&t.push(new xe(t.length,r.DATA.length)),t=hd(r.children,t)}return t}function nI(i){return(i||[]).reduce((t,e)=>t+ +(e===0),0)}function _d(i,t){let e,n,r,a,u,_;return!t||!(a=i.dictionary)?(u=ld(i,ad(i,t)),r=new nt(i.name,u,i.nullable,Qo(i.customMetadata))):t.has(e=a.id)?(n=(n=a.indexType)?cd(n):new mi,_=new Me(t.get(e),n,e,a.isOrdered),r=new nt(i.name,_,i.nullable,Qo(i.customMetadata))):(n=(n=a.indexType)?cd(n):new mi,t.set(e,u=ld(i,ad(i,t))),_=new Me(u,n,e,a.isOrdered),r=new nt(i.name,_,i.nullable,Qo(i.customMetadata))),r||null}function Qo(i){return new Map(Object.entries(i||{}))}function cd(i){return new Pt(i.isSigned,i.bitWidth)}function ld(i,t){let e=i.type.name;switch(e){case"NONE":return new ye;case"null":return new ye;case"binary":return new Mi;case"utf8":return new Li;case"bool":return new Ui;case"list":return new ri((t||[])[0]);case"struct":return new At(t||[]);case"struct_":return new At(t||[])}switch(e){case"int":{let n=i.type;return new Pt(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=i.type;return new we(Dt[n.precision])}case"decimal":{let n=i.type;return new Ni(n.scale,n.precision,n.bitWidth)}case"date":{let n=i.type;return new Pi(re[n.unit])}case"time":{let n=i.type;return new ni(ut[n.unit],n.bitWidth)}case"timestamp":{let n=i.type;return new Vi(ut[n.unit],n.timezone)}case"interval":{let n=i.type;return new Hi(pe[n.unit])}case"union":{let n=i.type;return new si(Ot[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=i.type;return new zi(n.byteWidth)}case"fixedsizelist":{let n=i.type;return new oi(n.listSize,(t||[])[0])}case"map":{let n=i.type;return new ai((t||[])[0],n.keysSorted)}}throw new Error(`Unrecognized type: "${e}"`)}var Pn=Wt,rI=$i,sI=me,$t=class{constructor(t,e,n,r){this._version=e,this._headerType=n,this.body=new Uint8Array(0),r&&(this._createHeader=()=>r),this._bodyLength=typeof t=="number"?t:t.low}static fromJSON(t,e){let n=new $t(0,Jt.V4,e);return n._createHeader=oI(t,e),n}static decode(t){t=new sI(q(t));let e=Vt.getRootAsMessage(t),n=e.bodyLength(),r=e.version(),a=e.headerType(),u=new $t(n,r,a);return u._createHeader=aI(e,a),u}static encode(t){let e=new rI,n=-1;return t.isSchema()?n=ft.encode(e,t.header()):t.isRecordBatch()?n=oe.encode(e,t.header()):t.isDictionaryBatch()&&(n=De.encode(e,t.header())),Vt.startMessage(e),Vt.addVersion(e,Jt.V4),Vt.addHeader(e,n),Vt.addHeaderType(e,t.headerType),Vt.addBodyLength(e,new Pn(t.bodyLength,0)),Vt.finishMessageBuffer(e,Vt.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof ft)return new $t(0,Jt.V4,pt.Schema,t);if(t instanceof oe)return new $t(e,Jt.V4,pt.RecordBatch,t);if(t instanceof De)return new $t(e,Jt.V4,pt.DictionaryBatch,t);throw new Error(`Unrecognized Message header: ${t}`)}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===pt.Schema}isRecordBatch(){return this.headerType===pt.RecordBatch}isDictionaryBatch(){return this.headerType===pt.DictionaryBatch}},oe=class{constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=typeof t=="number"?t:t.low}get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}},De=class{constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=typeof e=="number"?e:e.low}get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}},xe=class{constructor(t,e){this.offset=typeof t=="number"?t:t.low,this.length=typeof e=="number"?e:e.low}},fi=class{constructor(t,e){this.length=typeof t=="number"?t:t.low,this.nullCount=typeof e=="number"?e:e.low}};function oI(i,t){return()=>{switch(t){case pt.Schema:return ft.fromJSON(i);case pt.RecordBatch:return oe.fromJSON(i);case pt.DictionaryBatch:return De.fromJSON(i)}throw new Error(`Unrecognized Message type: { name: ${pt[t]}, type: ${t} }`)}}function aI(i,t){return()=>{switch(t){case pt.Schema:return ft.decode(i.header(new Mt));case pt.RecordBatch:return oe.decode(i.header(new de),i.version());case pt.DictionaryBatch:return De.decode(i.header(new qe),i.version())}throw new Error(`Unrecognized Message type: { name: ${pt[t]}, type: ${t} }`)}}nt.encode=vI;nt.decode=yI;nt.fromJSON=_d;ft.encode=mI;ft.decode=cI;ft.fromJSON=ud;oe.encode=bI;oe.decode=lI;oe.fromJSON=Sc;De.encode=gI;De.decode=uI;De.fromJSON=dd;fi.encode=wI;fi.decode=fI;xe.encode=jI;xe.decode=dI;function cI(i,t=new Map){let e=pI(i,t);return new ft(e,Zo(i),t)}function lI(i,t=Jt.V4){if(i.compression()!==null)throw new Error("Record batch compression not implemented");return new oe(i.length(),hI(i),_I(i,t))}function uI(i,t=Jt.V4){return new De(oe.decode(i.data(),t),i.id(),i.isDelta())}function dI(i){return new xe(i.offset(),i.length())}function fI(i){return new fi(i.length(),i.nullCount())}function hI(i){let t=[];for(let e,n=-1,r=-1,a=i.nodesLength();++n<a;)(e=i.nodes(n))&&(t[++r]=fi.decode(e));return t}function _I(i,t){let e=[];for(let n,r=-1,a=-1,u=i.buffersLength();++r<u;)(n=i.buffers(r))&&(t<Jt.V4&&(n.bb_pos+=8*(r+1)),e[++a]=xe.decode(n));return e}function pI(i,t){let e=[];for(let n,r=-1,a=-1,u=i.fieldsLength();++r<u;)(n=i.fields(r))&&(e[++a]=nt.decode(n,t));return e}function pd(i,t){let e=[];for(let n,r=-1,a=-1,u=i.childrenLength();++r<u;)(n=i.children(r))&&(e[++a]=nt.decode(n,t));return e}function yI(i,t){let e,n,r,a,u,_;return!t||!(_=i.dictionary())?(r=md(i,pd(i,t)),n=new nt(i.name(),r,i.nullable(),Zo(i))):t.has(e=_.id().low)?(a=(a=_.indexType())?yd(a):new mi,u=new Me(t.get(e),a,e,_.isOrdered()),n=new nt(i.name(),u,i.nullable(),Zo(i))):(a=(a=_.indexType())?yd(a):new mi,t.set(e,r=md(i,pd(i,t))),u=new Me(r,a,e,_.isOrdered()),n=new nt(i.name(),u,i.nullable(),Zo(i))),n||null}function Zo(i){let t=new Map;if(i)for(let e,n,r=-1,a=Math.trunc(i.customMetadataLength());++r<a;)(e=i.customMetadata(r))&&(n=e.key())!=null&&t.set(n,e.value());return t}function yd(i){return new Pt(i.isSigned(),i.bitWidth())}function md(i,t){let e=i.typeType();switch(e){case Rt.NONE:return new ye;case Rt.Null:return new ye;case Rt.Binary:return new Mi;case Rt.Utf8:return new Li;case Rt.Bool:return new Ui;case Rt.List:return new ri((t||[])[0]);case Rt.Struct_:return new At(t||[])}switch(e){case Rt.Int:{let n=i.type(new Qt);return new Pt(n.isSigned(),n.bitWidth())}case Rt.FloatingPoint:{let n=i.type(new ke);return new we(n.precision())}case Rt.Decimal:{let n=i.type(new Zt);return new Ni(n.scale(),n.precision(),n.bitWidth())}case Rt.Date:{let n=i.type(new je);return new Pi(n.unit())}case Rt.Time:{let n=i.type(new ce);return new ni(n.unit(),n.bitWidth())}case Rt.Timestamp:{let n=i.type(new le);return new Vi(n.unit(),n.timezone())}case Rt.Interval:{let n=i.type(new Ce);return new Hi(n.unit())}case Rt.Union:{let n=i.type(new te);return new si(n.mode(),n.typeIdsArray()||[],t||[])}case Rt.FixedSizeBinary:{let n=i.type(new Se);return new zi(n.byteWidth())}case Rt.FixedSizeList:{let n=i.type(new Ie);return new oi(n.listSize(),(t||[])[0])}case Rt.Map:{let n=i.type(new Fe);return new ai((t||[])[0],n.keysSorted())}}throw new Error(`Unrecognized type: "${Rt[e]}" (${e})`)}function mI(i,t){let e=t.fields.map(a=>nt.encode(i,a));Mt.startFieldsVector(i,e.length);let n=Mt.createFieldsVector(i,e),r=t.metadata&&t.metadata.size>0?Mt.createCustomMetadataVector(i,[...t.metadata].map(([a,u])=>{let _=i.createString(`${a}`),m=i.createString(`${u}`);return Tt.startKeyValue(i),Tt.addKey(i,_),Tt.addValue(i,m),Tt.endKeyValue(i)})):-1;return Mt.startSchema(i),Mt.addFields(i,n),Mt.addEndianness(i,SI?hn.Little:hn.Big),r!==-1&&Mt.addCustomMetadata(i,r),Mt.endSchema(i)}function vI(i,t){let e=-1,n=-1,r=-1,a=t.type,u=t.typeId;V.isDictionary(a)?(u=a.dictionary.typeId,r=qo.visit(a,i),n=qo.visit(a.dictionary,i)):n=qo.visit(a,i);let _=(a.children||[]).map(A=>nt.encode(i,A)),m=Yt.createChildrenVector(i,_),k=t.metadata&&t.metadata.size>0?Yt.createCustomMetadataVector(i,[...t.metadata].map(([A,D])=>{let B=i.createString(`${A}`),R=i.createString(`${D}`);return Tt.startKeyValue(i),Tt.addKey(i,B),Tt.addValue(i,R),Tt.endKeyValue(i)})):-1;return t.name&&(e=i.createString(t.name)),Yt.startField(i),Yt.addType(i,n),Yt.addTypeType(i,u),Yt.addChildren(i,m),Yt.addNullable(i,!!t.nullable),e!==-1&&Yt.addName(i,e),r!==-1&&Yt.addDictionary(i,r),k!==-1&&Yt.addCustomMetadata(i,k),Yt.endField(i)}function bI(i,t){let e=t.nodes||[],n=t.buffers||[];de.startNodesVector(i,e.length);for(let u of e.slice().reverse())fi.encode(i,u);let r=i.endVector();de.startBuffersVector(i,n.length);for(let u of n.slice().reverse())xe.encode(i,u);let a=i.endVector();return de.startRecordBatch(i),de.addLength(i,new Pn(t.length,0)),de.addNodes(i,r),de.addBuffers(i,a),de.endRecordBatch(i)}function gI(i,t){let e=oe.encode(i,t.data);return qe.startDictionaryBatch(i),qe.addId(i,new Pn(t.id,0)),qe.addIsDelta(i,t.isDelta),qe.addData(i,e),qe.endDictionaryBatch(i)}function wI(i,t){return _r.createFieldNode(i,new Pn(t.length,0),new Pn(t.nullCount,0))}function jI(i,t){return hr.createBuffer(i,new Pn(t.offset,0),new Pn(t.length,0))}var SI=(()=>{let i=new ArrayBuffer(2);return new DataView(i).setInt16(0,256,!0),new Int16Array(i)[0]===256})();var kc=i=>`Expected ${pt[i]} Message in stream, but was null or length 0.`,Cc=i=>`Header pointer of flatbuffer-encoded ${pt[i]} Message is null or length 0.`,vd=(i,t)=>`Expected to read ${i} metadata bytes, but only read ${t}.`,bd=(i,t)=>`Expected to read ${i} bytes for message body, but only read ${t}.`,yr=class{constructor(t){this.source=t instanceof Ti?t:new Ti(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?Et:t.value===-1&&(t=this.readMetadataLength()).done?Et:(t=this.readMetadata(t.value)).done?Et:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(kc(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=q(this.source.read(t));if(e.byteLength<t)throw new Error(bd(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=pt.Schema,n=this.readMessage(e),r=n==null?void 0:n.header();if(t&&!r)throw new Error(Cc(e));return r}readMetadataLength(){let t=this.source.read(ta),e=t&&new me(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return Et;if(e.byteLength<t)throw new Error(vd(t,e.byteLength));return{done:!1,value:$t.decode(e)}}},ys=class{constructor(t,e){this.source=t instanceof Ae?t:Ns(t)?new pn(t,e):new Ae(t)}[Symbol.asyncIterator](){return this}next(){return L(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?Et:t.value===-1&&(t=yield this.readMetadataLength()).done?Et:(t=yield this.readMetadata(t.value)).done?Et:t})}throw(t){return L(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return L(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return L(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(kc(t));return e.value})}readMessageBody(t){return L(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=q(yield this.source.read(t));if(e.byteLength<t)throw new Error(bd(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return L(this,void 0,void 0,function*(){let e=pt.Schema,n=yield this.readMessage(e),r=n==null?void 0:n.header();if(t&&!r)throw new Error(Cc(e));return r})}readMetadataLength(){return L(this,void 0,void 0,function*(){let t=yield this.source.read(ta),e=t&&new me(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return L(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return Et;if(e.byteLength<t)throw new Error(vd(t,e.byteLength));return{done:!1,value:$t.decode(e)}})}},ms=class extends yr{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof $r?t:new $r(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:$t.fromJSON(t.schema,pt.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:$t.fromJSON(e,pt.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:$t.fromJSON(e,pt.RecordBatch)}}return this._body=[],Et}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((r,a)=>[...r,...a.VALIDITY&&[a.VALIDITY]||[],...a.TYPE&&[a.TYPE]||[],...a.OFFSET&&[a.OFFSET]||[],...a.DATA&&[a.DATA]||[],...e(a.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(kc(t));return e.value}readSchema(){let t=pt.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(Cc(t));return n}},ta=4,Ic="ARROW1",mr=new Uint8Array(Ic.length);for(let i=0;i<Ic.length;i+=1)mr[i]=Ic.codePointAt(i);function ea(i,t=0){for(let e=-1,n=mr.length;++e<n;)if(mr[e]!==i[t+e])return!1;return!0}var vr=mr.length,Fc=vr+ta,gd=vr*2+ta;var Ht=class extends Bn{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return Qe(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return ne.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return ne.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof Ht?t:Ls(t)?kI(t):Ns(t)?AI(t):Qe(t)?(()=>L(this,void 0,void 0,function*(){return yield Ht.from(yield t)}))():Ps(t)||Dr(t)||Hs(t)||$e(t)?FI(new Ae(t)):CI(new Ti(t))}static readAll(t){return t instanceof Ht?t.isSync()?wd(t):jd(t):Ls(t)||ArrayBuffer.isView(t)||Ze(t)||Us(t)?wd(t):jd(t)}},xi=class extends Ht{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return ge(this,arguments,function*(){yield at(yield*Kn(ze(this[Symbol.iterator]())))})}},yn=class extends Ht{constructor(t){super(t),this._impl=t}readAll(){var t,e;return L(this,void 0,void 0,function*(){let n=new Array;try{for(var r=ze(this),a;a=yield r.next(),!a.done;){let u=a.value;n.push(u)}}catch(u){t={error:u}}finally{try{a&&!a.done&&(e=r.return)&&(yield e.call(r))}finally{if(t)throw t.error}}return n})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},mn=class extends xi{constructor(t){super(t),this._impl=t}},vs=class extends yn{constructor(t){super(t),this._impl=t}},ia=class{constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),r=tt({type:new At(this.schema.fields),length:t.length,children:n});return new Ct(this.schema,r)}_loadDictionaryBatch(t,e){let{id:n,isDelta:r}=t,{dictionaries:a,schema:u}=this,_=a.get(n);if(r||!_){let m=u.dictionaries.get(n),k=this._loadVectors(t.data,e,[m]);return(_&&r?_.concat(new Z(k)):new Z(k)).memoize()}return _.memoize()}_loadVectors(t,e,n){return new Kr(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},br=class extends ia{constructor(t,e){super(e),this._reader=Ls(t)?new ms(this._handle=t):new yr(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=Sd(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):Et}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):Et}next(){if(this.closed)return Et;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),r=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,r)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),r=e.readMessageBody(t.bodyLength),a=this._loadDictionaryBatch(n,r);this.dictionaries.set(n.id,a)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Nn(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},gr=class extends ia{constructor(t,e){super(e),this._reader=new ys(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return L(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return L(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=Sd(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return L(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):Et})}return(t){return L(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):Et})}next(){return L(this,void 0,void 0,function*(){if(this.closed)return Et;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),r=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,r)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),r=yield e.readMessageBody(t.bodyLength),a=this._loadDictionaryBatch(n,r);this.dictionaries.set(n.id,a)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Nn(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return L(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},na=class extends br{constructor(t,e){super(t instanceof Gr?t:new Gr(t),e)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let r=this._reader.readMessage(pt.RecordBatch);if(r!=null&&r.isRecordBatch()){let a=r.header(),u=this._reader.readMessageBody(r.bodyLength);return this._loadRecordBatch(a,u)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let r=this._reader.readMessage(pt.DictionaryBatch);if(r!=null&&r.isDictionaryBatch()){let a=r.header(),u=this._reader.readMessageBody(r.bodyLength),_=this._loadDictionaryBatch(a,u);this.dictionaries.set(a.id,_)}}}_readFooter(){let{_handle:t}=this,e=t.size-Fc,n=t.readInt32(e),r=t.readAt(e-n,n);return Gi.decode(r)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},Ac=class extends gr{constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,r=e[0]instanceof Map?e.shift():void 0;super(t instanceof pn?t:new pn(t,n),r)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return L(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return L(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let r=yield this._reader.readMessage(pt.RecordBatch);if(r!=null&&r.isRecordBatch()){let a=r.header(),u=yield this._reader.readMessageBody(r.bodyLength);return this._loadRecordBatch(a,u)}}return null})}_readDictionaryBatch(t){var e;return L(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let r=yield this._reader.readMessage(pt.DictionaryBatch);if(r!=null&&r.isDictionaryBatch()){let a=r.header(),u=yield this._reader.readMessageBody(r.bodyLength),_=this._loadDictionaryBatch(a,u);this.dictionaries.set(a.id,_)}}})}_readFooter(){return L(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-Fc,n=yield t.readInt32(e),r=yield t.readAt(e-n,n);return Gi.decode(r)})}_readNextMessageAndValidate(t){return L(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},Tc=class extends br{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new Ao(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function Sd(i,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:i.autoDestroy}function*wd(i){let t=Ht.from(i);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function jd(i){return ge(this,arguments,function*(){let e=yield at(Ht.from(i));try{if(!(yield at(e.open({autoDestroy:!1}))).closed)do yield yield at(e);while(!(yield at(e.reset().open())).closed)}finally{yield at(e.cancel())}})}function kI(i){return new xi(new Tc(i))}function CI(i){let t=i.peek(vr+7&-8);return t&&t.byteLength>=4?ea(t)?new mn(new na(i.read())):new xi(new br(i)):new xi(new br(function*(){}()))}function FI(i){return L(this,void 0,void 0,function*(){let t=yield i.peek(vr+7&-8);return t&&t.byteLength>=4?ea(t)?new mn(new na(yield i.read())):new yn(new gr(i)):new yn(new gr(function(){return ge(this,arguments,function*(){})}()))})}function AI(i){return L(this,void 0,void 0,function*(){let{size:t}=yield i.stat(),e=new pn(i,t);return t>=gd&&ea(yield e.readAt(0,vr+7&-8))?new vs(new Ac(e)):new yn(new gr(e))})}var Lt=class extends Y{constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}static assemble(...t){let e=r=>r.flatMap(a=>Array.isArray(a)?e(a):a instanceof Ct?a.data.children:a.data),n=new Lt;return n.visitMany(e(t)),n}visit(t){if(t instanceof Z)return this.visitMany(t.data),this;let{type:e}=t;if(!V.isDictionary(e)){let{length:n,nullCount:r}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");V.isNull(e)||hi.call(this,r<=0?new Uint8Array(0):nr(t.offset,n,t.nullBitmap)),this.nodes.push(new fi(n,r))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function hi(i){let t=i.byteLength+7&-8;return this.buffers.push(i),this.bufferRegions.push(new xe(this._byteLength,t)),this._byteLength+=t,this}function TI(i){let{type:t,length:e,typeIds:n,valueOffsets:r}=i;if(hi.call(this,n),t.mode===Ot.Sparse)return Ec.call(this,i);if(t.mode===Ot.Dense){if(i.offset<=0)return hi.call(this,r),Ec.call(this,i);{let a=n.reduce((A,D)=>Math.max(A,D),n[0]),u=new Int32Array(a+1),_=new Int32Array(a+1).fill(-1),m=new Int32Array(e),k=Br(-r[0],e,r);for(let A,D,B=-1;++B<e;)(D=_[A=n[B]])===-1&&(D=_[A]=k[A]),m[B]=k[B]-D,++u[A];hi.call(this,m);for(let A,D=-1,B=t.children.length;++D<B;)if(A=i.children[D]){let R=t.typeIds[D],_t=Math.min(e,u[R]);this.visit(A.slice(_[R],_t))}}}return this}function EI(i){let t;return i.nullCount>=i.length?hi.call(this,new Uint8Array(0)):(t=i.values)instanceof Uint8Array?hi.call(this,nr(i.offset,i.length,t)):hi.call(this,Tn(i.values))}function vn(i){return hi.call(this,i.values.subarray(0,i.length*i.stride))}function Id(i){let{length:t,values:e,valueOffsets:n}=i,r=n[0],a=n[t],u=Math.min(a-r,e.byteLength-r);return hi.call(this,Br(-n[0],t,n)),hi.call(this,e.subarray(r,r+u)),this}function xc(i){let{length:t,valueOffsets:e}=i;return e&&hi.call(this,Br(e[0],t,e)),this.visit(i.children[0])}function Ec(i){return this.visitMany(i.type.children.map((t,e)=>i.children[e]).filter(Boolean))[0]}Lt.prototype.visitBool=EI;Lt.prototype.visitInt=vn;Lt.prototype.visitFloat=vn;Lt.prototype.visitUtf8=Id;Lt.prototype.visitBinary=Id;Lt.prototype.visitFixedSizeBinary=vn;Lt.prototype.visitDate=vn;Lt.prototype.visitTimestamp=vn;Lt.prototype.visitTime=vn;Lt.prototype.visitDecimal=vn;Lt.prototype.visitList=xc;Lt.prototype.visitStruct=Ec;Lt.prototype.visitUnion=TI;Lt.prototype.visitInterval=vn;Lt.prototype.visitFixedSizeList=xc;Lt.prototype.visitMap=xc;var Vn=class extends Bn{constructor(t){super(),this._position=0,this._started=!1,this._sink=new Ai,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,_e(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return Qe(t)?t.then(e=>this.writeAll(e)):$e(t)?Bc(this,t):Dc(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof Ai?this._sink=t:(this._sink=new Ai,t&&Xl(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&Kl(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!Un(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Ut&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof Ct&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!Un(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof Ct?t instanceof Nn||this._writeRecordBatch(t):t instanceof Ut?this.writeAll(t.batches):Ze(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,r=$t.encode(t),a=r.byteLength,u=this._writeLegacyIpcFormat?4:8,_=a+u+n&~n,m=_-a-u;return t.headerType===pt.RecordBatch?this._recordBatchBlocks.push(new ui(_,t.bodyLength,this._position)):t.headerType===pt.DictionaryBatch&&this._dictionaryBlocks.push(new ui(_,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(_-u)),a>0&&this._write(r),this._writePadding(m)}_write(t){if(this._started){let e=q(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage($t.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(mr)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:r,buffers:a}=Lt.assemble(t),u=new oe(t.numRows,n,r),_=$t.from(u,e);return this._writeDictionaries(t)._writeMessage(_)._writeBodyBuffers(a)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:r,nodes:a,bufferRegions:u,buffers:_}=Lt.assemble(new Z([t])),m=new oe(t.length,a,u),k=new De(m,e,n),A=$t.from(k,r);return this._writeMessage(A)._writeBodyBuffers(_)}_writeBodyBuffers(t){let e,n,r;for(let a=-1,u=t.length;++a<u;)(e=t[a])&&(n=e.byteLength)>0&&(this._write(e),(r=(n+7&-8)-n)>0&&this._writePadding(r));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let r=this._dictionaryDeltaOffsets.get(e)||0;if(r===0||(n=n==null?void 0:n.slice(r)).length>0)for(let a of n.data)this._writeDictionaryBatch(a,e,r>0),r+=a.length}return this}},Qi=class extends Vn{static writeAll(t,e){let n=new Qi(e);return Qe(t)?t.then(r=>n.writeAll(r)):$e(t)?Bc(n,t):Dc(n,t)}},Zi=class extends Vn{static writeAll(t){let e=new Zi;return Qe(t)?t.then(n=>e.writeAll(n)):$e(t)?Bc(e,t):Dc(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=Gi.encode(new Gi(t,Jt.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function Dc(i,t){let e=t;t instanceof Ut&&(e=t.batches,i.reset(void 0,t.schema));for(let n of e)i.write(n);return i.finish()}function Bc(i,t){var e,n,r,a;return L(this,void 0,void 0,function*(){try{for(e=ze(t);n=yield e.next(),!n.done;){let u=n.value;i.write(u)}}catch(u){r={error:u}}finally{try{n&&!n.done&&(a=e.return)&&(yield a.call(e))}finally{if(r)throw r.error}}return i.finish()})}function kd(i,t){if($e(i))return DI(i,t);if(Ze(i))return xI(i,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function xI(i,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,r=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(u){a(u,e||(e=i[Symbol.iterator]()))},pull(u){e?a(u,e):u.close()},cancel(){((e==null?void 0:e.return)&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?r:void 0},t));function a(u,_){let m,k=null,A=u.desiredSize||null;for(;!(k=_.next(n?A:null)).done;)if(ArrayBuffer.isView(k.value)&&(m=q(k.value))&&(A!=null&&n&&(A=A-m.byteLength+1),k.value=m),u.enqueue(k.value),A!=null&&--A<=0)return;u.close()}}function DI(i,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,r=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(u){return L(this,void 0,void 0,function*(){yield a(u,e||(e=i[Symbol.asyncIterator]()))})},pull(u){return L(this,void 0,void 0,function*(){e?yield a(u,e):u.close()})},cancel(){return L(this,void 0,void 0,function*(){((e==null?void 0:e.return)&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?r:void 0},t));function a(u,_){return L(this,void 0,void 0,function*(){let m,k=null,A=u.desiredSize||null;for(;!(k=yield _.next(n?A:null)).done;)if(ArrayBuffer.isView(k.value)&&(m=q(k.value))&&(A!=null&&n&&(A=A-m.byteLength+1),k.value=m),u.enqueue(k.value),A!=null&&--A<=0)return;u.close()})}}function Ad(i){return new Rc(i)}var Rc=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:r="count"}=t,a=$l(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=On(a),this._getSize=r!=="bytes"?Cd:Fd;let{["highWaterMark"]:u=r==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:_=r==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:m=>{this._maybeFlush(this._builder,this._controller=m)},start:m=>{this._maybeFlush(this._builder,this._controller=m)}},{highWaterMark:u,size:r!=="bytes"?Cd:Fd}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:_,size:m=>this._writeValueAndReturnChunkSize(m)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},Cd=i=>{var t;return(t=i==null?void 0:i.length)!==null&&t!==void 0?t:0},Fd=i=>{var t;return(t=i==null?void 0:i.byteLength)!==null&&t!==void 0?t:0};function ra(i,t){let e=new Ai,n=null,r=new ReadableStream({cancel(){return L(this,void 0,void 0,function*(){yield e.close()})},start(_){return L(this,void 0,void 0,function*(){yield u(_,n||(n=yield a()))})},pull(_){return L(this,void 0,void 0,function*(){n?yield u(_,n):_.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},i)),readable:r};function a(){return L(this,void 0,void 0,function*(){return yield(yield Ht.from(e)).open(t)})}function u(_,m){return L(this,void 0,void 0,function*(){let k=_.desiredSize,A=null;for(;!(A=yield m.next()).done;)if(_.enqueue(A.value),k!=null&&--k<=0)return;_.close()})}}function sa(i,t){let e=new this(i),n=new Ae(e),r=new ReadableStream({cancel(){return L(this,void 0,void 0,function*(){yield n.cancel()})},pull(u){return L(this,void 0,void 0,function*(){yield a(u)})},start(u){return L(this,void 0,void 0,function*(){yield a(u)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,i),readable:r};function a(u){return L(this,void 0,void 0,function*(){let _=null,m=u.desiredSize;for(;_=yield n.read(m||null);)if(u.enqueue(_),m!=null&&(m-=_.byteLength)<=0)return;u.close()})}}function oa(i,t="stream"){return(t==="stream"?Qi:Zi).writeAll(i).toUint8Array(!0)}var MI=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Ga),mc),lc),Xa),za),cc),{compareSchemas:Un,compareFields:ed,compareTypes:id});ne.toDOMStream=kd;Bt.throughDOM=Ad;Ht.throughDOM=ra;mn.throughDOM=ra;xi.throughDOM=ra;Vn.throughDOM=sa;Zi.throughDOM=sa;Qi.throughDOM=sa;function wr(i){switch(i.typeId){case F.Binary:return{sqlType:"binary"};case F.Bool:return{sqlType:"bool"};case F.Date:return{sqlType:"date"};case F.DateDay:return{sqlType:"date32[d]"};case F.DateMillisecond:return{sqlType:"date64[ms]"};case F.Decimal:{let t=i;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case F.Float:return{sqlType:"float"};case F.Float16:return{sqlType:"float16"};case F.Float32:return{sqlType:"float32"};case F.Float64:return{sqlType:"float64"};case F.Int:return{sqlType:"int32"};case F.Int16:return{sqlType:"int16"};case F.Int32:return{sqlType:"int32"};case F.Int64:return{sqlType:"int64"};case F.Uint16:return{sqlType:"uint16"};case F.Uint32:return{sqlType:"uint32"};case F.Uint64:return{sqlType:"uint64"};case F.Uint8:return{sqlType:"uint8"};case F.IntervalDayTime:return{sqlType:"interval[dt]"};case F.IntervalYearMonth:return{sqlType:"interval[m]"};case F.List:return{sqlType:"list",valueType:wr(i.valueType)};case F.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:i.byteWidth};case F.Null:return{sqlType:"null"};case F.Utf8:return{sqlType:"utf8"};case F.Struct:return{sqlType:"struct",fields:i.children.map(e=>aa(e.name,e.type))};case F.Map:{let t=i;return{sqlType:"map",keyType:wr(t.keyType),valueType:wr(t.valueType)}}case F.Time:return{sqlType:"time[s]"};case F.TimeMicrosecond:return{sqlType:"time[us]"};case F.TimeMillisecond:return{sqlType:"time[ms]"};case F.TimeNanosecond:return{sqlType:"time[ns]"};case F.TimeSecond:return{sqlType:"time[s]"};case F.Timestamp:return{sqlType:"timestamp",timezone:i.timezone||void 0};case F.TimestampSecond:return{sqlType:"timestamp[s]",timezone:i.timezone||void 0};case F.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:i.timezone||void 0};case F.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:i.timezone||void 0};case F.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:i.timezone||void 0}}throw new Error(`unsupported arrow type: ${i.toString()}`)}function aa(i,t){let e=wr(t);return e.name=i,e}var ca=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,r)=>r)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return this.failWith(t,e)}}};var la={},LI=(()=>{var i=la.url;return async function(t={}){var e=typeof t<"u"?t:{},n,r;e.ready=new Promise(function(s,o){n=s,r=o}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","getExceptionMessage","___get_exception_message","_fflush","onRuntimeInitialized"].forEach(s=>{Object.getOwnPropertyDescriptor(e.ready,s)||Object.defineProperty(e.ready,s,{get:()=>ot("You are getting "+s+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>ot("You are setting "+s+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var a=Object.assign({},e),u=[],_="./this.program",m=(s,o)=>{throw o},k=typeof window=="object",A=typeof importScripts=="function",D=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",B=!k&&!D&&!A;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var R="";function _t(s){return e.locateFile?e.locateFile(s,R):R+s}var dt,Ft,It,fe;function Be(s){if(s instanceof js)return;let o=s;s&&typeof s=="object"&&s.stack&&(o=[s,s.stack]),P("exiting due to exception: "+o)}if(D){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");let{createRequire:s}=await Promise.resolve().then(()=>Ma(Zw("module")));var Bi=s(la.url),zn=Bi("fs"),jr=Bi("path");A?R=jr.dirname(R)+"/":R=Bi("url").fileURLToPath(new URL("./",la.url)),dt=(o,c)=>(o=Sa(o)?new URL(o):jr.normalize(o),zn.readFileSync(o,c?void 0:"utf8")),It=o=>{var c=dt(o,!0);return c.buffer||(c=new Uint8Array(c)),z(c.buffer),c},Ft=(o,c,l)=>{o=Sa(o)?new URL(o):jr.normalize(o),zn.readFile(o,function(d,f){d?l(d):c(f.buffer)})},process.argv.length>1&&(_=process.argv[1].replace(/\\/g,"/")),u=process.argv.slice(2),process.on("uncaughtException",function(o){if(!(o instanceof js))throw o});var bs=process.versions.node.split(".")[0];bs<15&&process.on("unhandledRejection",function(o){throw o}),m=(o,c)=>{if(ja())throw process.exitCode=o,c;Be(c),process.exit(o)},e.inspect=function(){return"[Emscripten Module object]"}}else if(B){if(typeof process=="object"&&typeof Bi=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(dt=function(o){return read(o)}),It=function(o){let c;return typeof readbuffer=="function"?new Uint8Array(readbuffer(o)):(c=read(o,"binary"),z(typeof c=="object"),c)},Ft=function(o,c,l){setTimeout(()=>c(It(o)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=s=>{}),typeof scriptArgs<"u"?u=scriptArgs:typeof arguments<"u"&&(u=arguments),typeof quit=="function"&&(m=(s,o)=>{Be(o),quit(s)}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(k||A){if(A?R=self.location.href:typeof document<"u"&&document.currentScript&&(R=document.currentScript.src),i&&(R=i),R.indexOf("blob:")!==0?R=R.substr(0,R.replace(/[?#].*/,"").lastIndexOf("/")+1):R="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");dt=s=>{var o=new XMLHttpRequest;return o.open("GET",s,!1),o.send(null),o.responseText},A&&(It=s=>{var o=new XMLHttpRequest;return o.open("GET",s,!1),o.responseType="arraybuffer",o.send(null),new Uint8Array(o.response)}),Ft=(s,o,c)=>{var l=new XMLHttpRequest;l.open("GET",s,!0),l.responseType="arraybuffer",l.onload=()=>{if(l.status==200||l.status==0&&l.response){o(l.response);return}c()},l.onerror=c,l.send(null)},fe=s=>document.title=s}else throw new Error("environment detection error");var tn=e.print||console.log.bind(console),P=e.printErr||console.warn.bind(console);Object.assign(e,a),a=null,Wh(),e.arguments&&(u=e.arguments),Oi("arguments","arguments_"),e.thisProgram&&(_=e.thisProgram),Oi("thisProgram","thisProgram"),e.quit&&(m=e.quit),Oi("quit","quit_"),z(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),z(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),z(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),z(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),z(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),z(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),z(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),z(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),z(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),Oi("read","read_"),Oi("readAsync","readAsync"),Oi("readBinary","readBinary"),Oi("setWindowTitle","setWindowTitle");var ve="IDBFS is no longer included by default; build with -lidbfs.js",Pe="PROXYFS is no longer included by default; build with -lproxyfs.js",Re="WORKERFS is no longer included by default; build with -lworkerfs.js",he="NODEFS is no longer included by default; build with -lnodefs.js";z(!B,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var Nt;e.wasmBinary&&(Nt=e.wasmBinary),Oi("wasmBinary","wasmBinary");var kt=e.noExitRuntime||!0;Oi("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&ot("no native wasm support detected");var ie,_i=!1,gs;function z(s,o){s||ot("Assertion failed"+(o?": "+o:""))}var Pc=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Vc(s,o,c){o>>>=0;for(var l=o+c,d=o;s[d]&&!(d>=l);)++d;if(d-o>16&&s.buffer&&Pc)return Pc.decode(s.subarray(o,d));for(var f="";o<d;){var h=s[o++];if(!(h&128)){f+=String.fromCharCode(h);continue}var p=s[o++]&63;if((h&224)==192){f+=String.fromCharCode((h&31)<<6|p);continue}var y=s[o++]&63;if((h&240)==224?h=(h&15)<<12|p<<6|y:((h&248)!=240&&pi("Invalid UTF-8 leading byte "+Cr(h)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),h=(h&7)<<18|p<<12|y<<6|s[o++]&63),h<65536)f+=String.fromCharCode(h);else{var v=h-65536;f+=String.fromCharCode(55296|v>>10,56320|v&1023)}}return f}function Ve(s,o){return z(typeof s=="number"),s>>>=0,s?Vc(en,s,o):""}function Hc(s,o,c,l){if(c>>>=0,!(l>0))return 0;for(var d=c,f=c+l-1,h=0;h<s.length;++h){var p=s.charCodeAt(h);if(p>=55296&&p<=57343){var y=s.charCodeAt(++h);p=65536+((p&1023)<<10)|y&1023}if(p<=127){if(c>=f)break;o[c++>>>0]=p}else if(p<=2047){if(c+1>=f)break;o[c++>>>0]=192|p>>6,o[c++>>>0]=128|p&63}else if(p<=65535){if(c+2>=f)break;o[c++>>>0]=224|p>>12,o[c++>>>0]=128|p>>6&63,o[c++>>>0]=128|p&63}else{if(c+3>=f)break;p>1114111&&pi("Invalid Unicode code point "+Cr(p)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),o[c++>>>0]=240|p>>18,o[c++>>>0]=128|p>>12&63,o[c++>>>0]=128|p>>6&63,o[c++>>>0]=128|p&63}}return o[c>>>0]=0,c-d}function ma(s,o,c){return z(typeof c=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Hc(s,en,o,c)}function Nd(s){for(var o=0,c=0;c<s.length;++c){var l=s.charCodeAt(c);l<=127?o++:l<=2047?o+=2:l>=55296&&l<=57343?(o+=4,++c):o+=3}return o}var GI,be,en,jn,zc,M,St,va,ba;function Wc(){var s=ie.buffer;e.HEAP8=be=new Int8Array(s),e.HEAP16=jn=new Int16Array(s),e.HEAP32=M=new Int32Array(s),e.HEAPU8=en=new Uint8Array(s),e.HEAPU16=zc=new Uint16Array(s),e.HEAPU32=St=new Uint32Array(s),e.HEAPF32=va=new Float32Array(s),e.HEAPF64=ba=new Float64Array(s)}z(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),z(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),z(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),z(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var ws;function Pd(){var s=Oa();z((s&3)==0),s==0&&(s+=4),St[s>>>2]=34821223,St[s+4>>>2]=2310721022,St[0]=1668509029}function Sr(){if(!_i){var s=Oa();s==0&&(s+=4);var o=St[s>>>2],c=St[s+4>>>2];(o!=34821223||c!=2310721022)&&ot("Stack overflow! Stack cookie has been overwritten at "+Cr(s)+", expected hex dwords 0x89BACDFE and 0x2135467, but received "+Cr(c)+" "+Cr(o)),St[0]!==1668509029&&ot("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var s=new Int16Array(1),o=new Int8Array(s.buffer);if(s[0]=25459,o[0]!==115||o[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var ga=[],Yc=[],$c=[],XI=[],Gc=[],wa=!1;function ja(){return kt}function Vd(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)Yd(e.preRun.shift());Ss(ga)}function Hd(){z(!wa),wa=!0,Sr(),Ss(Yc)}function zd(){Sr(),Ss($c)}function Wd(){if(Sr(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Gd(e.postRun.shift());Ss(Gc)}function Yd(s){ga.unshift(s)}function $d(s){Yc.unshift(s)}function KI(s){$c.unshift(s)}function JI(s){}function Gd(s){Gc.unshift(s)}z(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),z(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),z(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),z(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var nn=0,Sn=null,Ir=null,Wn={};function qI(s){for(var o=s;;){if(!Wn[s])return s;s=o+Math.random()}}function Xd(s){nn++,e.monitorRunDependencies&&e.monitorRunDependencies(nn),s?(z(!Wn[s]),Wn[s]=1,Sn===null&&typeof setInterval<"u"&&(Sn=setInterval(function(){if(_i){clearInterval(Sn),Sn=null;return}var o=!1;for(var c in Wn)o||(o=!0,P("still waiting on run dependencies:")),P("dependency: "+c);o&&P("(end of list)")},1e4))):P("warning: run dependency added without ID")}function Kd(s){if(nn--,e.monitorRunDependencies&&e.monitorRunDependencies(nn),s?(z(Wn[s]),delete Wn[s]):P("warning: run dependency removed without ID"),nn==0&&(Sn!==null&&(clearInterval(Sn),Sn=null),Ir)){var o=Ir;Ir=null,o()}}function ot(s){e.onAbort&&e.onAbort(s),s="Aborted("+s+")",P(s),_i=!0,gs=1;var o=new WebAssembly.RuntimeError(s);throw r(o),o}var Jd="data:application/octet-stream;base64,";function Xc(s){return s.startsWith(Jd)}function Sa(s){return s.startsWith("file://")}function g(s,o){return function(){var c=s,l=o;return o||(l=e.asm),z(wa,"native function `"+c+"` called before runtime initialization"),l[s]||z(l[s],"exported native function `"+c+"` not found"),l[s].apply(null,arguments)}}class S extends Error{}class QI extends S{}class Ia extends S{constructor(o){super(o);let c=tl(o);this.name=c[0],this.message=c[1]}}var Ri;e.locateFile?(Ri="./duckdb-mvp.wasm",Xc(Ri)||(Ri=_t(Ri))):Ri=new URL("./duckdb-mvp.wasm",la.url).href;function Kc(s){try{if(s==Ri&&Nt)return new Uint8Array(Nt);if(It)return It(s);throw"both async and sync fetching of the wasm failed"}catch(o){ot(o)}}function qd(s){return!Nt&&(k||A)&&typeof fetch=="function"?fetch(s,{credentials:"same-origin"}).then(function(o){if(!o.ok)throw"failed to load wasm binary file at '"+s+"'";return o.arrayBuffer()}).catch(function(){return Kc(s)}):Promise.resolve().then(function(){return Kc(s)})}function Jc(s,o,c){return qd(s).then(function(l){return WebAssembly.instantiate(l,o)}).then(function(l){return l}).then(c,function(l){P("failed to asynchronously prepare wasm: "+l),Sa(Ri)&&P("warning: Loading from a file URI ("+Ri+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),ot(l)})}function Qd(s,o,c,l){return!s&&typeof WebAssembly.instantiateStreaming=="function"&&!Xc(o)&&!D&&typeof fetch=="function"?fetch(o,{credentials:"same-origin"}).then(function(d){var f=WebAssembly.instantiateStreaming(d,c);return f.then(l,function(h){return P("wasm streaming compile failed: "+h),P("falling back to ArrayBuffer instantiation"),Jc(o,c,l)})}):Jc(o,c,l)}function Zd(){var s={env:fl,wasi_snapshot_preview1:fl};function o(d,f){var h=d.exports;return e.asm=h,ie=e.asm.memory,z(ie,"memory not found in wasm exports"),Wc(),ws=e.asm.__indirect_function_table,z(ws,"table not found in wasm exports"),$d(e.asm.__wasm_call_ctors),Kd("wasm-instantiate"),h}Xd("wasm-instantiate");var c=e;function l(d){z(e===c,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),c=null,o(d.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(s,o)}catch(d){P("Module.instantiateWasm callback failed with error: "+d),r(d)}return Qd(Nt,Ri,s,l).catch(r),{}}var Yn,ka;function Oi(s,o){Object.getOwnPropertyDescriptor(e,s)||Object.defineProperty(e,s,{configurable:!0,get:function(){ot("Module."+s+" has been replaced with plain "+o+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function tf(s){Object.getOwnPropertyDescriptor(e,s)&&ot("`Module."+s+"` was supplied but `"+s+"` not included in INCOMING_MODULE_JS_API")}function qc(s){return s==="FS_createPath"||s==="FS_createDataFile"||s==="FS_createPreloadedFile"||s==="FS_unlink"||s==="addRunDependency"||s==="FS_createLazyFile"||s==="FS_createDevice"||s==="removeRunDependency"}function ef(s,o){typeof globalThis<"u"&&Object.defineProperty(globalThis,s,{configurable:!0,get:function(){pi("`"+s+"` is not longer defined by emscripten. "+o)}})}ef("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function nf(s){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,s)&&Object.defineProperty(globalThis,s,{configurable:!0,get:function(){var o="`"+s+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",c=s;c.startsWith("_")||(c="$"+s),o+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+c+")",qc(s)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),pi(o)}}),Qc(s)}function Qc(s){Object.getOwnPropertyDescriptor(e,s)||Object.defineProperty(e,s,{configurable:!0,get:function(){var o="'"+s+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";qc(s)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),ot(o)}})}function ZI(s){console.error(s)}function js(s){this.name="ExitStatus",this.message="Program terminated with exit("+s+")",this.status=s}function Ss(s){for(;s.length>0;)s.shift()(e)}var Is=[];function N(s){var o=Is[s];return o||(s>=Is.length&&(Is.length=s+1),Is[s]=o=ws.get(s)),z(ws.get(s)==o,"JavaScript-side Wasm function table mirror is out of date!"),o}function Zc(s){if(s.release_ref()&&!s.get_rethrown()){var o=s.get_destructor();o&&N(o)(s.excPtr),qh(s.excPtr)}}function kr(s){this.excPtr=s,this.ptr=s-24,this.set_type=function(o){St[this.ptr+4>>>2]=o},this.get_type=function(){return St[this.ptr+4>>>2]},this.set_destructor=function(o){St[this.ptr+8>>>2]=o},this.get_destructor=function(){return St[this.ptr+8>>>2]},this.set_refcount=function(o){M[this.ptr>>>2]=o},this.set_caught=function(o){o=o?1:0,be[this.ptr+12>>>0]=o},this.get_caught=function(){return be[this.ptr+12>>>0]!=0},this.set_rethrown=function(o){o=o?1:0,be[this.ptr+13>>>0]=o},this.get_rethrown=function(){return be[this.ptr+13>>>0]!=0},this.init=function(o,c){this.set_adjusted_ptr(0),this.set_type(o),this.set_destructor(c),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var o=M[this.ptr>>>2];M[this.ptr>>>2]=o+1},this.release_ref=function(){var o=M[this.ptr>>>2];return M[this.ptr>>>2]=o-1,z(o>0),o===1},this.set_adjusted_ptr=function(o){St[this.ptr+16>>>2]=o},this.get_adjusted_ptr=function(){return St[this.ptr+16>>>2]},this.get_exception_ptr=function(){var o=Zh(this.get_type());if(o)return St[this.excPtr>>>2];var c=this.get_adjusted_ptr();return c!==0?c:this.excPtr}}function rf(s){!s||Zc(new kr(s))}function t1(s){rf(s)}function sf(s){var o=w(),c=s();return j(o),c}function of(s){return sf(function(){var o=Er(4),c=Er(4);Jh(s,o,c);var l=St[o>>>2],d=St[c>>>2],f=Ve(l);pl(l);var h;return d&&(h=Ve(d),pl(d)),[f,h]})}function tl(s){return of(s)}e.getExceptionMessage=tl;function e1(s,o="i8"){switch(o.endsWith("*")&&(o="*"),o){case"i1":return be[s>>>0];case"i8":return be[s>>>0];case"i16":return jn[s>>>1];case"i32":return M[s>>>2];case"i64":return M[s>>>2];case"float":return va[s>>>2];case"double":return ba[s>>>3];case"*":return St[s>>>2];default:ot("invalid type for getValue: "+o)}}function el(s){s.add_ref()}function af(s){!s||el(new kr(s))}function i1(s){af(s)}function Cr(s){return z(typeof s=="number"),"0x"+s.toString(16).padStart(8,"0")}function n1(s,o,c="i8"){switch(c.endsWith("*")&&(c="*"),c){case"i1":be[s>>>0]=o;break;case"i8":be[s>>>0]=o;break;case"i16":jn[s>>>1]=o;break;case"i32":M[s>>>2]=o;break;case"i64":ka=[o>>>0,(Yn=o,+Math.abs(Yn)>=1?Yn>0?(Math.min(+Math.floor(Yn/4294967296),4294967295)|0)>>>0:~~+Math.ceil((Yn-+(~~Yn>>>0))/4294967296)>>>0:0)],M[s>>>2]=ka[0],M[s+4>>>2]=ka[1];break;case"float":va[s>>>2]=o;break;case"double":ba[s>>>3]=o;break;case"*":St[s>>>2]=o;break;default:ot("invalid type for setValue: "+c)}}function pi(s){pi.shown||(pi.shown={}),pi.shown[s]||(pi.shown[s]=1,D&&(s="warning: "+s),P(s))}function cf(s,o,c,l){ot("Assertion failed: "+Ve(s)+", at: "+[o?Ve(o):"unknown filename",c,l?Ve(l):"unknown function"])}var Fr=[],ks=0;function lf(s){var o=new kr(s);return o.get_caught()||(o.set_caught(!0),ks--),o.set_rethrown(!1),Fr.push(o),el(o),o.get_exception_ptr()}var $n=0;function uf(){I(0),z(Fr.length>0);var s=Fr.pop();Zc(s),$n=0}function df(s){throw $n||($n=s),new Ia(s)}function Gn(){var s=$n;if(!s)return Es(0),0;var o=new kr(s);o.set_adjusted_ptr(s);var c=o.get_type();if(!c)return Es(0),s;for(var l=0;l<arguments.length;l++){var d=arguments[l];if(d===0||d===c)break;var f=o.ptr+16;if(Qh(d,c,f))return Es(d),s}return Es(c),s}var ff=Gn,hf=Gn,_f=Gn,pf=Gn,yf=Gn,mf=Gn;function vf(){var s=Fr.pop();s||ot("no exception to throw");var o=s.excPtr;throw s.get_rethrown()||(Fr.push(s),s.set_rethrown(!0),s.set_caught(!1),ks++),$n=o,new Ia(o)}function bf(s,o,c){var l=new kr(s);throw l.init(o,c),$n=s,ks++,new Ia(s)}function gf(){return ks}var il="To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";function wf(s,o){ot(il)}var rn={varargs:void 0,get:function(){z(rn.varargs!=null),rn.varargs+=4;var s=M[rn.varargs-4>>>2];return s},getStr:function(s){var o=Ve(s);return o}};function jf(s,o,c,l,d){z(s<=64,"nfds must be less than or equal to 64"),z(!l,"exceptfds not supported");for(var f=0,h=o?M[o>>>2]:0,p=o?M[o+4>>>2]:0,y=c?M[c>>>2]:0,v=c?M[c+4>>>2]:0,b=l?M[l>>>2]:0,C=l?M[l+4>>>2]:0,T=0,x=0,O=0,W=0,ht=0,yt=0,E=(o?M[o>>>2]:0)|(c?M[c>>>2]:0)|(l?M[l>>>2]:0),U=(o?M[o+4>>>2]:0)|(c?M[c+4>>>2]:0)|(l?M[l+4>>>2]:0),Gt=function(Yw,$w,Gw,gl){return Yw<32?$w&gl:Gw&gl},wt=0;wt<s;wt++){var Kt=1<<wt%32;if(!!Gt(wt,E,U,Kt)){var ae=rn.getStreamFromFD(wt),In=rn.DEFAULT_POLLMASK;ae.stream_ops.poll&&(In=ae.stream_ops.poll(ae)),In&1&&Gt(wt,h,p,Kt)&&(wt<32?T=T|Kt:x=x|Kt,f++),In&4&&Gt(wt,y,v,Kt)&&(wt<32?O=O|Kt:W=W|Kt,f++),In&2&&Gt(wt,b,C,Kt)&&(wt<32?ht=ht|Kt:yt=yt|Kt,f++)}}return o&&(M[o>>>2]=T,M[o+4>>>2]=x),c&&(M[c>>>2]=O,M[c+4>>>2]=W),l&&(M[l>>>2]=ht,M[l+4>>>2]=yt),f}function Sf(){P("missing function: $SOCKFS"),ot(-1)}function nl(){P("missing function: $FS"),ot(-1)}function Ar(s){var o=Sf.getSocket(s);if(!o)throw new nl.ErrnoError(8);return o}function r1(s){return M[$h()>>>2]=s,s}var s1={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function Ca(s){return(s&255)+"."+(s>>8&255)+"."+(s>>16&255)+"."+(s>>24&255)}function rl(s){var o="",c=0,l=0,d=0,f=0,h=0,p=0,y=[s[0]&65535,s[0]>>16,s[1]&65535,s[1]>>16,s[2]&65535,s[2]>>16,s[3]&65535,s[3]>>16],v=!0,b="";for(p=0;p<5;p++)if(y[p]!==0){v=!1;break}if(v){if(b=Ca(y[6]|y[7]<<16),y[5]===-1)return o="::ffff:",o+=b,o;if(y[5]===0)return o="::",b==="0.0.0.0"&&(b=""),b==="0.0.0.1"&&(b="1"),o+=b,o}for(c=0;c<8;c++)y[c]===0&&(c-d>1&&(h=0),d=c,h++),h>l&&(l=h,f=c-l+1);for(c=0;c<8;c++){if(l>1&&y[c]===0&&c>=f&&c<f+l){c===f&&(o+=":",f===0&&(o+=":"));continue}o+=Number(hl(y[c]&65535)).toString(16),o+=c<7?":":""}return o}function sl(s,o){var c=jn[s>>>1],l=hl(zc[s+2>>>1]),d;switch(c){case 2:if(o!==16)return{errno:28};d=M[s+4>>>2],d=Ca(d);break;case 10:if(o!==28)return{errno:28};d=[M[s+8>>>2],M[s+12>>>2],M[s+16>>>2],M[s+20>>>2]],d=rl(d);break;default:return{errno:5}}return{family:c,addr:d,port:l}}function Cs(s){for(var o=s.split("."),c=0;c<4;c++){var l=Number(o[c]);if(isNaN(l))return null;o[c]=l}return(o[0]|o[1]<<8|o[2]<<16|o[3]<<24)>>>0}function Fs(s){return parseInt(s)}function Fa(s){var o,c,l,d,f,h=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,p=[];if(!h.test(s))return null;if(s==="::")return[0,0,0,0,0,0,0,0];for(s.startsWith("::")?s=s.replace("::","Z:"):s=s.replace("::",":Z:"),s.indexOf(".")>0?(s=s.replace(new RegExp("[.]","g"),":"),o=s.split(":"),o[o.length-4]=Fs(o[o.length-4])+Fs(o[o.length-3])*256,o[o.length-3]=Fs(o[o.length-2])+Fs(o[o.length-1])*256,o=o.slice(0,o.length-2)):o=s.split(":"),l=0,d=0,c=0;c<o.length;c++)if(typeof o[c]=="string")if(o[c]==="Z"){for(d=0;d<8-o.length+1;d++)p[c+d]=0;l=d-1}else p[c+l]=Ra(parseInt(o[c],16));else p[c+l]=o[c];return[p[1]<<16|p[0],p[3]<<16|p[2],p[5]<<16|p[4],p[7]<<16|p[6]]}var He={address_map:{id:1,addrs:{},names:{}},lookup_name:function(s){var o=Cs(s);if(o!==null||(o=Fa(s),o!==null))return s;var c;if(He.address_map.addrs[s])c=He.address_map.addrs[s];else{var l=He.address_map.id++;z(l<65535,"exceeded max address mappings of 65535"),c="172.29."+(l&255)+"."+(l&65280),He.address_map.names[c]=s,He.address_map.addrs[s]=c}return c},lookup_addr:function(s){return He.address_map.names[s]?He.address_map.names[s]:null}};function ol(s,o,c){if(c&&s===0)return null;var l=sl(s,o);if(l.errno)throw new nl.ErrnoError(l.errno);return l.addr=He.lookup_addr(l.addr)||l.addr,l}function If(s,o,c){var l=Ar(s),d=ol(o,c);return l.sock_ops.bind(l,d.addr,d.port),0}function kf(s,o,c){var l=Ar(s),d=ol(o,c);return l.sock_ops.connect(l,d.addr,d.port),0}function Cf(s,o,c,l){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ff(s,o,c){return rn.varargs=c,0}function Af(s,o){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function o1(s,o){return z(s==s>>>0||s==(s|0)),z(o===(o|0)),o+2097152>>>0<4194305-!!s?(s>>>0)+o*4294967296:NaN}function Tf(s,o,c){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ef(s,o,c){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function al(s,o){return en.fill(0,s,s+o),s}function Aa(s,o,c,l,d){switch(o){case 2:c=Cs(c),al(s,16),d&&(M[d>>>2]=16),jn[s>>>1]=o,M[s+4>>>2]=c,jn[s+2>>>1]=Ra(l);break;case 10:c=Fa(c),al(s,28),d&&(M[d>>>2]=28),M[s>>>2]=o,M[s+8>>>2]=c[0],M[s+12>>>2]=c[1],M[s+16>>>2]=c[2],M[s+20>>>2]=c[3],jn[s+2>>>1]=Ra(l);break;default:return 5}return 0}function xf(s,o,c){var l=Ar(s);if(!l.daddr)return-53;var d=Aa(o,l.family,He.lookup_name(l.daddr),l.dport,c);return z(!d),0}function Df(s,o,c,l,d){var f=Ar(s);return o===1&&c===4?(M[l>>>2]=f.error,M[d>>>2]=4,f.error=null,0):-50}function Bf(s,o,c){return rn.varargs=c,0}function Rf(s,o){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Of(s,o,c){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Mf(s,o,c,l){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Lf(s,o,c,l){rn.varargs=l,ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Uf(s,o,c,l,d,f){var h=Ar(s),p=h.sock_ops.recvmsg(h,c);if(!p)return 0;if(d){var y=Aa(d,h.family,He.lookup_name(p.addr),p.port,f);z(!y)}return en.set(p.buffer,o>>>0),p.buffer.byteLength}function Nf(s,o,c,l){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Pf(s){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Vf(s,o,c,l,d,f){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Hf(s,o,c){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zf(s,o){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Wf(s,o,c){ot("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}var Yf=!0;function $f(){return Yf}function Gf(){ot("native code called abort()")}function Xf(s){ot(il)}function Kf(s,o){return globalThis.DUCKDB_RUNTIME.createDirectory(e,s,o)}function Jf(s,o){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,s,o)}function qf(s,o){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,s,o)}function Qf(s,o){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,s,o)}function Zf(s){return globalThis.DUCKDB_RUNTIME.closeFile(e,s)}function th(s,o){return globalThis.DUCKDB_RUNTIME.checkFile(e,s,o)}function eh(s){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,s)}function ih(s,o,c,l){return globalThis.DUCKDB_RUNTIME.moveFile(e,s,o,c,l)}function nh(s,o){return globalThis.DUCKDB_RUNTIME.openFile(e,s,o)}function rh(s,o,c,l){return globalThis.DUCKDB_RUNTIME.readFile(e,s,o,c,l)}function sh(s,o){return globalThis.DUCKDB_RUNTIME.truncateFile(e,s,o)}function oh(s,o,c,l){return globalThis.DUCKDB_RUNTIME.writeFile(e,s,o,c,l)}function ah(s){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(s)}function ch(s,o){return globalThis.DUCKDB_RUNTIME.glob(e,s,o)}function lh(s){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,s)}function uh(s,o,c,l,d,f){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,s,o,c,l,d,f)}function dh(s){z(typeof s=="number"),console.error(Ve(s))}function fh(){return Date.now()}function cl(){return 4294901760}function hh(){return cl()}var Ta;D?Ta=()=>{var s=process.hrtime();return s[0]*1e3+s[1]/1e6}:Ta=()=>performance.now();function _h(s,o,c){en.copyWithin(s>>>0,o>>>0,o+c>>>0)}function ph(s){var o=ie.buffer;try{return ie.grow(s-o.byteLength+65535>>>16),Wc(),1}catch(c){P("emscripten_realloc_buffer: Attempted to grow heap from "+o.byteLength+" bytes to "+s+" bytes, but got error: "+c)}}function yh(s){var o=en.length;s=s>>>0,z(s>o);var c=cl();if(s>c)return P("Cannot enlarge memory, asked to go up to "+s+" bytes, but the limit is "+c+" bytes!"),!1;let l=(y,v)=>y+(v-y%v)%v;for(var d=1;d<=4;d*=2){var f=o*(1+.2/d);f=Math.min(f,s+100663296);var h=Math.min(c,l(Math.max(s,f),65536)),p=ph(h);if(p)return!0}return P("Failed to grow the heap from "+o+" bytes to "+h+" bytes, not enough memory!"),!1}var Ea={};function mh(){return _||"./this.program"}function Tr(){if(!Tr.strings){var s=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",o={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:s,_:mh()};for(var c in Ea)Ea[c]===void 0?delete o[c]:o[c]=Ea[c];var l=[];for(var c in o)l.push(c+"="+o[c]);Tr.strings=l}return Tr.strings}function vh(s,o,c){for(var l=0;l<s.length;++l)z(s.charCodeAt(l)===(s.charCodeAt(l)&255)),be[o++>>>0]=s.charCodeAt(l);c||(be[o>>>0]=0)}function bh(s,o){var c=0;return Tr().forEach(function(l,d){var f=o+c;St[s+d*4>>>2]=f,vh(l,f),c+=l.length+1}),0}function gh(s,o){var c=Tr();St[s>>>2]=c.length;var l=0;return c.forEach(function(d){l+=d.length+1}),St[o>>>2]=l,0}function wh(s){ot("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function jh(s,o){var c=s==1||s==2?2:ot();return be[o>>>0]=c,0}function Sh(s,o,c,l,d,f){ot("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ih(s,o,c,l,d,f){ot("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function kh(s,o,c,l){ot("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ch(s,o,c,l,d){return 70}function Fh(s){ot("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var xa=[null,[],[]];function Da(s,o){var c=xa[s];z(c),o===0||o===10?((s===1?tn:P)(Vc(c,0)),c.length=0):c.push(o)}function Ah(){Gh(0),xa[1].length&&Da(1,10),xa[2].length&&Da(2,10)}function Th(s,o,c,l){for(var d=0,f=0;f<c;f++){var h=St[o>>>2],p=St[o+4>>>2];o+=8;for(var y=0;y<p;y++)Da(s,en[h+y>>>0]);d+=p}return St[l>>>2]=d,0}function Eh(s,o,c,l){var d=[],f=null,h=0,p=0,y=0,v=0,b=0,C=0,T,x;function O(W,ht,yt,E,U,Gt){var wt,Kt,ae,In;return Kt=W===10?28:16,U=W===10?rl(U):Ca(U),wt=_l(Kt),In=Aa(wt,W,U,Gt),z(!In),ae=_l(32),M[ae+4>>>2]=W,M[ae+8>>>2]=ht,M[ae+12>>>2]=yt,M[ae+24>>>2]=E,St[ae+20>>>2]=wt,W===10?M[ae+16>>>2]=28:M[ae+16>>>2]=16,M[ae+28>>>2]=0,ae}if(c&&(y=M[c>>>2],v=M[c+4>>>2],b=M[c+8>>>2],C=M[c+12>>>2]),b&&!C&&(C=b===2?17:6),!b&&C&&(b=C===17?2:1),C===0&&(C=6),b===0&&(b=1),!s&&!o)return-2;if(y&-1088||c!==0&&M[c>>>2]&2&&!s)return-1;if(y&32)return-2;if(b!==0&&b!==1&&b!==2)return-7;if(v!==0&&v!==2&&v!==10)return-6;if(o&&(o=Ve(o),p=parseInt(o,10),isNaN(p)))return y&1024?-2:-8;if(!s)return v===0&&(v=2),(y&1)===0&&(v===2?h=Ba(2130706433):h=[0,0,0,1]),T=O(v,b,C,null,h,p),St[l>>>2]=T,0;if(s=Ve(s),h=Cs(s),h!==null)if(v===0||v===2)v=2;else if(v===10&&y&8)h=[0,0,Ba(65535),h],v=10;else return-2;else if(h=Fa(s),h!==null)if(v===0||v===10)v=10;else return-2;return h!=null?(T=O(v,b,C,s,h,p),St[l>>>2]=T,0):y&4?-2:(s=He.lookup_name(s),h=Cs(s),v===0?v=2:v===10&&(h=[0,0,Ba(65535),h]),T=O(v,b,C,null,h,p),St[l>>>2]=T,0)}function xh(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function"){var s=new Uint8Array(1);return()=>(crypto.getRandomValues(s),s[0])}else if(D)try{var o=Bi("crypto");return()=>o.randomBytes(1)[0]}catch(c){}return()=>ot("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function As(s,o){As.randomDevice||(As.randomDevice=xh());for(var c=0;c<o;c++)be[s+c>>>0]=As.randomDevice();return 0}function Dh(s,o,c,l,d,f,h){var p=sl(s,o);if(p.errno)return-6;var y=p.port,v=p.addr,b=!1;if(c&&l){var C;if(h&1||!(C=He.lookup_addr(v))){if(h&8)return-2}else v=C;var T=ma(v,c,l);T+1>=l&&(b=!0)}if(d&&f){y=""+y;var T=ma(y,d,f);T+1>=f&&(b=!0)}return b?-12:0}function Bh(s){return s}function Ts(s){return s%4===0&&(s%100!==0||s%400===0)}function Rh(s,o){for(var c=0,l=0;l<=o;c+=s[l++]);return c}var ll=[31,29,31,30,31,30,31,31,30,31,30,31],ul=[31,28,31,30,31,30,31,31,30,31,30,31];function Oh(s,o){for(var c=new Date(s.getTime());o>0;){var l=Ts(c.getFullYear()),d=c.getMonth(),f=(l?ll:ul)[d];if(o>f-c.getDate())o-=f-c.getDate()+1,c.setDate(1),d<11?c.setMonth(d+1):(c.setMonth(0),c.setFullYear(c.getFullYear()+1));else return c.setDate(c.getDate()+o),c}return c}function Mh(s,o,c){var l=c>0?c:Nd(s)+1,d=new Array(l),f=Hc(s,d,0,d.length);return o&&(d.length=f),d}function dl(s,o){z(s.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),be.set(s,o>>>0)}function Lh(s,o,c,l){var d=M[l+40>>>2],f={tm_sec:M[l>>>2],tm_min:M[l+4>>>2],tm_hour:M[l+8>>>2],tm_mday:M[l+12>>>2],tm_mon:M[l+16>>>2],tm_year:M[l+20>>>2],tm_wday:M[l+24>>>2],tm_yday:M[l+28>>>2],tm_isdst:M[l+32>>>2],tm_gmtoff:M[l+36>>>2],tm_zone:d?Ve(d):""},h=Ve(c),p={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var y in p)h=h.replace(new RegExp(y,"g"),p[y]);var v=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],b=["January","February","March","April","May","June","July","August","September","October","November","December"];function C(E,U,Gt){for(var wt=typeof E=="number"?E.toString():E||"";wt.length<U;)wt=Gt[0]+wt;return wt}function T(E,U){return C(E,U,"0")}function x(E,U){function Gt(Kt){return Kt<0?-1:Kt>0?1:0}var wt;return(wt=Gt(E.getFullYear()-U.getFullYear()))===0&&(wt=Gt(E.getMonth()-U.getMonth()))===0&&(wt=Gt(E.getDate()-U.getDate())),wt}function O(E){switch(E.getDay()){case 0:return new Date(E.getFullYear()-1,11,29);case 1:return E;case 2:return new Date(E.getFullYear(),0,3);case 3:return new Date(E.getFullYear(),0,2);case 4:return new Date(E.getFullYear(),0,1);case 5:return new Date(E.getFullYear()-1,11,31);case 6:return new Date(E.getFullYear()-1,11,30)}}function W(E){var U=Oh(new Date(E.tm_year+1900,0,1),E.tm_yday),Gt=new Date(U.getFullYear(),0,4),wt=new Date(U.getFullYear()+1,0,4),Kt=O(Gt),ae=O(wt);return x(Kt,U)<=0?x(ae,U)<=0?U.getFullYear()+1:U.getFullYear():U.getFullYear()-1}var ht={"%a":function(E){return v[E.tm_wday].substring(0,3)},"%A":function(E){return v[E.tm_wday]},"%b":function(E){return b[E.tm_mon].substring(0,3)},"%B":function(E){return b[E.tm_mon]},"%C":function(E){var U=E.tm_year+1900;return T(U/100|0,2)},"%d":function(E){return T(E.tm_mday,2)},"%e":function(E){return C(E.tm_mday,2," ")},"%g":function(E){return W(E).toString().substring(2)},"%G":function(E){return W(E)},"%H":function(E){return T(E.tm_hour,2)},"%I":function(E){var U=E.tm_hour;return U==0?U=12:U>12&&(U-=12),T(U,2)},"%j":function(E){return T(E.tm_mday+Rh(Ts(E.tm_year+1900)?ll:ul,E.tm_mon-1),3)},"%m":function(E){return T(E.tm_mon+1,2)},"%M":function(E){return T(E.tm_min,2)},"%n":function(){return`
`},"%p":function(E){return E.tm_hour>=0&&E.tm_hour<12?"AM":"PM"},"%S":function(E){return T(E.tm_sec,2)},"%t":function(){return"	"},"%u":function(E){return E.tm_wday||7},"%U":function(E){var U=E.tm_yday+7-E.tm_wday;return T(Math.floor(U/7),2)},"%V":function(E){var U=Math.floor((E.tm_yday+7-(E.tm_wday+6)%7)/7);if((E.tm_wday+371-E.tm_yday-2)%7<=2&&U++,U){if(U==53){var wt=(E.tm_wday+371-E.tm_yday)%7;wt!=4&&(wt!=3||!Ts(E.tm_year))&&(U=1)}}else{U=52;var Gt=(E.tm_wday+7-E.tm_yday-1)%7;(Gt==4||Gt==5&&Ts(E.tm_year%400-1))&&U++}return T(U,2)},"%w":function(E){return E.tm_wday},"%W":function(E){var U=E.tm_yday+7-(E.tm_wday+6)%7;return T(Math.floor(U/7),2)},"%y":function(E){return(E.tm_year+1900).toString().substring(2)},"%Y":function(E){return E.tm_year+1900},"%z":function(E){var U=E.tm_gmtoff,Gt=U>=0;return U=Math.abs(U)/60,U=U/60*100+U%60,(Gt?"+":"-")+String("0000"+U).slice(-4)},"%Z":function(E){return E.tm_zone},"%%":function(){return"%"}};h=h.replace(/%%/g,"\0\0");for(var y in ht)h.includes(y)&&(h=h.replace(new RegExp(y,"g"),ht[y](f)));h=h.replace(/\0\0/g,"%");var yt=Mh(h,!1);return yt.length>o?0:(dl(yt,s),yt.length-1)}function Uh(s,o,c,l,d){return Lh(s,o,c,l)}function Nh(s){gs=s,ja()||(e.onExit&&e.onExit(s),_i=!0),m(s,new js(s))}function Ph(s,o){if(gs=s,Ww(),ja()&&!o){var c="program exited (with status: "+s+"), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";r(c),P(c)}Nh(s)}function Vh(s){if(s instanceof js||s=="unwind")return gs;Sr(),s instanceof WebAssembly.RuntimeError&&ml()<=0&&P("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to "+65536+")"),m(1,s)}function Hh(s){var o=e["_"+s];return z(o,"Cannot call unknown function "+s+", make sure it is exported"),o}function zh(s,o,c,l,d){var f={string:O=>{var W=0;if(O!=null&&O!==0){var ht=(O.length<<2)+1;W=Er(ht),ma(O,W,ht)}return W},array:O=>{var W=Er(O.length);return dl(O,W),W}};function h(O){return o==="string"?Ve(O):o==="boolean"?Boolean(O):O}var p=Hh(s),y=[],v=0;if(z(o!=="array",'Return type should not be "array".'),l)for(var b=0;b<l.length;b++){var C=f[c[b]];C?(v===0&&(v=w()),y[b]=C(l[b])):y[b]=l[b]}var T=p.apply(null,y);function x(O){return v!==0&&j(v),h(O)}return T=x(T),T}function Wh(){tf("fetchSettings")}var fl={__assert_fail:cf,__cxa_begin_catch:lf,__cxa_end_catch:uf,__cxa_find_matching_catch_2:ff,__cxa_find_matching_catch_3:hf,__cxa_find_matching_catch_4:_f,__cxa_find_matching_catch_5:pf,__cxa_find_matching_catch_6:yf,__cxa_find_matching_catch_7:mf,__cxa_rethrow:vf,__cxa_throw:bf,__cxa_uncaught_exceptions:gf,__dlsym:wf,__resumeException:df,__syscall__newselect:jf,__syscall_bind:If,__syscall_connect:kf,__syscall_faccessat:Cf,__syscall_fcntl64:Ff,__syscall_fstat64:Af,__syscall_ftruncate64:Tf,__syscall_getdents64:Ef,__syscall_getpeername:xf,__syscall_getsockopt:Df,__syscall_ioctl:Bf,__syscall_lstat64:Rf,__syscall_mkdirat:Of,__syscall_newfstatat:Mf,__syscall_openat:Lf,__syscall_recvfrom:Uf,__syscall_renameat:Nf,__syscall_rmdir:Pf,__syscall_sendto:Vf,__syscall_socket:Hf,__syscall_stat64:zf,__syscall_unlinkat:Wf,_emscripten_get_now_is_monotonic:$f,abort:Gf,dlopen:Xf,duckdb_web_fs_directory_create:Kf,duckdb_web_fs_directory_exists:Jf,duckdb_web_fs_directory_list_files:qf,duckdb_web_fs_directory_remove:Qf,duckdb_web_fs_file_close:Zf,duckdb_web_fs_file_exists:th,duckdb_web_fs_file_get_last_modified_time:eh,duckdb_web_fs_file_move:ih,duckdb_web_fs_file_open:nh,duckdb_web_fs_file_read:rh,duckdb_web_fs_file_truncate:sh,duckdb_web_fs_file_write:oh,duckdb_web_fs_get_default_data_protocol:ah,duckdb_web_fs_glob:ch,duckdb_web_test_platform_feature:lh,duckdb_web_udf_scalar_call:uh,emscripten_console_error:dh,emscripten_date_now:fh,emscripten_get_heap_max:hh,emscripten_get_now:Ta,emscripten_memcpy_big:_h,emscripten_resize_heap:yh,environ_get:bh,environ_sizes_get:gh,fd_close:wh,fd_fdstat_get:jh,fd_pread:Sh,fd_pwrite:Ih,fd_read:kh,fd_seek:Ch,fd_sync:Fh,fd_write:Th,getaddrinfo:Eh,getentropy:As,getnameinfo:Dh,invoke_di:wv,invoke_dii:Nv,invoke_diii:iv,invoke_diiii:$v,invoke_diiiiid:Pv,invoke_diijii:w0,invoke_fi:bv,invoke_fiii:ev,invoke_fiiii:Yv,invoke_fiijii:g0,invoke_i:uv,invoke_id:vv,invoke_idd:Cv,invoke_idiii:xv,invoke_if:mv,invoke_iff:kv,invoke_ii:Ym,invoke_iid:zv,invoke_iidii:Ev,invoke_iii:Km,invoke_iiid:Fv,invoke_iiidj:B0,invoke_iiidjiij:U0,invoke_iiii:Qm,invoke_iiiid:Vv,invoke_iiiidjj:P0,invoke_iiiii:tv,invoke_iiiiid:pv,invoke_iiiiii:Zm,invoke_iiiiiidd:Av,invoke_iiiiiii:rv,invoke_iiiiiiii:av,invoke_iiiiiiiii:yv,invoke_iiiiiiiiii:Ov,invoke_iiiiiiiiiii:cv,invoke_iiiiiiiiiiii:fv,invoke_iiiiiiiiiiiii:lv,invoke_iiiiiiiiiiiiiiii:Mv,invoke_iiiiiiiiiiiiiiiii:Hv,invoke_iiiiiiiiiiiiiiiiii:Tv,invoke_iiiiiiiiiiiij:n0,invoke_iiiiiiiiiij:R0,invoke_iiiiiiiiiiji:vg,invoke_iiiiiiiiijiiiiiii:O0,invoke_iiiiiiiij:Nb,invoke_iiiiiiiiji:H0,invoke_iiiiiiiijj:Bb,invoke_iiiiiiij:i0,invoke_iiiiiiiji:N0,invoke_iiiiiiijii:b0,invoke_iiiiiij:Ub,invoke_iiiiiiji:j0,invoke_iiiiiijji:Ow,invoke_iiiiiijjiijjj:Ng,invoke_iiiiij:rb,invoke_iiiiiji:I0,invoke_iiiiijii:v0,invoke_iiiiijiii:rw,invoke_iiiiijij:Ag,invoke_iiiiijj:sb,invoke_iiiiijjj:Nw,invoke_iiiiijjji:nw,invoke_iiiij:_b,invoke_iiiiji:m0,invoke_iiiijii:S0,invoke_iiiijiii:Rb,invoke_iiiijj:Eb,invoke_iiiijji:dg,invoke_iiiijjii:Pg,invoke_iiiijjij:F0,invoke_iiiijjj:V0,invoke_iiiijjjj:iw,invoke_iiij:Zv,invoke_iiiji:kb,invoke_iiijii:Db,invoke_iiijiii:qg,invoke_iiijiij:dw,invoke_iiijiiji:gb,invoke_iiijiijj:kw,invoke_iiijj:Qv,invoke_iiijji:Ib,invoke_iiijjii:Vg,invoke_iiijjiij:L0,invoke_iiijjiiji:M0,invoke_iiijjj:_w,invoke_iiijjji:wb,invoke_iiijjjii:Mw,invoke_iij:hb,invoke_iiji:yb,invoke_iijii:mb,invoke_iijiii:Mb,invoke_iijiiii:aw,invoke_iijiijj:Tw,invoke_iijiji:G0,invoke_iijj:Ab,invoke_iijji:fb,invoke_iijjii:ow,invoke_iijjiii:fw,invoke_iijjiiii:hw,invoke_iijjijj:wg,invoke_iijjj:Vb,invoke_ij:c0,invoke_iji:ag,invoke_ijii:d0,invoke_ijji:mg,invoke_ijjiii:a0,invoke_j:Lb,invoke_jd:ig,invoke_jf:ng,invoke_ji:eb,invoke_jii:ib,invoke_jiii:Tb,invoke_jiiii:Kv,invoke_jiiiii:lg,invoke_jiiiiii:_g,invoke_jiiiiiii:t0,invoke_jiiiiiijii:ug,invoke_jiiiiijiiii:Y0,invoke_jiiiij:A0,invoke_jiiiiji:Fg,invoke_jiiiijii:W0,invoke_jiiij:xg,invoke_jiiiji:Lg,invoke_jiiijii:Xb,invoke_jiiijiii:$0,invoke_jiiijj:D0,invoke_jiiijjj:kg,invoke_jiij:Eg,invoke_jiiji:Og,invoke_jiijii:zg,invoke_jiijiii:Gb,invoke_jiijj:e0,invoke_jiijjjii:yg,invoke_jij:Fb,invoke_jijiii:Gg,invoke_jijiiii:Uw,invoke_jijij:Jg,invoke_jijj:Sw,invoke_jijjij:Xg,invoke_jj:Ob,invoke_jji:Z0,invoke_jjiji:o0,invoke_jjj:p0,invoke_jjjii:Q0,invoke_jjjji:J0,invoke_jjjjjjd:y0,invoke_v:Xm,invoke_vdii:Rv,invoke_vfii:Bv,invoke_vi:qm,invoke_vid:jv,invoke_viddddi:Uv,invoke_vif:gv,invoke_vii:Gm,invoke_viid:nv,invoke_viidii:Dv,invoke_viii:Jm,invoke_viiii:$m,invoke_viiiidiiii:Xv,invoke_viiiii:ov,invoke_viiiiii:sv,invoke_viiiiiidiii:Wv,invoke_viiiiiii:dv,invoke_viiiiiiii:Lv,invoke_viiiiiiiii:Iv,invoke_viiiiiiiiii:hv,invoke_viiiiiiiiiii:Gv,invoke_viiiiiiiiiiiii:Sv,invoke_viiiiiiiiiiiiiii:_v,invoke_viiiiiiijjjji:ub,invoke_viiiiiij:tg,invoke_viiiiiiji:T0,invoke_viiiiiijii:lb,invoke_viiiiij:ww,invoke_viiiiiji:Ug,invoke_viiiiijiii:h0,invoke_viiiiijiiii:u0,invoke_viiiiijj:yw,invoke_viiiiijjii:cb,invoke_viiiiijjji:Fw,invoke_viiiij:db,invoke_viiiiji:hg,invoke_viiiijii:x0,invoke_viiiijiii:E0,invoke_viiiijiiii:Sg,invoke_viiiijiiiii:jg,invoke_viiiijiiiiiiii:_0,invoke_viiiijijji:$b,invoke_viiiijj:ab,invoke_viiiijji:z0,invoke_viiij:xb,invoke_viiiji:pg,invoke_viiijii:gg,invoke_viiijiii:k0,invoke_viiijiiiijjj:Jb,invoke_viiijij:ew,invoke_viiijiji:Lw,invoke_viiijijiji:tw,invoke_viiijijj:Cg,invoke_viiijijjj:Aw,invoke_viiijj:tb,invoke_viiijji:fg,invoke_viiijjii:Hg,invoke_viiijjiij:Qb,invoke_viiijjij:zb,invoke_viiijjj:og,invoke_viiijjji:sw,invoke_viiijjjji:Ew,invoke_viij:qv,invoke_viiji:vb,invoke_viijii:nb,invoke_viijiii:Wb,invoke_viijiiii:uw,invoke_viijiiiii:Wg,invoke_viijiiiiii:K0,invoke_viijiiiij:Kb,invoke_viijiiij:Yg,invoke_viijiij:Kg,invoke_viijiiji:Mg,invoke_viijiijj:Cw,invoke_viijij:Hb,invoke_viijiji:xw,invoke_viijijiiiijjj:qb,invoke_viijijj:Iw,invoke_viijj:Jv,invoke_viijji:Cb,invoke_viijjii:Zg,invoke_viijjiij:bb,invoke_viijjiijj:Sb,invoke_viijjiijjj:jb,invoke_viijjj:Bg,invoke_viijjji:cg,invoke_vij:ob,invoke_vijdiijj:gw,invoke_vijfiijj:bw,invoke_viji:pb,invoke_vijii:rg,invoke_vijiii:q0,invoke_vijiiii:bg,invoke_vijiiiii:lw,invoke_vijiiiiii:cw,invoke_vijiiiji:$g,invoke_vijiiijj:mw,invoke_vijij:Qg,invoke_vijiji:r0,invoke_vijijiiiijjj:Zb,invoke_vijijj:sg,invoke_vijijjiiiii:Dw,invoke_vijijjiij:Yb,invoke_vijijjji:jw,invoke_vijj:eg,invoke_vijji:C0,invoke_vijjiii:Rw,invoke_vijjiiiii:Bw,invoke_vijjiijj:vw,invoke_vijjij:s0,invoke_vijjj:Ig,invoke_vijjji:Dg,invoke_vj:pw,invoke_vjii:f0,invoke_vjiii:Pb,invoke_vjiiii:l0,invoke_vjiiiji:X0,invoke_vjjii:Tg,invoke_vjjijij:Rg,llvm_eh_typeid_for:Bh,strftime_l:Uh},a1=Zd(),c1=g("__wasm_call_ctors"),Yh=e._main=g("main"),l1=e._duckdb_web_fs_glob_add_path=g("duckdb_web_fs_glob_add_path"),u1=e._duckdb_web_clear_response=g("duckdb_web_clear_response"),d1=e._duckdb_web_fail_with=g("duckdb_web_fail_with"),f1=e._duckdb_web_reset=g("duckdb_web_reset"),h1=e._duckdb_web_connect=g("duckdb_web_connect"),_1=e._duckdb_web_disconnect=g("duckdb_web_disconnect"),p1=e._duckdb_web_flush_files=g("duckdb_web_flush_files"),y1=e._duckdb_web_flush_file=g("duckdb_web_flush_file"),m1=e._duckdb_web_open=g("duckdb_web_open"),v1=e._duckdb_web_get_global_file_info=g("duckdb_web_get_global_file_info"),b1=e._duckdb_web_collect_file_stats=g("duckdb_web_collect_file_stats"),g1=e._duckdb_web_export_file_stats=g("duckdb_web_export_file_stats"),w1=e._duckdb_web_fs_drop_file=g("duckdb_web_fs_drop_file"),j1=e._duckdb_web_fs_drop_files=g("duckdb_web_fs_drop_files"),S1=e._duckdb_web_fs_glob_file_infos=g("duckdb_web_fs_glob_file_infos"),I1=e._duckdb_web_fs_get_file_info_by_id=g("duckdb_web_fs_get_file_info_by_id"),k1=e._duckdb_web_fs_get_file_info_by_name=g("duckdb_web_fs_get_file_info_by_name"),C1=e._duckdb_web_fs_register_file_url=g("duckdb_web_fs_register_file_url"),F1=e._duckdb_web_fs_register_file_buffer=g("duckdb_web_fs_register_file_buffer"),A1=e._duckdb_web_copy_file_to_buffer=g("duckdb_web_copy_file_to_buffer"),T1=e._duckdb_web_copy_file_to_path=g("duckdb_web_copy_file_to_path"),E1=e._duckdb_web_get_version=g("duckdb_web_get_version"),x1=e._duckdb_web_get_feature_flags=g("duckdb_web_get_feature_flags"),D1=e._duckdb_web_tokenize=g("duckdb_web_tokenize"),B1=e._duckdb_web_udf_scalar_create=g("duckdb_web_udf_scalar_create"),R1=e._duckdb_web_prepared_create=g("duckdb_web_prepared_create"),O1=e._duckdb_web_prepared_close=g("duckdb_web_prepared_close"),M1=e._duckdb_web_prepared_run=g("duckdb_web_prepared_run"),L1=e._duckdb_web_prepared_send=g("duckdb_web_prepared_send"),U1=e._duckdb_web_query_run=g("duckdb_web_query_run"),N1=e._duckdb_web_pending_query_start=g("duckdb_web_pending_query_start"),P1=e._duckdb_web_pending_query_poll=g("duckdb_web_pending_query_poll"),V1=e._duckdb_web_pending_query_cancel=g("duckdb_web_pending_query_cancel"),H1=e._duckdb_web_query_fetch_results=g("duckdb_web_query_fetch_results"),z1=e._duckdb_web_get_tablenames=g("duckdb_web_get_tablenames"),W1=e._duckdb_web_insert_arrow_from_ipc_stream=g("duckdb_web_insert_arrow_from_ipc_stream"),Y1=e._duckdb_web_insert_csv_from_path=g("duckdb_web_insert_csv_from_path"),$1=e._duckdb_web_insert_json_from_path=g("duckdb_web_insert_json_from_path"),$h=g("__errno_location"),G1=g("__dl_seterr"),Gh=e._fflush=g("fflush"),Ba=g("htonl"),Ra=g("htons"),hl=g("ntohs"),_l=e._malloc=g("malloc"),pl=e._free=g("free"),I=g("setThrew"),Es=g("setTempRet0"),X1=g("getTempRet0"),yl=function(){return(yl=e.asm.emscripten_stack_init).apply(null,arguments)},Xh=function(){return(Xh=e.asm.emscripten_stack_get_free).apply(null,arguments)},Kh=function(){return(Kh=e.asm.emscripten_stack_get_base).apply(null,arguments)},Oa=function(){return(Oa=e.asm.emscripten_stack_get_end).apply(null,arguments)},w=g("stackSave"),j=g("stackRestore"),Er=g("stackAlloc"),ml=function(){return(ml=e.asm.emscripten_stack_get_current).apply(null,arguments)},Jh=e.___get_exception_message=g("__get_exception_message"),qh=g("__cxa_free_exception"),Qh=g("__cxa_can_catch"),Zh=g("__cxa_is_pointer_type"),K1=e.dynCall_jiji=g("dynCall_jiji"),t_=e.dynCall_jiiii=g("dynCall_jiiii"),e_=e.dynCall_iiiiij=g("dynCall_iiiiij"),i_=e.dynCall_iiiiijj=g("dynCall_iiiiijj"),J1=e.dynCall_iiiiiijj=g("dynCall_iiiiiijj"),n_=e.dynCall_viijii=g("dynCall_viijii"),r_=e.dynCall_viiiij=g("dynCall_viiiij"),s_=e.dynCall_jii=g("dynCall_jii"),o_=e.dynCall_iij=g("dynCall_iij"),a_=e.dynCall_viij=g("dynCall_viij"),c_=e.dynCall_vij=g("dynCall_vij"),l_=e.dynCall_iijj=g("dynCall_iijj"),u_=e.dynCall_viji=g("dynCall_viji"),d_=e.dynCall_iiij=g("dynCall_iiij"),f_=e.dynCall_iiiijj=g("dynCall_iiiijj"),h_=e.dynCall_viiijj=g("dynCall_viiijj"),__=e.dynCall_viiij=g("dynCall_viiij"),p_=e.dynCall_iiiji=g("dynCall_iiiji"),y_=e.dynCall_iiijii=g("dynCall_iiijii"),m_=e.dynCall_jiii=g("dynCall_jiii"),v_=e.dynCall_ji=g("dynCall_ji"),b_=e.dynCall_jij=g("dynCall_jij"),g_=e.dynCall_iiiiiji=g("dynCall_iiiiiji"),w_=e.dynCall_iiji=g("dynCall_iiji"),j_=e.dynCall_jj=g("dynCall_jj"),S_=e.dynCall_viiji=g("dynCall_viiji"),I_=e.dynCall_iiiij=g("dynCall_iiiij"),k_=e.dynCall_jiiijii=g("dynCall_jiiijii"),C_=e.dynCall_jiijiii=g("dynCall_jiijiii"),F_=e.dynCall_viiijjij=g("dynCall_viiijjij"),A_=e.dynCall_viijiii=g("dynCall_viijiii"),T_=e.dynCall_vijijjiij=g("dynCall_vijijjiij"),E_=e.dynCall_viiijjiij=g("dynCall_viiijjiij"),x_=e.dynCall_viiiijijji=g("dynCall_viiiijijji"),D_=e.dynCall_viijiiiij=g("dynCall_viijiiiij"),B_=e.dynCall_viiijiiiijjj=g("dynCall_viiijiiiijjj"),R_=e.dynCall_viijijiiiijjj=g("dynCall_viijijiiiijjj"),O_=e.dynCall_viijj=g("dynCall_viijj"),M_=e.dynCall_iijjj=g("dynCall_iijjj"),L_=e.dynCall_iiijji=g("dynCall_iiijji"),U_=e.dynCall_vijijiiiijjj=g("dynCall_vijijiiiijjj"),N_=e.dynCall_viiiiiij=g("dynCall_viiiiiij"),P_=e.dynCall_jd=g("dynCall_jd"),V_=e.dynCall_jf=g("dynCall_jf"),H_=e.dynCall_vijijj=g("dynCall_vijijj"),z_=e.dynCall_viiijjj=g("dynCall_viiijjj"),W_=e.dynCall_iji=g("dynCall_iji"),Y_=e.dynCall_viijjji=g("dynCall_viijjji"),$_=e.dynCall_iiiiiij=g("dynCall_iiiiiij"),G_=e.dynCall_iiiiiiiij=g("dynCall_iiiiiiiij"),X_=e.dynCall_vijj=g("dynCall_vijj"),K_=e.dynCall_vijii=g("dynCall_vijii"),J_=e.dynCall_jiiiii=g("dynCall_jiiiii"),q_=e.dynCall_j=g("dynCall_j"),Q_=e.dynCall_viijij=g("dynCall_viijij"),Z_=e.dynCall_vijiiii=g("dynCall_vijiiii"),q1=e.dynCall_viiijiiiijj=g("dynCall_viiijiiiijj"),tp=e.dynCall_viiijii=g("dynCall_viiijii"),ep=e.dynCall_iijjijj=g("dynCall_iijjijj"),ip=e.dynCall_viiiijiiiii=g("dynCall_viiiijiiiii"),np=e.dynCall_viiiijiiii=g("dynCall_viiiijiiii"),rp=e.dynCall_jiij=g("dynCall_jiij"),sp=e.dynCall_viijjj=g("dynCall_viijjj"),op=e.dynCall_jiiij=g("dynCall_jiiij"),ap=e.dynCall_iiiiiijjiijjj=g("dynCall_iiiiiijjiijjj"),cp=e.dynCall_viiiji=g("dynCall_viiiji"),lp=e.dynCall_viijiiji=g("dynCall_viijiiji"),up=e.dynCall_iiiijjii=g("dynCall_iiiijjii"),dp=e.dynCall_iiiijji=g("dynCall_iiiijji"),fp=e.dynCall_iiijjii=g("dynCall_iiijjii"),hp=e.dynCall_vjjijij=g("dynCall_vjjijij"),_p=e.dynCall_vijjji=g("dynCall_vijjji"),pp=e.dynCall_vjjii=g("dynCall_vjjii"),yp=e.dynCall_viiiiiji=g("dynCall_viiiiiji"),mp=e.dynCall_jiiiji=g("dynCall_jiiiji"),vp=e.dynCall_viiijjii=g("dynCall_viiijjii"),bp=e.dynCall_vijjj=g("dynCall_vijjj"),gp=e.dynCall_jijij=g("dynCall_jijij"),wp=e.dynCall_viiiijj=g("dynCall_viiiijj"),jp=e.dynCall_iiijiii=g("dynCall_iiijiii"),Sp=e.dynCall_jijjij=g("dynCall_jijjij"),Ip=e.dynCall_jiijii=g("dynCall_jiijii"),kp=e.dynCall_jijiii=g("dynCall_jijiii"),Cp=e.dynCall_viijiiiii=g("dynCall_viijiiiii"),Fp=e.dynCall_viijiiij=g("dynCall_viijiiij"),Ap=e.dynCall_vijiiiji=g("dynCall_vijiiiji"),Tp=e.dynCall_jiiji=g("dynCall_jiiji"),Ep=e.dynCall_viiijij=g("dynCall_viiijij"),xp=e.dynCall_viijiij=g("dynCall_viijiij"),Dp=e.dynCall_viiiiijj=g("dynCall_viiiiijj"),Bp=e.dynCall_viiijji=g("dynCall_viiijji"),Rp=e.dynCall_vijij=g("dynCall_vijij"),Op=e.dynCall_iiijj=g("dynCall_iiijj"),Mp=e.dynCall_viijjii=g("dynCall_viijjii"),Lp=e.dynCall_iiiiiiiiiiji=g("dynCall_iiiiiiiiiiji"),Up=e.dynCall_jiiijjj=g("dynCall_jiiijjj"),Np=e.dynCall_viiijijj=g("dynCall_viiijijj"),Pp=e.dynCall_jiiiiji=g("dynCall_jiiiiji"),Vp=e.dynCall_iiiiijij=g("dynCall_iiiiijij"),Hp=e.dynCall_jiiiiiii=g("dynCall_jiiiiiii"),zp=e.dynCall_jiijj=g("dynCall_jiijj"),Wp=e.dynCall_vijiji=g("dynCall_vijiji"),Yp=e.dynCall_vijjij=g("dynCall_vijjij"),$p=e.dynCall_jiiiij=g("dynCall_jiiiij"),Gp=e.dynCall_viiiijiiiiiiii=g("dynCall_viiiijiiiiiiii"),Xp=e.dynCall_ij=g("dynCall_ij"),Kp=e.dynCall_jjj=g("dynCall_jjj"),Jp=e.dynCall_jjiji=g("dynCall_jjiji"),qp=e.dynCall_vjii=g("dynCall_vjii"),Q1=e.dynCall_ijjj=g("dynCall_ijjj"),Z1=e.dynCall_jjjd=g("dynCall_jjjd"),Qp=e.dynCall_jjjjjjd=g("dynCall_jjjjjjd"),Zp=e.dynCall_jijj=g("dynCall_jijj"),ty=e.dynCall_ijii=g("dynCall_ijii"),ey=e.dynCall_vjiiii=g("dynCall_vjiiii"),iy=e.dynCall_viiiiijiiii=g("dynCall_viiiiijiiii"),ny=e.dynCall_viiiiijiii=g("dynCall_viiiiijiii"),ry=e.dynCall_fiijii=g("dynCall_fiijii"),sy=e.dynCall_diijii=g("dynCall_diijii"),oy=e.dynCall_iiiiijii=g("dynCall_iiiiijii"),ay=e.dynCall_iiiiiiijii=g("dynCall_iiiiiiijii"),cy=e.dynCall_iiiiji=g("dynCall_iiiiji"),ly=e.dynCall_iiiiiiji=g("dynCall_iiiiiiji"),uy=e.dynCall_iiiijii=g("dynCall_iiiijii"),dy=e.dynCall_viiiiiiji=g("dynCall_viiiiiiji"),fy=e.dynCall_iiiijiii=g("dynCall_iiiijiii"),hy=e.dynCall_viiiiji=g("dynCall_viiiiji"),_y=e.dynCall_viiijiii=g("dynCall_viiijiii"),py=e.dynCall_viiiijiii=g("dynCall_viiiijiii"),yy=e.dynCall_viiiijii=g("dynCall_viiiijii"),my=e.dynCall_vijji=g("dynCall_vijji"),vy=e.dynCall_iiiijjij=g("dynCall_iiiijjij"),by=e.dynCall_jiiijj=g("dynCall_jiiijj"),tk=e.dynCall_jiiiijj=g("dynCall_jiiiijj"),gy=e.dynCall_iiiiiiiijj=g("dynCall_iiiiiiiijj"),wy=e.dynCall_iijii=g("dynCall_iijii"),jy=e.dynCall_iiidj=g("dynCall_iiidj"),Sy=e.dynCall_ijji=g("dynCall_ijji"),Iy=e.dynCall_iiiiiiij=g("dynCall_iiiiiiij"),ky=e.dynCall_iiiiiiiiiiiij=g("dynCall_iiiiiiiiiiiij"),Cy=e.dynCall_iiiiiiiiiij=g("dynCall_iiiiiiiiiij"),Fy=e.dynCall_iiiiiiiiijiiiiiii=g("dynCall_iiiiiiiiijiiiiiii"),Ay=e.dynCall_iiijjiiji=g("dynCall_iiijjiiji"),Ty=e.dynCall_iiijjiij=g("dynCall_iiijjiij"),Ey=e.dynCall_iiidjiij=g("dynCall_iiidjiij"),xy=e.dynCall_iiiiiiiji=g("dynCall_iiiiiiiji"),Dy=e.dynCall_iiiidjj=g("dynCall_iiiidjj"),By=e.dynCall_iiiijjj=g("dynCall_iiiijjj"),Ry=e.dynCall_iiiiiiiiji=g("dynCall_iiiiiiiiji"),Oy=e.dynCall_jiiiiiijii=g("dynCall_jiiiiiijii"),My=e.dynCall_viiiijji=g("dynCall_viiiijji"),Ly=e.dynCall_jiiiiii=g("dynCall_jiiiiii"),Uy=e.dynCall_jiijjjii=g("dynCall_jiijjjii"),Ny=e.dynCall_jiiiijii=g("dynCall_jiiiijii"),Py=e.dynCall_jiiiiijiiii=g("dynCall_jiiiiijiiii"),Vy=e.dynCall_jiiijiii=g("dynCall_jiiijiii"),Hy=e.dynCall_iijiji=g("dynCall_iijiji"),zy=e.dynCall_vjiiiji=g("dynCall_vjiiiji"),Wy=e.dynCall_viijiiiiii=g("dynCall_viijiiiiii"),Yy=e.dynCall_jjjji=g("dynCall_jjjji"),$y=e.dynCall_vijiii=g("dynCall_vijiii"),Gy=e.dynCall_jjjii=g("dynCall_jjjii"),Xy=e.dynCall_jji=g("dynCall_jji"),Ky=e.dynCall_viiijijiji=g("dynCall_viiijijiji"),Jy=e.dynCall_iiiiijjji=g("dynCall_iiiiijjji"),qy=e.dynCall_iiiijjjj=g("dynCall_iiiijjjj"),Qy=e.dynCall_viijjiij=g("dynCall_viijjiij"),Zy=e.dynCall_iiijiiji=g("dynCall_iiijiiji"),tm=e.dynCall_iiijjji=g("dynCall_iiijjji"),em=e.dynCall_viijjiijjj=g("dynCall_viijjiijjj"),im=e.dynCall_viijjiijj=g("dynCall_viijjiijj"),nm=e.dynCall_viijji=g("dynCall_viijji"),rm=e.dynCall_iiiiijiii=g("dynCall_iiiiijiii"),sm=e.dynCall_vjiii=g("dynCall_vjiii"),om=e.dynCall_viiijjji=g("dynCall_viiijjji"),am=e.dynCall_iijji=g("dynCall_iijji"),cm=e.dynCall_iijjii=g("dynCall_iijjii"),lm=e.dynCall_iijiiii=g("dynCall_iijiiii"),um=e.dynCall_viijiiii=g("dynCall_viijiiii"),dm=e.dynCall_iiijiij=g("dynCall_iiijiij"),fm=e.dynCall_iijjiii=g("dynCall_iijjiii"),hm=e.dynCall_iijjiiii=g("dynCall_iijjiiii"),_m=e.dynCall_vijiiiiii=g("dynCall_vijiiiiii"),pm=e.dynCall_vijiiiii=g("dynCall_vijiiiii"),ym=e.dynCall_iiijjj=g("dynCall_iiijjj"),mm=e.dynCall_vj=g("dynCall_vj"),vm=e.dynCall_viiiiijjii=g("dynCall_viiiiijjii"),bm=e.dynCall_viiiiiijii=g("dynCall_viiiiiijii"),gm=e.dynCall_viiiiiiijjjji=g("dynCall_viiiiiiijjjji"),wm=e.dynCall_ijjiii=g("dynCall_ijjiii"),jm=e.dynCall_iijiii=g("dynCall_iijiii"),Sm=e.dynCall_vijiiijj=g("dynCall_vijiiijj"),Im=e.dynCall_vijjiijj=g("dynCall_vijjiijj"),km=e.dynCall_vijfiijj=g("dynCall_vijfiijj"),Cm=e.dynCall_vijdiijj=g("dynCall_vijdiijj"),Fm=e.dynCall_viiiiij=g("dynCall_viiiiij"),Am=e.dynCall_vijijjji=g("dynCall_vijijjji"),Tm=e.dynCall_viijiijj=g("dynCall_viijiijj"),Em=e.dynCall_viijijj=g("dynCall_viijijj"),xm=e.dynCall_viiiiijjji=g("dynCall_viiiiijjji"),Dm=e.dynCall_iiijiijj=g("dynCall_iiijiijj"),Bm=e.dynCall_viiijijjj=g("dynCall_viiijijjj"),Rm=e.dynCall_iijiijj=g("dynCall_iijiijj"),Om=e.dynCall_viiijjjji=g("dynCall_viiijjjji"),Mm=e.dynCall_vijjiii=g("dynCall_vijjiii"),Lm=e.dynCall_vijijjiiiii=g("dynCall_vijijjiiiii"),Um=e.dynCall_vijjiiiii=g("dynCall_vijjiiiii"),Nm=e.dynCall_iiiiiijji=g("dynCall_iiiiiijji"),Pm=e.dynCall_viiijiji=g("dynCall_viiijiji"),Vm=e.dynCall_iiiiijjj=g("dynCall_iiiiijjj"),Hm=e.dynCall_jijiiii=g("dynCall_jijiiii"),zm=e.dynCall_viijiji=g("dynCall_viijiji"),Wm=e.dynCall_iiijjjii=g("dynCall_iiijjjii");function Ym(s,o){var c=w();try{return N(s)(o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function $m(s,o,c,l,d){var f=w();try{N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function Gm(s,o,c){var l=w();try{N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Xm(s){var o=w();try{N(s)()}catch(c){if(j(o),!(c instanceof S))throw c;I(1,0)}}function Km(s,o,c){var l=w();try{return N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Jm(s,o,c,l){var d=w();try{N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function qm(s,o){var c=w();try{N(s)(o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function Qm(s,o,c,l){var d=w();try{return N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function Zm(s,o,c,l,d,f){var h=w();try{return N(s)(o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function tv(s,o,c,l,d){var f=w();try{return N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function ev(s,o,c,l){var d=w();try{return N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function iv(s,o,c,l){var d=w();try{return N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function nv(s,o,c,l){var d=w();try{N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function rv(s,o,c,l,d,f,h){var p=w();try{return N(s)(o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function sv(s,o,c,l,d,f,h){var p=w();try{N(s)(o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function ov(s,o,c,l,d,f){var h=w();try{N(s)(o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function av(s,o,c,l,d,f,h,p){var y=w();try{return N(s)(o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function cv(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return N(s)(o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function lv(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{return N(s)(o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function uv(s){var o=w();try{return N(s)()}catch(c){if(j(o),!(c instanceof S))throw c;I(1,0)}}function dv(s,o,c,l,d,f,h,p){var y=w();try{N(s)(o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function fv(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return N(s)(o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function hv(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{N(s)(o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function _v(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W){var ht=w();try{N(s)(o,c,l,d,f,h,p,y,v,b,C,T,x,O,W)}catch(yt){if(j(ht),!(yt instanceof S))throw yt;I(1,0)}}function pv(s,o,c,l,d,f){var h=w();try{return N(s)(o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function yv(s,o,c,l,d,f,h,p,y){var v=w();try{return N(s)(o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function mv(s,o){var c=w();try{return N(s)(o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function vv(s,o){var c=w();try{return N(s)(o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function bv(s,o){var c=w();try{return N(s)(o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function gv(s,o,c){var l=w();try{N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function wv(s,o){var c=w();try{return N(s)(o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function jv(s,o,c){var l=w();try{N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Sv(s,o,c,l,d,f,h,p,y,v,b,C,T,x){var O=w();try{N(s)(o,c,l,d,f,h,p,y,v,b,C,T,x)}catch(W){if(j(O),!(W instanceof S))throw W;I(1,0)}}function Iv(s,o,c,l,d,f,h,p,y,v){var b=w();try{N(s)(o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function kv(s,o,c){var l=w();try{return N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Cv(s,o,c){var l=w();try{return N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Fv(s,o,c,l){var d=w();try{return N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function Av(s,o,c,l,d,f,h,p){var y=w();try{return N(s)(o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Tv(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt){var E=w();try{return N(s)(o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt)}catch(U){if(j(E),!(U instanceof S))throw U;I(1,0)}}function Ev(s,o,c,l,d){var f=w();try{return N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function xv(s,o,c,l,d){var f=w();try{return N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function Dv(s,o,c,l,d,f){var h=w();try{N(s)(o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Bv(s,o,c,l){var d=w();try{N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function Rv(s,o,c,l){var d=w();try{N(s)(o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function Ov(s,o,c,l,d,f,h,p,y,v){var b=w();try{return N(s)(o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Mv(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W){var ht=w();try{return N(s)(o,c,l,d,f,h,p,y,v,b,C,T,x,O,W)}catch(yt){if(j(ht),!(yt instanceof S))throw yt;I(1,0)}}function Lv(s,o,c,l,d,f,h,p,y){var v=w();try{N(s)(o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Uv(s,o,c,l,d,f,h){var p=w();try{N(s)(o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Nv(s,o,c){var l=w();try{return N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Pv(s,o,c,l,d,f,h){var p=w();try{return N(s)(o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Vv(s,o,c,l,d){var f=w();try{return N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function Hv(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht){var yt=w();try{return N(s)(o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht)}catch(E){if(j(yt),!(E instanceof S))throw E;I(1,0)}}function zv(s,o,c){var l=w();try{return N(s)(o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Wv(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{N(s)(o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Yv(s,o,c,l,d){var f=w();try{return N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function $v(s,o,c,l,d){var f=w();try{return N(s)(o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function Gv(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{N(s)(o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function Xv(s,o,c,l,d,f,h,p,y,v){var b=w();try{N(s)(o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Kv(s,o,c,l,d){var f=w();try{return t_(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function Jv(s,o,c,l,d,f,h){var p=w();try{O_(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function qv(s,o,c,l,d){var f=w();try{a_(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function Qv(s,o,c,l,d,f,h){var p=w();try{return Op(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Zv(s,o,c,l,d){var f=w();try{return d_(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function tb(s,o,c,l,d,f,h,p){var y=w();try{h_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function eb(s,o){var c=w();try{return v_(s,o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function ib(s,o,c){var l=w();try{return s_(s,o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function nb(s,o,c,l,d,f,h){var p=w();try{n_(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function rb(s,o,c,l,d,f,h){var p=w();try{return e_(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function sb(s,o,c,l,d,f,h,p,y){var v=w();try{return i_(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function ob(s,o,c,l){var d=w();try{c_(s,o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function ab(s,o,c,l,d,f,h,p,y){var v=w();try{wp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function cb(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{vm(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function lb(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{bm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function ub(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht){var yt=w();try{gm(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht)}catch(E){if(j(yt),!(E instanceof S))throw E;I(1,0)}}function db(s,o,c,l,d,f,h){var p=w();try{r_(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function fb(s,o,c,l,d,f,h){var p=w();try{return am(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function hb(s,o,c,l){var d=w();try{return o_(s,o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function _b(s,o,c,l,d,f){var h=w();try{return I_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function pb(s,o,c,l,d){var f=w();try{u_(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function yb(s,o,c,l,d){var f=w();try{return w_(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function mb(s,o,c,l,d,f){var h=w();try{return wy(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function vb(s,o,c,l,d,f){var h=w();try{S_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function bb(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Qy(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function gb(s,o,c,l,d,f,h,p,y,v){var b=w();try{return Zy(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function wb(s,o,c,l,d,f,h,p,y,v){var b=w();try{return tm(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function jb(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O){var W=w();try{em(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O)}catch(ht){if(j(W),!(ht instanceof S))throw ht;I(1,0)}}function Sb(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{im(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function Ib(s,o,c,l,d,f,h,p){var y=w();try{return L_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function kb(s,o,c,l,d,f){var h=w();try{return p_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Cb(s,o,c,l,d,f,h,p){var y=w();try{nm(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Fb(s,o,c,l){var d=w();try{return b_(s,o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function Ab(s,o,c,l,d,f){var h=w();try{return l_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Tb(s,o,c,l){var d=w();try{return m_(s,o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function Eb(s,o,c,l,d,f,h,p){var y=w();try{return f_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function xb(s,o,c,l,d,f){var h=w();try{__(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Db(s,o,c,l,d,f,h){var p=w();try{return y_(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Bb(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return gy(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function Rb(s,o,c,l,d,f,h,p,y){var v=w();try{return fy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Ob(s,o,c){var l=w();try{return j_(s,o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function Mb(s,o,c,l,d,f,h){var p=w();try{return jm(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Lb(s){var o=w();try{return q_(s)}catch(c){if(j(o),!(c instanceof S))throw c;I(1,0)}}function Ub(s,o,c,l,d,f,h,p){var y=w();try{return $_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Nb(s,o,c,l,d,f,h,p,y,v){var b=w();try{return G_(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Pb(s,o,c,l,d,f){var h=w();try{sm(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Vb(s,o,c,l,d,f,h,p){var y=w();try{return M_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Hb(s,o,c,l,d,f,h,p){var y=w();try{Q_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function zb(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{F_(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Wb(s,o,c,l,d,f,h,p){var y=w();try{A_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Yb(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{T_(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function $b(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{x_(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function Gb(s,o,c,l,d,f,h,p){var y=w();try{return C_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Xb(s,o,c,l,d,f,h,p){var y=w();try{return k_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Kb(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{D_(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Jb(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W){var ht=w();try{B_(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W)}catch(yt){if(j(ht),!(yt instanceof S))throw yt;I(1,0)}}function qb(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt){var E=w();try{R_(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt)}catch(U){if(j(E),!(U instanceof S))throw U;I(1,0)}}function Qb(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{E_(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function Zb(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht){var yt=w();try{U_(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht)}catch(E){if(j(yt),!(E instanceof S))throw E;I(1,0)}}function tg(s,o,c,l,d,f,h,p,y){var v=w();try{N_(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function eg(s,o,c,l,d,f){var h=w();try{X_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function ig(s,o){var c=w();try{return P_(s,o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function ng(s,o){var c=w();try{return V_(s,o)}catch(l){if(j(c),!(l instanceof S))throw l;I(1,0)}}function rg(s,o,c,l,d,f){var h=w();try{K_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function sg(s,o,c,l,d,f,h,p,y){var v=w();try{H_(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function og(s,o,c,l,d,f,h,p,y,v){var b=w();try{z_(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function ag(s,o,c,l){var d=w();try{return W_(s,o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function cg(s,o,c,l,d,f,h,p,y,v){var b=w();try{Y_(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function lg(s,o,c,l,d,f){var h=w();try{return J_(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function ug(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Oy(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function dg(s,o,c,l,d,f,h,p,y){var v=w();try{return dp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function fg(s,o,c,l,d,f,h,p,y){var v=w();try{Bp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function hg(s,o,c,l,d,f,h,p){var y=w();try{hy(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function _g(s,o,c,l,d,f,h){var p=w();try{return Ly(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function pg(s,o,c,l,d,f,h){var p=w();try{cp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function yg(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Uy(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function mg(s,o,c,l,d,f){var h=w();try{return Sy(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function vg(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{return Lp(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function bg(s,o,c,l,d,f,h,p){var y=w();try{Z_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function gg(s,o,c,l,d,f,h,p){var y=w();try{tp(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function wg(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return ep(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function jg(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{ip(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function Sg(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{np(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Ig(s,o,c,l,d,f,h,p){var y=w();try{bp(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function kg(s,o,c,l,d,f,h,p,y,v){var b=w();try{return Up(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Cg(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Np(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Fg(s,o,c,l,d,f,h,p){var y=w();try{return Pp(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Ag(s,o,c,l,d,f,h,p,y,v){var b=w();try{return Vp(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Tg(s,o,c,l,d,f,h){var p=w();try{pp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Eg(s,o,c,l,d){var f=w();try{return rp(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function xg(s,o,c,l,d,f){var h=w();try{return op(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Dg(s,o,c,l,d,f,h,p,y){var v=w();try{_p(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Bg(s,o,c,l,d,f,h,p,y){var v=w();try{sp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Rg(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{hp(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Og(s,o,c,l,d,f){var h=w();try{return Tp(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Mg(s,o,c,l,d,f,h,p,y,v){var b=w();try{lp(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Lg(s,o,c,l,d,f,h){var p=w();try{return mp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Ug(s,o,c,l,d,f,h,p,y){var v=w();try{yp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Ng(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt){var E=w();try{return ap(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt)}catch(U){if(j(E),!(U instanceof S))throw U;I(1,0)}}function Pg(s,o,c,l,d,f,h,p,y,v){var b=w();try{return up(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Vg(s,o,c,l,d,f,h,p,y){var v=w();try{return fp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Hg(s,o,c,l,d,f,h,p,y,v){var b=w();try{vp(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function zg(s,o,c,l,d,f,h){var p=w();try{return Ip(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Wg(s,o,c,l,d,f,h,p,y,v){var b=w();try{Cp(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Yg(s,o,c,l,d,f,h,p,y,v){var b=w();try{Fp(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function $g(s,o,c,l,d,f,h,p,y,v){var b=w();try{Ap(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Gg(s,o,c,l,d,f,h){var p=w();try{return kp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Xg(s,o,c,l,d,f,h,p,y){var v=w();try{return Sp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Kg(s,o,c,l,d,f,h,p,y){var v=w();try{xp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Jg(s,o,c,l,d,f,h){var p=w();try{return gp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function qg(s,o,c,l,d,f,h,p){var y=w();try{return jp(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Qg(s,o,c,l,d,f,h){var p=w();try{Rp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Zg(s,o,c,l,d,f,h,p,y){var v=w();try{Mp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function t0(s,o,c,l,d,f,h,p){var y=w();try{return Hp(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function e0(s,o,c,l,d,f,h){var p=w();try{return zp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function i0(s,o,c,l,d,f,h,p,y){var v=w();try{return Iy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function n0(s,o,c,l,d,f,h,p,y,v,b,C,T,x){var O=w();try{return ky(s,o,c,l,d,f,h,p,y,v,b,C,T,x)}catch(W){if(j(O),!(W instanceof S))throw W;I(1,0)}}function r0(s,o,c,l,d,f,h,p){var y=w();try{Wp(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function s0(s,o,c,l,d,f,h,p,y){var v=w();try{Yp(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function o0(s,o,c,l,d,f,h){var p=w();try{return Jp(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function a0(s,o,c,l,d,f,h,p){var y=w();try{return wm(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function c0(s,o,c){var l=w();try{return Xp(s,o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function l0(s,o,c,l,d,f,h){var p=w();try{ey(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function u0(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{iy(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function d0(s,o,c,l,d){var f=w();try{return ty(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function f0(s,o,c,l,d){var f=w();try{qp(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function h0(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{ny(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function _0(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O){var W=w();try{Gp(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O)}catch(ht){if(j(W),!(ht instanceof S))throw ht;I(1,0)}}function p0(s,o,c,l,d){var f=w();try{return Kp(s,o,c,l,d)}catch(h){if(j(f),!(h instanceof S))throw h;I(1,0)}}function y0(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return Qp(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function m0(s,o,c,l,d,f,h){var p=w();try{return cy(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function v0(s,o,c,l,d,f,h,p,y){var v=w();try{return oy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function b0(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return ay(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function g0(s,o,c,l,d,f,h){var p=w();try{return ry(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function w0(s,o,c,l,d,f,h){var p=w();try{return sy(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function j0(s,o,c,l,d,f,h,p,y){var v=w();try{return ly(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function S0(s,o,c,l,d,f,h,p){var y=w();try{return uy(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function I0(s,o,c,l,d,f,h,p){var y=w();try{return g_(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function k0(s,o,c,l,d,f,h,p,y){var v=w();try{_y(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function C0(s,o,c,l,d,f,h){var p=w();try{my(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function F0(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return vy(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function A0(s,o,c,l,d,f,h){var p=w();try{return $p(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function T0(s,o,c,l,d,f,h,p,y,v){var b=w();try{dy(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function E0(s,o,c,l,d,f,h,p,y,v){var b=w();try{py(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function x0(s,o,c,l,d,f,h,p,y){var v=w();try{yy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function D0(s,o,c,l,d,f,h,p){var y=w();try{return by(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function B0(s,o,c,l,d,f){var h=w();try{return jy(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function R0(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return Cy(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function O0(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt){var E=w();try{return Fy(s,o,c,l,d,f,h,p,y,v,b,C,T,x,O,W,ht,yt)}catch(U){if(j(E),!(U instanceof S))throw U;I(1,0)}}function M0(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return Ay(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function L0(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Ty(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function U0(s,o,c,l,d,f,h,p,y,v){var b=w();try{return Ey(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function N0(s,o,c,l,d,f,h,p,y,v){var b=w();try{return xy(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function P0(s,o,c,l,d,f,h,p,y){var v=w();try{return Dy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function V0(s,o,c,l,d,f,h,p,y,v){var b=w();try{return By(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function H0(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Ry(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function z0(s,o,c,l,d,f,h,p,y,v){var b=w();try{My(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function W0(s,o,c,l,d,f,h,p,y){var v=w();try{return Ny(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Y0(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return Py(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function $0(s,o,c,l,d,f,h,p,y){var v=w();try{return Vy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function G0(s,o,c,l,d,f,h,p){var y=w();try{return Hy(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function X0(s,o,c,l,d,f,h,p,y){var v=w();try{zy(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function K0(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Wy(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function J0(s,o,c,l,d,f,h,p){var y=w();try{return Yy(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function q0(s,o,c,l,d,f,h){var p=w();try{$y(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Q0(s,o,c,l,d,f,h){var p=w();try{return Gy(s,o,c,l,d,f,h)}catch(y){if(j(p),!(y instanceof S))throw y;I(1,0)}}function Z0(s,o,c,l){var d=w();try{return Xy(s,o,c,l)}catch(f){if(j(d),!(f instanceof S))throw f;I(1,0)}}function tw(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{Ky(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function ew(s,o,c,l,d,f,h,p,y){var v=w();try{Ep(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function iw(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return qy(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function nw(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{return Jy(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function rw(s,o,c,l,d,f,h,p,y,v){var b=w();try{return rm(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function sw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{om(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function ow(s,o,c,l,d,f,h,p){var y=w();try{return cm(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function aw(s,o,c,l,d,f,h,p){var y=w();try{return lm(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function cw(s,o,c,l,d,f,h,p,y,v){var b=w();try{_m(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function lw(s,o,c,l,d,f,h,p,y){var v=w();try{pm(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function uw(s,o,c,l,d,f,h,p,y){var v=w();try{um(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function dw(s,o,c,l,d,f,h,p,y){var v=w();try{return dm(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function fw(s,o,c,l,d,f,h,p,y){var v=w();try{return fm(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function hw(s,o,c,l,d,f,h,p,y,v){var b=w();try{return hm(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function _w(s,o,c,l,d,f,h,p,y){var v=w();try{return ym(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function pw(s,o,c){var l=w();try{mm(s,o,c)}catch(d){if(j(l),!(d instanceof S))throw d;I(1,0)}}function yw(s,o,c,l,d,f,h,p,y,v){var b=w();try{Dp(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function mw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Sm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function vw(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{Im(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function bw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{km(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function gw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Cm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function ww(s,o,c,l,d,f,h,p){var y=w();try{Fm(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function jw(s,o,c,l,d,f,h,p,y,v,b,C){var T=w();try{Am(s,o,c,l,d,f,h,p,y,v,b,C)}catch(x){if(j(T),!(x instanceof S))throw x;I(1,0)}}function Sw(s,o,c,l,d,f){var h=w();try{return Zp(s,o,c,l,d,f)}catch(p){if(j(h),!(p instanceof S))throw p;I(1,0)}}function Iw(s,o,c,l,d,f,h,p,y,v){var b=w();try{Em(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function kw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Dm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Cw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Tm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Fw(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{xm(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function Aw(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{Bm(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function Tw(s,o,c,l,d,f,h,p,y,v){var b=w();try{return Rm(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Ew(s,o,c,l,d,f,h,p,y,v,b,C,T){var x=w();try{Om(s,o,c,l,d,f,h,p,y,v,b,C,T)}catch(O){if(j(x),!(O instanceof S))throw O;I(1,0)}}function xw(s,o,c,l,d,f,h,p,y){var v=w();try{zm(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Dw(s,o,c,l,d,f,h,p,y,v,b,C,T,x){var O=w();try{Lm(s,o,c,l,d,f,h,p,y,v,b,C,T,x)}catch(W){if(j(O),!(W instanceof S))throw W;I(1,0)}}function Bw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{Um(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Rw(s,o,c,l,d,f,h,p,y){var v=w();try{Mm(s,o,c,l,d,f,h,p,y)}catch(b){if(j(v),!(b instanceof S))throw b;I(1,0)}}function Ow(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Nm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Mw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Wm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}function Lw(s,o,c,l,d,f,h,p,y,v){var b=w();try{Pm(s,o,c,l,d,f,h,p,y,v)}catch(C){if(j(b),!(C instanceof S))throw C;I(1,0)}}function Uw(s,o,c,l,d,f,h,p){var y=w();try{return Hm(s,o,c,l,d,f,h,p)}catch(v){if(j(y),!(v instanceof S))throw v;I(1,0)}}function Nw(s,o,c,l,d,f,h,p,y,v,b){var C=w();try{return Vm(s,o,c,l,d,f,h,p,y,v,b)}catch(T){if(j(C),!(T instanceof S))throw T;I(1,0)}}e.stackAlloc=Er,e.stackSave=w,e.stackRestore=j,e.ccall=zh;var Pw=["stringToNewUTF8","getHostByName","traverseStack","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromI64","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","stringToAscii","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","allocateUTF8","allocateUTF8OnStack","writeStringToMemory","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","emscriptenWebGLGet","computeUnpackAlignedImageSize","emscriptenWebGLGetTexPixelData","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","writeGLArray","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","runAndAbortIfError","ALLOC_NORMAL","ALLOC_STACK","allocate"];Pw.forEach(nf);var Vw=["run","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createPreloadedFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","getRandomDevice","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","intArrayFromString","UTF16Decoder","writeArrayToMemory","writeAsciiToMemory","SYSCALLS","getSocketFromFD","getSocketAddress","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","ExceptionInfo","exception_addRef","exception_decRef","getExceptionMessageCommon","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","tempFixedLengthArray","miniTempWebGLFloatBuffers","GL","AL","SDL","SDL_gfx","GLUT","EGL","GLFW","GLEW","IDBStore","SOCKFS","FS"];Vw.forEach(Qc);var xs;Ir=function s(){xs||vl(),xs||(Ir=s)};function Hw(){z(nn==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),z(ga.length==0,"cannot call main when preRun functions remain to be called");var s=Yh,o=0,c=0;try{var l=s(o,c);return Ph(l,!0),l}catch(d){return Vh(d)}}function zw(){yl(),Pd()}function vl(){if(nn>0||(zw(),Vd(),nn>0))return;function s(){xs||(xs=!0,e.calledRun=!0,!_i&&(Hd(),zd(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),bl&&Hw(),Wd()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),s()},1)):s(),Sr()}function Ww(){var s=tn,o=P,c=!1;tn=P=l=>{c=!0};try{Ah()}catch(l){}tn=s,P=o,c&&(pi("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),pi("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var bl=!0;return e.noInitialRun&&(bl=!1),vl(),t.ready}})(),Ed=LI;var ua=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Ht.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Ut(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((a,u)=>{try{a(this._bindings.pollPendingQuery(this._conn))}catch(_){u(_)}});let n=new da(this._bindings,this._conn,e),r=Ht.from(n);return console.assert(r.isSync()),console.assert(r.isStream()),r}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new Oc(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=oa(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},da=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},Oc=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Ht.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Ut(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new da(this.bindings,this.connectionId,e),r=Ht.from(n);return console.assert(r.isSync()),console.assert(r.isStream()),r}};var Bd=new TextEncoder,xd=new TextDecoder("utf-8");function Mc(i,t,e){let n=Bd.encode(e),r=i._malloc(n.byteLength),a=i.HEAPU8.subarray(r,r+n.byteLength);a.set(n),i.HEAPF64[(t>>3)+0]=1,i.HEAPF64[(t>>3)+1]=r,i.HEAPF64[(t>>3)+2]=a.byteLength}function Uc(i){switch(i){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Lc(i,t,e,n){let r=i.HEAPU8.subarray(t,t+n*Uc(e));switch(e){case"UINT8":return new Uint8Array(r.buffer,r.byteOffset,n);case"INT8":return new Int8Array(r.buffer,r.byteOffset,n);case"INT32":return new Int32Array(r.buffer,r.byteOffset,n);case"FLOAT":return new Float32Array(r.buffer,r.byteOffset,n);case"DOUBLE":return new Float64Array(r.buffer,r.byteOffset,n);case"VARCHAR":return new Float64Array(r.buffer,r.byteOffset,n);default:return new Array(0)}}function Dd(i,t,e){let n=i.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function fa(i,t,e){let n=i.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Rd(i,t,e,n,r,a,u,_){try{let m=i._udfFunctions.get(n);if(!m){Mc(t,e,"Unknown UDF with id: "+n);return}let k=xd.decode(t.HEAPU8.subarray(r,r+a)),A=JSON.parse(k),D=fa(t,u,_/8),B=P=>{var Pe;let ve=null;switch(P.validityBuffer!==void 0&&(ve=Dd(t,D[P.validityBuffer],A.rows)),P.physicalType){case"VARCHAR":{if(P.dataBuffer===null||P.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(P.lengthBuffer===null||P.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Re=Lc(t,D[P.dataBuffer],P.physicalType,A.rows),he=[],Nt=fa(t,D[P.lengthBuffer],A.rows);for(let kt=0;kt<A.rows;++kt){if(ve!=null&&!ve[kt]){he.push(null);continue}let ie=t.HEAPU8.subarray(Re[kt],Re[kt]+Nt[kt]),_i=xd.decode(ie);he.push(_i)}return kt=>he[kt]}case"STRUCT":{let Re={},he=[];for(let Nt=0;Nt<(((Pe=P.children)==null?void 0:Pe.length)||0);++Nt){let kt=P.children[Nt],ie=B(kt);he.push(_i=>{Re[kt.name]=ie(_i)})}return ve!=null?Nt=>{if(!ve[Nt])return null;for(let kt of he)kt(Nt);return Re}:Nt=>{for(let kt of he)kt(Nt);return Re}}default:{if(P.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+P.physicalType);let Re=Lc(t,D[P.dataBuffer],P.physicalType,A.rows);return ve!=null?he=>ve[he]?Re[he]:null:he=>Re[he]}}},R=[];for(let P=0;P<A.args.length;++P)R.push(B(A.args[P]));let _t=A.rows*Uc(A.ret.physicalType),dt=t._malloc(_t),Ft=Lc(t,dt,A.ret.physicalType,A.rows),It=t._malloc(A.rows),fe=Dd(t,It,A.rows);if(Ft.length==0||fe.length==0){Mc(t,e,"Can't create physical arrays for result");return}let Be=Ft;A.ret.physicalType=="VARCHAR"&&(Be=new Array(A.rows));let Bi=[];for(let P=0;P<A.args.length;++P)Bi.push(null);for(let P=0;P<A.rows;++P){for(let Pe=0;Pe<A.args.length;++Pe)Bi[Pe]=R[Pe](P);let ve=m.func(...Bi);Be[P]=ve,fe[P]=ve==null?0:1}let zn=0;switch(A.ret.physicalType){case"VARCHAR":{let P=new Array(0);zn=t._malloc(A.rows*Uc("DOUBLE"));let ve=fa(t,zn,A.rows),Pe=0;for(let kt=0;kt<A.rows;++kt){let ie=Bd.encode(Be[kt]||"");P.push(ie),ve[kt]=ie.length,Pe+=ie.length}let Re=t._malloc(Pe),he=t.HEAPU8.subarray(Re,Re+Pe),Nt=0;for(let kt=0;kt<A.rows;++kt){Ft[kt]=Nt;let ie=P[kt];he.subarray(Nt,Nt+ie.length).set(ie),Nt+=ie.length}}}let jr=3*8,bs=t._malloc(jr),tn=fa(t,bs,3);tn[0]=dt,tn[1]=It,tn[2]=zn,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=bs,t.HEAPF64[(e>>3)+2]=0}catch(m){Mc(t,e,m.toString())}}function NI(){let i=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),i.decode(t))}var PI=NI();function Di(i,t){console.error(`FAIL WITH: ${t}`),i.ccall("duckdb_web_fail_with",null,["string"],[t])}function Hn(i,t,e){let n=i.HEAPU8.subarray(t,t+e),r=new Uint8Array(new ArrayBuffer(n.byteLength));return r.set(n),r}function rt(i,t,e){return PI(i.HEAPU8.subarray(t,t+e))}function bt(i,t,e,n){let r=i.stackSave(),a=i.stackAlloc(3*8);e.unshift("number"),n.unshift(a),i.ccall(t,null,e,n);let u=i.HEAPF64[(a>>3)+0],_=i.HEAPF64[(a>>3)+1],m=i.HEAPF64[(a>>3)+2];return i.stackRestore(r),[u,_,m]}function xt(i){i.ccall("duckdb_web_clear_response",null,[],[])}var ha=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var VI=new TextEncoder;var _a=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,r]=bt(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(rt(this.mod,n,r));xt(this.mod)}reset(){let[t,e,n]=bt(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(rt(this.mod,e,n));xt(this.mod)}getVersion(){let[t,e,n]=bt(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(rt(this.mod,e,n));let r=rt(this.mod,e,n);return xt(this.mod),r}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,r]=bt(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));let a=rt(this.mod,n,r);return xt(this.mod),JSON.parse(a)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new ua(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a));let u=Hn(this.mod,r,a);return xt(this.mod),u}startPendingQuery(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a));if(r==0)return null;let u=Hn(this.mod,r,a);return xt(this.mod),u}pollPendingQuery(t){let[e,n,r]=bt(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));if(n==0)return null;let a=Hn(this.mod,n,r);return xt(this.mod),a}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,r]=bt(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));let a=Hn(this.mod,n,r);return xt(this.mod),a}getTableNames(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a));let u=rt(this.mod,r,a);return xt(this.mod),JSON.parse(u)}createScalarFunction(t,e,n,r){let a={functionId:this._nextUDFId,name:e,returnType:wr(n)},u={functionId:a.functionId,connectionId:t,name:e,returnType:n,func:r};this._nextUDFId+=1;let[_,m,k]=bt(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(a)]);if(_!==0)throw new Error(rt(this.mod,m,k));if(xt(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(u.functionId,u),this.pthread)for(let A of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])A.postMessage({cmd:"registerUDFFunction",udf:u})}createPrepared(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a));return xt(this.mod),r}closePrepared(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a));xt(this.mod)}runPrepared(t,e,n){let[r,a,u]=bt(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(r!==0)throw new Error(rt(this.mod,a,u));let _=Hn(this.mod,a,u);return xt(this.mod),_}sendPrepared(t,e,n){let[r,a,u]=bt(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(r!==0)throw new Error(rt(this.mod,a,u));let _=Hn(this.mod,a,u);return xt(this.mod),_}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let r=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(r,r+e.length).set(e);let u=n?JSON.stringify(n):"",[_,m,k]=bt(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,r,e.length,u]);if(_!==0)throw new Error(rt(this.mod,m,k))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let k in n.columns)n.columnsFlat.push(aa(k,n.columns[k]))}let r={...n};r.columns=r.columnsFlat,delete r.columnsFlat;let a=JSON.stringify(r),[u,_,m]=bt(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,a]);if(u!==0)throw new Error(rt(this.mod,_,m))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let k in n.columns)n.columnsFlat.push(aa(k,n.columns[k]))}let r={...n};r.columns=r.columnsFlat,delete r.columnsFlat;let a=JSON.stringify(r),[u,_,m]=bt(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,a]);if(u!==0)throw new Error(rt(this.mod,_,m))}globFiles(t){let[e,n,r]=bt(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));let a=rt(this.mod,n,r);xt(this.mod);let u=JSON.parse(a);return u==null?[]:u}registerFileURL(t,e,n,r=!1){e===void 0&&(e=t);let[a,u,_]=bt(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,r]);if(a!==0)throw new Error(rt(this.mod,u,_));xt(this.mod)}registerFileText(t,e){let n=VI.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[a,u,_]=bt(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(a!==0)throw new Error(rt(this.mod,u,_));xt(this.mod)}registerFileHandle(t,e,n,r){let[a,u,_]=bt(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,r]);if(a!==0)throw new Error(rt(this.mod,u,_));if(xt(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let m of this.pthread.runningWorkers)m.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let m of this.pthread.unusedWorkers)m.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,r]=bt(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));xt(this.mod)}dropFiles(){let[t,e,n]=bt(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(rt(this.mod,e,n));xt(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a));xt(this.mod)}copyFileToBuffer(t){let[e,n,r]=bt(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));let a=this.mod.HEAPU8.subarray(n,n+r),u=new Uint8Array(a.length);return u.set(a),xt(this.mod),u}collectFileStatistics(t,e){let[n,r,a]=bt(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(rt(this.mod,r,a))}exportFileStatistics(t){let[e,n,r]=bt(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(rt(this.mod,n,r));return new ha(this.mod.HEAPU8.subarray(n,n+r))}};var pa=class extends _a{constructor(e,n,r,a){super(e,n);this.mainModuleURL=r,this.pthreadWorkerURL=a}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let r=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let u=(async()=>{var dt;let _=new Request(this.mainModuleURL),m=await fetch(_),k=m.headers.get("content-length"),A=k&&parseInt(k,10)||0,D=new Date,B={startedAt:D,updatedAt:D,bytesTotal:A||0,bytesLoaded:0},R={transform(Ft,It){B.bytesLoaded+=Ft.byteLength;let fe=new Date;if(fe.getTime()-B.updatedAt.getTime()<20){B.updatedAt=fe,It.enqueue(Ft);return}for(let Be of r)Be(B);It.enqueue(Ft)}},_t=new TransformStream(R);return new Response((dt=m.body)==null?void 0:dt.pipeThrough(_t),m)})();WebAssembly.instantiateStreaming(u,e).then(_=>{n(_.instance,_.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let a=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(a),e).then(u=>{n(u.instance,u.module)})}else if(typeof XMLHttpRequest=="function"){let a=new XMLHttpRequest,u=this.mainModuleURL,_=new Date,m={startedAt:_,updatedAt:_,bytesTotal:0,bytesLoaded:0};a.open("GET",u),a.responseType="arraybuffer",a.onerror=k=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+k}),new Error(k.toString())},a.onprogress=k=>{m.bytesTotal=k.total,m.bytesLoaded=k.loaded;let A=new Date;if(A.getTime()-m.updatedAt.getTime()<20){m.updatedAt=A;return}for(let D of r)D(m)},a.onload=()=>{WebAssembly.instantiate(a.response,e).then(k=>{n(k.instance,k.module)}).catch(k=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+k}),new Error(k)})},a.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let u=new Request(this.mainModuleURL),m=await(await fetch(u)).arrayBuffer();WebAssembly.instantiate(m,e).then(k=>{n(k.instance,k.module)})})();return[]}};var ya=class extends pa{constructor(t,e,n,r=null){super(t,e,n,r)}instantiateImpl(t){return Ed({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var bn=Ma(Od()),Md=function(i,t,e){var n;if((n=i==null?void 0:i.endpoint)!=null&&n.startsWith("http")){let r=`${i==null?void 0:i.endpoint}`,a=r.indexOf("://")+3;return r.substring(a)}else return i!=null&&i.endpoint?`${e}.${i==null?void 0:i.endpoint}`:`${e}.s3.amazonaws.com`};function HI(i,t,e){var r,a,u,_;let n=Ld(t);return{url:n.path,query:"",host:Md(i,t,n.bucket),region:(r=i==null?void 0:i.region)!=null?r:"",service:"s3",method:e,accessKeyId:(a=i==null?void 0:i.accessKeyId)!=null?a:"",secretAccessKey:(u=i==null?void 0:i.secretAccessKey)!=null?u:"",sessionToken:(_=i==null?void 0:i.sessionToken)!=null?_:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function zI(i,t=!1){let e="0123456789ABCDEF",n="";for(let r=0;r<i.length;r++){let a=i[r];a>="A"&&a<="Z"||a>="a"&&a<="z"||a>="0"&&a<="9"||a=="_"||a=="-"||a=="~"||a=="."?n+=a:a=="/"?t?n+="%2F":n+=a:(n+="%",n+=e[a.charCodeAt(0)>>4],n+=e[a.charCodeAt(0)&15])}return n}function WI(i,t=null){var _t;let e=(_t=t==null?void 0:t.contentHash)!=null?_t:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",i.datetimeNow),n.set("x-amz-content-sha256",e),i.sessionToken&&n.set("x-amz-security-token",i.sessionToken);let r="";t!=null&&t.contentType&&(r+="content-type;"),r+="host;x-amz-content-sha256;x-amz-date",i.sessionToken&&(r+=";x-amz-security-token");let a=i.method+`
`+zI(i.url)+`
`+i.query;t!=null&&t.contentType&&(a+=`
content-type:`+(t==null?void 0:t.contentType)),a+=`
host:`+i.host+`
x-amz-content-sha256:`+e+`
x-amz-date:`+i.datetimeNow,i.sessionToken&&i.sessionToken.length>0&&(a+=`
x-amz-security-token:`+i.sessionToken),a+=`

`+r+`
`+e;let u=(0,bn.sha256)(a),_=`AWS4-HMAC-SHA256
`+i.datetimeNow+`
`+i.dateNow+"/"+i.region+"/"+i.service+`/aws4_request
`+u,m="AWS4"+i.secretAccessKey,k=bn.sha256.hmac.arrayBuffer(m,i.dateNow),A=bn.sha256.hmac.arrayBuffer(k,i.region),D=bn.sha256.hmac.arrayBuffer(A,i.service),B=bn.sha256.hmac.arrayBuffer(D,"aws4_request"),R=bn.sha256.hmac(B,_);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+i.accessKeyId+"/"+i.dateNow+"/"+i.region+"/"+i.service+"/aws4_request, SignedHeaders="+r+", Signature="+R),n}var YI=function(i,t,e,n=null,r=null){let a=HI(i,t,e),u={contentType:n,contentHash:r?bn.sha256.hex(r):null};return WI(a,u)};function gn(i,t,e,n,r=null,a=null){((t==null?void 0:t.accessKeyId)||(t==null?void 0:t.sessionToken))&&(YI(t,e,n,r,a).forEach((_,m)=>{i.setRequestHeader(m,_)}),r&&i.setRequestHeader("content-type",r))}function Ld(i){if(i.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=i.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=i.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=i.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function wn(i,t){var n;let e=Ld(t);return(n=i==null?void 0:i.endpoint)!=null&&n.startsWith("http")?`${i==null?void 0:i.endpoint}/${e.bucket}`+e.path:"https://"+Md(i,t,e.bucket)+e.path}var gt={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(i,t){try{let e=gt._fileInfoCache.get(t),[n,r,a]=bt(i,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(a===0)return e;let u=rt(i,r,a);xt(i);let _=JSON.parse(u);if(_==null)return null;let m={..._,blob:null};return gt._fileInfoCache.set(t,m),m}catch(e){return null}},getGlobalFileInfo(i){var t;try{let[e,n,r]=bt(i,"duckdb_web_get_global_file_info",["number"],[((t=gt._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(r===0)return gt._globalFileInfo;let a=rt(i,n,r);xt(i);let u=JSON.parse(a);return u==null?null:(gt._globalFileInfo={...u,blob:null},gt._globalFileInfo)}catch(e){return null}},testPlatformFeature:(i,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(i){return 2},openFile:(i,t,e)=>{var n;try{gt._fileInfoCache.delete(t);let r=gt.getFileInfo(i,t);switch(r==null?void 0:r.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error(`Opening file ${r.fileName} failed: cannot open file with both read and write flags set`);if(e&32)throw new Error(`Opening file ${r.fileName} failed: appending to HTTP/S3 files is not supported`);if(e&2){let u=new XMLHttpRequest;if(r.dataProtocol==5?(u.open("HEAD",wn(r.s3Config,r.dataUrl),!1),gn(u,r.s3Config,r.dataUrl,"HEAD")):u.open("HEAD",r.dataUrl,!1),u.send(null),u.status!=200&&u.status!=404)throw new Error(`Opening file ${r.fileName} failed: Unexpected return status from server (${u.status})`);if(u.status==404&&!(e&8||e&16))throw new Error(`Opening file ${r.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let _=i._malloc(1),m=new Uint8Array;i.HEAPU8.set(m,_);let k=i._malloc(2*8);return i.HEAPF64[(k>>3)+0]=1,i.HEAPF64[(k>>3)+1]=_,k}else if(e!=1)throw new Error(`Opening file ${r.fileName} failed: unsupported file flags: ${e}`);let a=null;try{let u=new XMLHttpRequest;r.dataProtocol==5?(u.open("HEAD",wn(r.s3Config,r.dataUrl),!1),gn(u,r.s3Config,r.dataUrl,"HEAD")):u.open("HEAD",r.dataUrl,!1),u.setRequestHeader("Range","bytes=0-"),u.send(null);let _=u.getResponseHeader("Content-Length");if(u.status==206&&_!==null){let m=i._malloc(16);return i.HEAPF64[(m>>3)+0]=+_,i.HEAPF64[(m>>3)+1]=0,m}}catch(u){a=u,console.warn(`HEAD request with range header failed: ${u}`)}if(r.allowFullHttpReads){console.warn(`falling back to full HTTP read for: ${r.dataUrl}`);let u=new XMLHttpRequest;if(r.dataProtocol==5?(u.open("GET",wn(r.s3Config,r.dataUrl),!1),gn(u,r.s3Config,r.dataUrl,"GET")):u.open("GET",r.dataUrl,!1),u.responseType="arraybuffer",u.send(null),u.status==200){let _=i._malloc(u.response.byteLength),m=new Uint8Array(u.response,0,u.response.byteLength);i.HEAPU8.set(m,_);let k=i._malloc(2*8);return i.HEAPF64[(k>>3)+0]=u.response.byteLength,i.HEAPF64[(k>>3)+1]=_,k}}if(a!=null)throw new Error(`Reading file ${r.fileName} failed with error: ${a}`);return 0}case 2:{let a=(n=gt._files)==null?void 0:n.get(r.fileName);if(a){let m=i._malloc(16);return i.HEAPF64[(m>>3)+0]=a.size,i.HEAPF64[(m>>3)+1]=0,m}console.warn(`Buffering missing file: ${r.fileName}`);let u=i._malloc(2*8),_=i._malloc(1);return i.HEAPF64[(u>>3)+0]=1,i.HEAPF64[(u>>3)+1]=_,u}}}catch(r){console.error(r.toString()),Di(i,r.toString())}return 0},glob:(i,t,e)=>{try{let n=rt(i,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let r=new XMLHttpRequest;if(n.startsWith("s3://")){let a=gt.getGlobalFileInfo(i);r.open("HEAD",wn(a==null?void 0:a.s3Config,n),!1),gn(r,a==null?void 0:a.s3Config,n,"HEAD")}else r.open("HEAD",n,!1);if(r.send(null),r.status!=200&&r.status!==206){Di(i,`HEAD request failed: ${n}`);return}i.ccall("duckdb_web_fs_glob_add_path",null,["string"],[n])}}catch(n){return Di(i,n.toString()),0}},checkFile:(i,t,e)=>{try{let n=rt(i,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let r=new XMLHttpRequest;if(n.startsWith("s3://")){let a=gt.getGlobalFileInfo(i);r.open("HEAD",wn(a==null?void 0:a.s3Config,n),!1),gn(r,a==null?void 0:a.s3Config,n,"HEAD")}else r.open("HEAD",n,!1);return r.send(null),r.status==206||r.status==200}}catch(n){return!1}return!1},syncFile:(i,t)=>{},closeFile:(i,t)=>{var n;let e=gt.getFileInfo(i,t);switch(gt._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let r=(n=gt._files)==null?void 0:n.get(e.fileName);if(!r)throw new Error(`No OPFS access handle registered with name: ${e.fileName}`);return r.flush()}}},truncateFile:(i,t,e)=>{var r;let n=gt.getFileInfo(i,t);switch(n==null?void 0:n.dataProtocol){case 4:Di(i,"Cannot truncate a http file");return;case 5:Di(i,"Cannot truncate an s3 file");return;case 0:case 1:case 2:Di(i,"truncateFile not implemented");return;case 3:{let a=(r=gt._files)==null?void 0:r.get(n.fileName);if(!a)throw new Error(`No OPFS access handle registered with name: ${n.fileName}`);return a.truncate(e)}}return 0},readFile(i,t,e,n,r){var a,u;try{let _=gt.getFileInfo(i,t);switch(_==null?void 0:_.dataProtocol){case 4:case 5:{if(!_.dataUrl)throw new Error(`Missing data URL for file ${t}`);try{let m=new XMLHttpRequest;if(_.dataProtocol==5?(m.open("GET",wn(_==null?void 0:_.s3Config,_.dataUrl),!1),gn(m,_==null?void 0:_.s3Config,_.dataUrl,"GET")):m.open("GET",_.dataUrl,!1),m.responseType="arraybuffer",m.setRequestHeader("Range",`bytes=${r}-${r+n-1}`),m.send(null),m.status==206||m.status==200&&n==m.response.byteLength&&r==0){let k=new Uint8Array(m.response,0,Math.min(m.response.byteLength,n));return i.HEAPU8.set(k,e),k.byteLength}else throw m.status==200?new Error(`Range request for ${_.dataUrl} did not return a partial response: ${m.status} "${m.statusText}"`):new Error(`Range request for ${_.dataUrl} did returned non-success status: ${m.status} "${m.statusText}"`)}catch(m){throw new Error(`Range request for ${_.dataUrl} failed with error: ${m}"`)}}case 2:{let m=(a=gt._files)==null?void 0:a.get(_.fileName);if(!m)throw new Error(`No HTML5 file registered with name: ${_.fileName}`);let k=m.slice(r,r+n),A=new Uint8Array(new FileReaderSync().readAsArrayBuffer(k));return i.HEAPU8.set(A,e),A.byteLength}case 3:{let m=(u=gt._files)==null?void 0:u.get(_.fileName);if(!m)throw new Error(`No OPFS access handle registered with name: ${_.fileName}`);let k=i.HEAPU8.subarray(e,e+n);return m.read(k,{at:r})}}return 0}catch(_){return Di(i,_.toString()),0}},writeFile:(i,t,e,n,r)=>{var u;let a=gt.getFileInfo(i,t);switch(a==null?void 0:a.dataProtocol){case 4:return Di(i,"Cannot write to HTTP file"),0;case 5:{let _=i.HEAPU8.subarray(e,e+n),m=new XMLHttpRequest;return m.open("PUT",wn(a==null?void 0:a.s3Config,a.dataUrl),!1),gn(m,a==null?void 0:a.s3Config,a.dataUrl,"PUT","",_),m.send(_),n}case 2:return Di(i,"cannot write using the html5 file reader api"),0;case 3:{let _=(u=gt._files)==null?void 0:u.get(a.fileName);if(!_)throw new Error(`No OPFS access handle registered with name: ${a.fileName}`);let m=i.HEAPU8.subarray(e,e+n);return _.write(m,{at:r})}}return 0},getLastFileModificationTime:(i,t)=>{var n;let e=gt.getFileInfo(i,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=gt._files)==null?void 0:n.get(e.fileName)))throw Error(`No handle available for file: ${e.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(i,t,e)=>{let n=rt(i,t,e);return console.log(`checkDirectory: ${n}`),!1},createDirectory:(i,t,e)=>{let n=rt(i,t,e);console.log(`createDirectory: ${n}`)},removeDirectory:(i,t,e)=>{let n=rt(i,t,e);console.log(`removeDirectory: ${n}`)},listDirectoryEntries:(i,t,e)=>{let n=rt(i,t,e);return console.log(`listDirectoryEntries: ${n}`),!1},moveFile:(i,t,e,n,r)=>{var m,k;let a=rt(i,t,e),u=rt(i,n,r),_=(m=gt._files)==null?void 0:m.get(a);_!==void 0&&(gt._files.delete(_),gt._files.set(u,_));for(let[A,D]of((k=gt._fileInfoCache)==null?void 0:k.entries())||[])if(D.dataUrl==a){gt._fileInfoCache.delete(A);break}return!0},removeFile:(i,t,e)=>{},callScalarUDF:(i,t,e,n,r,a,u)=>{Rd(gt,i,t,e,n,r,a,u)}};var Nc=class extends ca{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new ya(this,gt,t,e).instantiate(n)}};function Ud(){let i=new Nc;globalThis.onmessage=async t=>{await i.onMessage(t.data)}}Ud();return tj($I);})();
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
