"use strict";
addEventListener('message', (e) => (console.log("pthread.worker", e.data)));


(()=>{var Ta=Object.create;var Rt=Object.defineProperty;var Ca=Object.getOwnPropertyDescriptor;var xa=Object.getOwnPropertyNames;var Da=Object.getPrototypeOf,ja=Object.prototype.hasOwnProperty;var it=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(a,l)=>(typeof require<"u"?require:a)[l]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var Ma=(r,a)=>()=>(r&&(a=r(r=0)),a);var Tt=(r,a)=>()=>(a||r((a={exports:{}}).exports,a),a.exports),Ia=(r,a)=>{for(var l in a)Rt(r,l,{get:a[l],enumerable:!0})},Ha=(r,a,l,s)=>{if(a&&typeof a=="object"||typeof a=="function")for(let u of xa(a))!ja.call(r,u)&&u!==l&&Rt(r,u,{get:()=>a[u],enumerable:!(s=Ca(a,u))||s.enumerable});return r};var at=(r,a,l)=>(l=r!=null?Ta(Da(r)):{},Ha(a||!r||!r.__esModule?Rt(l,"default",{value:r,enumerable:!0}):l,r));var Fn=Tt(()=>{});var Rn=Tt(()=>{});var Tn={};Ia(Tn,{default:()=>Ct});var ze,Ua,Ct,xt=Ma(()=>{"use strict";ze={},Ua=(()=>{var r=ze.url;return async function(a={}){function l(){return G.buffer!=fe.buffer&&de(),fe}function s(){return G.buffer!=fe.buffer&&de(),qt}function u(){return G.buffer!=fe.buffer&&de(),Vt}function _(){return G.buffer!=fe.buffer&&de(),$t}function c(){return G.buffer!=fe.buffer&&de(),Jt}function f(){return G.buffer!=fe.buffer&&de(),Qt}function p(){return G.buffer!=fe.buffer&&de(),Zt}function k(){return G.buffer!=fe.buffer&&de(),er}var i=typeof a<"u"?a:{},P,z;i.ready=new Promise(function(e,t){P=e,z=t}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","__emscripten_thread_init","__emscripten_thread_exit","__emscripten_thread_crashed","__emscripten_tls_init","_pthread_self","executeNotifiedProxyingQueue","establishStackSpace","invokeEntryPoint","PThread","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","__emscripten_proxy_execute_task_queue","onRuntimeInitialized"].forEach(e=>{Object.getOwnPropertyDescriptor(i.ready,e)||Object.defineProperty(i.ready,e,{get:()=>R("You are getting "+e+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>R("You are setting "+e+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var T=Object.assign({},i),$=[],ee="./this.program",te=(e,t)=>{throw t},oe=typeof window=="object",Q=typeof importScripts=="function",L=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",Ce=!oe&&!L&&!Q;if(i.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var w=i.ENVIRONMENT_IS_PTHREAD||!1,re="";function Ie(e){return i.locateFile?i.locateFile(e,re):re+e}var ge,x,X,ie;function ne(e){if(e instanceof Ye)return;let t=e;e&&typeof e=="object"&&e.stack&&(t=[e,e.stack]),j("exiting due to exception: "+t)}if(L){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");let{createRequire:e}=await Promise.resolve().then(()=>at(it("module")));var N=e(ze.url),W=N("fs"),U=N("path");Q?re=U.dirname(re)+"/":re=N("url").fileURLToPath(new URL("./",ze.url)),ge=(n,o)=>(n=_t(n)?new URL(n):U.normalize(n),W.readFileSync(n,o?void 0:"utf8")),X=n=>{var o=ge(n,!0);return o.buffer||(o=new Uint8Array(o)),v(o.buffer),o},x=(n,o,h)=>{n=_t(n)?new URL(n):U.normalize(n),W.readFile(n,function(m,b){m?h(m):o(b.buffer)})},process.argv.length>1&&(ee=process.argv[1].replace(/\\/g,"/")),$=process.argv.slice(2),process.on("uncaughtException",function(n){if(!(n instanceof Ye))throw n});var ae=process.versions.node.split(".")[0];ae<15&&process.on("unhandledRejection",function(n){throw n}),te=(n,o)=>{if(Ne())throw process.exitCode=n,o;ne(o),process.exit(n)},i.inspect=function(){return"[Emscripten Module object]"};let t;try{t=N("worker_threads")}catch(n){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),n}global.Worker=t.Worker}else if(Ce){if(typeof process=="object"&&typeof N=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(ge=function(t){return read(t)}),X=function(t){let n;return typeof readbuffer=="function"?new Uint8Array(readbuffer(t)):(n=read(t,"binary"),v(typeof n=="object"),n)},x=function(t,n,o){setTimeout(()=>n(X(t)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=e=>{}),typeof scriptArgs<"u"?$=scriptArgs:typeof arguments<"u"&&($=arguments),typeof quit=="function"&&(te=(e,t)=>{ne(t),quit(e)}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(oe||Q){if(Q?re=self.location.href:typeof document<"u"&&document.currentScript&&(re=document.currentScript.src),r&&(re=r),re.indexOf("blob:")!==0?re=re.substr(0,re.replace(/[?#].*/,"").lastIndexOf("/")+1):re="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");L||(ge=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},Q&&(X=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),x=(e,t,n)=>{var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType="arraybuffer",o.onload=()=>{if(o.status==200||o.status==0&&o.response){t(o.response);return}n()},o.onerror=n,o.send(null)}),ie=e=>document.title=e}else throw new Error("environment detection error");L&&typeof performance>"u"&&(global.performance=N("perf_hooks").performance);var Ae=console.log.bind(console),Yt=console.warn.bind(console);L&&(Ae=e=>W.writeSync(1,e+`
`),Yt=e=>W.writeSync(2,e+`
`));var He=i.print||Ae,j=i.printErr||Yt;Object.assign(i,T),T=null,oa(),i.arguments&&($=i.arguments),he("arguments","arguments_"),i.thisProgram&&(ee=i.thisProgram),he("thisProgram","thisProgram"),i.quit&&(te=i.quit),he("quit","quit_"),v(typeof i.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),v(typeof i.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),v(typeof i.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),v(typeof i.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),v(typeof i.read>"u","Module.read option was removed (modify read_ in JS)"),v(typeof i.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),v(typeof i.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),v(typeof i.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),v(typeof i.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),he("read","read_"),he("readAsync","readAsync"),he("readBinary","readBinary"),he("setWindowTitle","setWindowTitle");var qa="IDBFS is no longer included by default; build with -lidbfs.js",Va="PROXYFS is no longer included by default; build with -lproxyfs.js",$a="WORKERFS is no longer included by default; build with -lworkerfs.js",Ja="NODEFS is no longer included by default; build with -lnodefs.js";v(oe||Q||L,"Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)"),v(!Ce,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var Ue;i.wasmBinary&&(Ue=i.wasmBinary),he("wasmBinary","wasmBinary");var Xt=i.noExitRuntime||!0;he("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&R("no native wasm support detected");var G,st,Le=!1,Oe;function v(e,t){e||R("Assertion failed"+(t?": "+t:""))}var Gt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Kt(e,t,n){t>>>=0;for(var o=t+n,h=t;e[h]&&!(h>=o);)++h;if(h-t>16&&e.buffer&&Gt)return Gt.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,h):e.subarray(t,h));for(var m="";t<h;){var b=e[t++];if(!(b&128)){m+=String.fromCharCode(b);continue}var g=e[t++]&63;if((b&224)==192){m+=String.fromCharCode((b&31)<<6|g);continue}var E=e[t++]&63;if((b&240)==224?b=(b&15)<<12|g<<6|E:((b&248)!=240&&ue("Invalid UTF-8 leading byte "+Re(b)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),b=(b&7)<<18|g<<12|E<<6|e[t++]&63),b<65536)m+=String.fromCharCode(b);else{var A=b-65536;m+=String.fromCharCode(55296|A>>10,56320|A&1023)}}return m}function se(e,t){return v(typeof e=="number"),e>>>=0,e?Kt(s(),e,t):""}function zt(e,t,n,o){if(n>>>=0,!(o>0))return 0;for(var h=n,m=n+o-1,b=0;b<e.length;++b){var g=e.charCodeAt(b);if(g>=55296&&g<=57343){var E=e.charCodeAt(++b);g=65536+((g&1023)<<10)|E&1023}if(g<=127){if(n>=m)break;t[n++>>>0]=g}else if(g<=2047){if(n+1>=m)break;t[n++>>>0]=192|g>>6,t[n++>>>0]=128|g&63}else if(g<=65535){if(n+2>=m)break;t[n++>>>0]=224|g>>12,t[n++>>>0]=128|g>>6&63,t[n++>>>0]=128|g&63}else{if(n+3>=m)break;g>1114111&&ue("Invalid Unicode code point "+Re(g)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),t[n++>>>0]=240|g>>18,t[n++>>>0]=128|g>>12&63,t[n++>>>0]=128|g>>6&63,t[n++>>>0]=128|g&63}}return t[n>>>0]=0,n-h}function lt(e,t,n){return v(typeof n=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),zt(e,s(),t,n)}function Pn(e){for(var t=0,n=0;n<e.length;++n){var o=e.charCodeAt(n);o<=127?t++:o<=2047?t+=2:o>=55296&&o<=57343?(t+=4,++n):t+=3}return t}var Qa,fe,qt,Vt,$t,Jt,Qt,Zt,er;function de(){var e=G.buffer;i.HEAP8=fe=new Int8Array(e),i.HEAP16=Vt=new Int16Array(e),i.HEAP32=Jt=new Int32Array(e),i.HEAPU8=qt=new Uint8Array(e),i.HEAPU16=$t=new Uint16Array(e),i.HEAPU32=Qt=new Uint32Array(e),i.HEAPF32=Zt=new Float32Array(e),i.HEAPF64=er=new Float64Array(e)}v(!i.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),v(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support");var Pe=i.INITIAL_MEMORY||16777216;if(he("INITIAL_MEMORY","INITIAL_MEMORY"),v(Pe>=65536,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+Pe+"! (STACK_SIZE="+65536+")"),w)G=i.wasmMemory;else if(i.wasmMemory)G=i.wasmMemory;else if(G=new WebAssembly.Memory({initial:Pe/65536,maximum:65536,shared:!0}),!(G.buffer instanceof SharedArrayBuffer))throw j("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),L&&j("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");de(),Pe=G.buffer.byteLength,v(Pe%65536===0);var Ve;function tr(){var e=At();v((e&3)==0),e==0&&(e+=4),f()[e>>>2]=34821223,f()[e+4>>>2]=2310721022,f()[0]=1668509029}function xe(){if(!Le){var e=At();e==0&&(e+=4);var t=f()[e>>>2],n=f()[e+4>>>2];(t!=34821223||n!=2310721022)&&R("Stack overflow! Stack cookie has been overwritten at "+Re(e)+", expected hex dwords 0x89BACDFE and 0x2135467, but received "+Re(n)+" "+Re(t)),f()[0]!==1668509029&&R("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var e=new Int16Array(1),t=new Int8Array(e.buffer);if(e[0]=25459,t[0]!==115||t[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var ut=[],rr=[],nr=[],Za=[],ir=[],Be=!1;function Ne(){return Xt}function Bn(){if(v(!w),i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)Yn(i.preRun.shift());$e(ut)}function ar(){v(!Be),Be=!0,!w&&(xe(),$e(rr))}function Nn(){xe(),!w&&$e(nr)}function Wn(){if(xe(),!w){if(i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;)Gn(i.postRun.shift());$e(ir)}}function Yn(e){ut.unshift(e)}function Xn(e){rr.unshift(e)}function eo(e){nr.unshift(e)}function to(e){}function Gn(e){ir.unshift(e)}v(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),v(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),v(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),v(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var ve=0,Fe=null,We=null,De={};function ro(e){for(var t=e;;){if(!De[e])return e;e=t+Math.random()}}function Kn(e){ve++,i.monitorRunDependencies&&i.monitorRunDependencies(ve),e?(v(!De[e]),De[e]=1,Fe===null&&typeof setInterval<"u"&&(Fe=setInterval(function(){if(Le){clearInterval(Fe),Fe=null;return}var t=!1;for(var n in De)t||(t=!0,j("still waiting on run dependencies:")),j("dependency: "+n);t&&j("(end of list)")},1e4))):j("warning: run dependency added without ID")}function zn(e){if(ve--,i.monitorRunDependencies&&i.monitorRunDependencies(ve),e?(v(De[e]),delete De[e]):j("warning: run dependency removed without ID"),ve==0&&(Fe!==null&&(clearInterval(Fe),Fe=null),We)){var t=We;We=null,t()}}function R(e){console.trace(e);i.onAbort&&i.onAbort(e),e="Aborted("+e+")",j(e),Le=!0,Oe=1,Be&&gn();var t=new WebAssembly.RuntimeError(e);throw z(t),t}var qn="data:application/octet-stream;base64,";function or(e){return e.startsWith(qn)}function _t(e){return e.startsWith("file://")}function d(e,t){return function(){var n=e,o=t;return t||(o=i.asm),v(Be,"native function `"+n+"` called before runtime initialization"),o[e]||v(o[e],"exported native function `"+n+"` not found"),o[e].apply(null,arguments)}}var pe;i.locateFile?(pe="./duckdb-coi.wasm",or(pe)||(pe=Ie(pe))):pe="./duckdb-coi.wasm";function sr(e){try{if(e==pe&&Ue)return new Uint8Array(Ue);if(X)return X(e);throw"both async and sync fetching of the wasm failed"}catch(t){R(t)}}function Vn(e){return!Ue&&(oe||Q)&&typeof fetch=="function"?fetch(e,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()}).catch(function(){return sr(e)}):Promise.resolve().then(function(){return sr(e)})}function lr(e,t,n){return Vn(e).then(function(o){return WebAssembly.instantiate(o,t)}).then(function(o){return o}).then(n,function(o){j("failed to asynchronously prepare wasm: "+o),_t(pe)&&j("warning: Loading from a file URI ("+pe+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),R(o)})}function $n(e,t,n,o){return!e&&typeof WebAssembly.instantiateStreaming=="function"&&!or(t)&&!L&&typeof fetch=="function"?fetch(t,{credentials:"same-origin"}).then(function(h){var m=WebAssembly.instantiateStreaming(h,n);return m.then(o,function(b){return j("wasm streaming compile failed: "+b),j("falling back to ArrayBuffer instantiation"),lr(t,n,o)})}):lr(t,n,o)}function Jn(){var e={env:hn,wasi_snapshot_preview1:hn};function t(h,m){var b=h.exports;return i.asm=b,si(i.asm._emscripten_tls_init),Ve=i.asm.__indirect_function_table,v(Ve,"table not found in wasm exports"),Xn(i.asm.__wasm_call_ctors),st=m,F.loadWasmModuleToAllWorkers(()=>zn("wasm-instantiate")),b}Kn("wasm-instantiate");var n=i;function o(h){v(i===n,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),n=null,t(h.instance,h.module)}if(i.instantiateWasm)try{return i.instantiateWasm(e,t)}catch(h){j("Module.instantiateWasm callback failed with error: "+h),z(h)}return $n(Ue,pe,e,o).catch(z),{}}var je,ct;function he(e,t){Object.getOwnPropertyDescriptor(i,e)||Object.defineProperty(i,e,{configurable:!0,get:function(){R("Module."+e+" has been replaced with plain "+t+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Qn(e){Object.getOwnPropertyDescriptor(i,e)&&R("`Module."+e+"` was supplied but `"+e+"` not included in INCOMING_MODULE_JS_API")}function ur(e){return e==="FS_createPath"||e==="FS_createDataFile"||e==="FS_createPreloadedFile"||e==="FS_unlink"||e==="addRunDependency"||e==="FS_createLazyFile"||e==="FS_createDevice"||e==="removeRunDependency"}function Zn(e,t){typeof globalThis<"u"&&Object.defineProperty(globalThis,e,{configurable:!0,get:function(){ue("`"+e+"` is not longer defined by emscripten. "+t)}})}Zn("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function ei(e){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,e)&&Object.defineProperty(globalThis,e,{configurable:!0,get:function(){var t="`"+e+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",n=e;n.startsWith("_")||(n="$"+e),t+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+n+")",ur(e)&&(t+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),ue(t)}}),_r(e)}function _r(e){Object.getOwnPropertyDescriptor(i,e)||Object.defineProperty(i,e,{configurable:!0,get:function(){var t="'"+e+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";ur(e)&&(t+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),R(t)}})}function cr(e){L?W.writeSync(2,e+`
`):console.error(e)}function Ye(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function ft(e){e.terminate(),e.onmessage=t=>{var n=t.data.cmd;j('received "'+n+'" command from terminated worker: '+e.workerID)}}function ti(e){v(!w,"Internal Error! killThread() can only ever be called from main application thread!"),v(e,"Internal Error! Null pthread_ptr in killThread!");var t=F.pthreads[e];delete F.pthreads[e],ft(t),pn(e),F.runningWorkers.splice(F.runningWorkers.indexOf(t),1),t.pthread_ptr=0}function ri(e){v(!w,"Internal Error! cancelThread() can only ever be called from main application thread!"),v(e,"Internal Error! Null pthread_ptr in cancelThread!");var t=F.pthreads[e];t.postMessage({cmd:"cancel"})}function fr(e){v(!w,"Internal Error! cleanupThread() can only ever be called from main application thread!"),v(e,"Internal Error! Null pthread_ptr in cleanupThread!");var t=F.pthreads[e];v(t),F.returnWorkerToPool(t)}function dr(e,t){return s().fill(0,e,e+t),e}function hr(e){v(!w,"Internal Error! spawnThread() can only ever be called from main application thread!"),v(e.pthread_ptr,"Internal error, no pthread ptr!");var t=F.getNewWorker();if(!t)return 6;v(!t.pthread_ptr,"Internal error!"),F.runningWorkers.push(t),F.pthreads[e.pthread_ptr]=t,t.pthread_ptr=e.pthread_ptr;var n={cmd:"run",start_routine:e.startRoutine,arg:e.arg,pthread_ptr:e.pthread_ptr};return L&&t.ref(),t.postMessage(n,e.transferList),0}var we={varargs:void 0,get:function(){v(we.varargs!=null),we.varargs+=4;var e=c()[we.varargs-4>>>2];return e},getStr:function(e){var t=se(e);return t}};function br(e){if(w)return D(1,1,e);Oe=e,Ne()||(F.terminateAllThreads(),i.onExit&&i.onExit(e),Le=!0),te(e,new Ye(e))}function pr(e,t){if(Oe=e,ka(),w)throw v(!t),vr(e),"unwind";if(Ne()&&!t){var n="program exited (with status: "+e+"), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";z(n),j(n)}br(e)}var mr=pr;function Re(e){return v(typeof e=="number"),"0x"+e.toString(16).padStart(8,"0")}function yr(e){if(e instanceof Ye||e=="unwind")return Oe;xe(),e instanceof WebAssembly.RuntimeError&&En()<=0&&j("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to "+65536+")"),te(1,e)}var F={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},nextWorkerID:1,debugInit:function(){function e(){var n=0;return Be&&typeof Ke<"u"&&(n=Ke()),"w:"+(i.workerID||0)+",t:"+Re(n)+": "}var t=cr;cr=n=>t(e()+n)},init:function(){F.debugInit(),w?F.initWorker():F.initMainThread()},initMainThread:function(){for(var e=4;e--;)F.allocateUnusedWorker()},initWorker:function(){Xt=!1},setExitStatus:function(e){Oe=e},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:function(){v(!w,"Internal Error! terminateAllThreads() can only ever be called from main application thread!");for(var e of F.runningWorkers)ft(e);for(var e of F.unusedWorkers)ft(e);F.unusedWorkers=[],F.runningWorkers=[],F.pthreads=[]},returnWorkerToPool:function(e){var t=e.pthread_ptr;delete F.pthreads[t],F.unusedWorkers.push(e),F.runningWorkers.splice(F.runningWorkers.indexOf(e),1),e.pthread_ptr=0,L&&e.unref(),pn(t)},receiveObjectTransfer:function(e){},threadInitTLS:function(){F.tlsInitFunctions.forEach(e=>e())},loadWasmModuleToWorker:e=>new Promise(t=>{e.onmessage=m=>{var b=m.data,g=b.cmd;if(e.pthread_ptr&&(F.currentProxiedOperationCallerThread=e.pthread_ptr),b.targetThread&&b.targetThread!=Ke()){var E=F.pthreads[b.targetThread];E?E.postMessage(b,b.transferList):j('Internal error! Worker sent a message "'+g+'" to target pthread '+b.targetThread+", but that thread no longer exists!"),F.currentProxiedOperationCallerThread=void 0;return}g==="processProxyingQueue"?mt(b.queue):g==="spawnThread"?hr(b):g==="cleanupThread"?fr(b.thread):g==="killThread"?ti(b.thread):g==="cancelThread"?ri(b.thread):g==="loaded"?(e.loaded=!0,L&&!e.pthread_ptr&&e.unref(),t(e)):g==="print"?He("Thread "+b.threadId+": "+b.text):g==="printErr"?j("Thread "+b.threadId+": "+b.text):g==="alert"?alert("Thread "+b.threadId+": "+b.text):b.target==="setimmediate"?e.postMessage(b):g==="callHandler"?i[b.handler](...b.args):g&&j("worker sent an unknown command "+g),F.currentProxiedOperationCallerThread=void 0},e.onerror=m=>{var b="worker sent an error!";throw e.pthread_ptr&&(b="Pthread "+Re(e.pthread_ptr)+" sent an error!"),j(b+" "+m.filename+":"+m.lineno+": "+m.message),m},L&&(e.on("message",function(m){e.onmessage({data:m})}),e.on("error",function(m){e.onerror(m)}),e.on("detachedExit",function(){})),v(G instanceof WebAssembly.Memory,"WebAssembly memory should have been loaded by now!"),v(st instanceof WebAssembly.Module,"WebAssembly Module should have been loaded by now!");var n=[],o=["onExit","onAbort","print","printErr"];for(var h of o)i.hasOwnProperty(h)&&n.push(h);e.workerID=F.nextWorkerID++,e.postMessage({cmd:"load",handlers:n,urlOrBlob:i.mainScriptUrlOrBlob,wasmMemory:G,wasmModule:st,workerID:e.workerID})}),loadWasmModuleToAllWorkers:function(e){if(w)return e();Promise.all(F.unusedWorkers.map(F.loadWasmModuleToWorker)).then(e)},allocateUnusedWorker:function(){var e;if(!i.locateFile)e=new Worker(new URL("duckdb_wasm.worker.js",ze.url));else{var t=Ie("duckdb_wasm.worker.js");e=new Worker(t)}F.unusedWorkers.push(e)},getNewWorker:function(){return F.unusedWorkers.length==0&&(L||j("Tried to spawn a new thread, but the thread pool is exhausted.\nThis might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\nIf you want to increase the pool size, use setting `-sPTHREAD_POOL_SIZE=...`.\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-sPTHREAD_POOL_SIZE_STRICT=2`."),F.allocateUnusedWorker(),F.loadWasmModuleToWorker(F.unusedWorkers[0])),F.unusedWorkers.pop()}};i.PThread=F;function $e(e){for(;e.length>0;)e.shift()(i)}function gr(){return i.asm.__cpp_exception}function dt(e){var t=e.getArg(gr(),0);return ya(t)}function no(e){var t=dt(e);pa(t)}function ni(){var e=Ke(),t=c()[e+52>>>2],n=c()[e+56>>>2],o=t-n;v(t!=0),v(o!=0),v(t>o,"stackTop must be higher then stackMax"),wn(t,o),rt(t),tr()}i.establishStackSpace=ni;function vr(e){if(w)return D(2,0,e);try{mr(e)}catch(t){yr(t)}}function wr(e){var t=Ft(),n=e();return rt(t),n}function ii(e){return wr(function(){var t=Me(4),n=Me(4);ga(e,t,n);var o=f()[t>>>2],h=f()[n>>>2],m=se(o);yn(o);var b;return h&&(b=se(h),yn(h)),[m,b]})}function Er(e){var t=dt(e);return ii(t)}i.getExceptionMessage=Er;function io(e,t="i8"){switch(t.endsWith("*")&&(t="*"),t){case"i1":return l()[e>>>0];case"i8":return l()[e>>>0];case"i16":return u()[e>>>1];case"i32":return c()[e>>>2];case"i64":return c()[e>>>2];case"float":return p()[e>>>2];case"double":return k()[e>>>3];case"*":return f()[e>>>2];default:R("invalid type for getValue: "+t)}}function ao(e){var t=dt(e);ma(t)}var Je=[];function ai(e){var t=Je[e];return t||(e>=Je.length&&(Je.length=e+1),Je[e]=t=Ve.get(e)),v(Ve.get(e)==t,"JavaScript-side Wasm function table mirror is out of date!"),t}function oi(e,t){var n=ai(e)(t);xe(),Ne()?F.setExitStatus(n):da(n)}i.invokeEntryPoint=oi;function si(e){F.tlsInitFunctions.push(e)}function oo(e,t,n="i8"){switch(n.endsWith("*")&&(n="*"),n){case"i1":l()[e>>>0]=t;break;case"i8":l()[e>>>0]=t;break;case"i16":u()[e>>>1]=t;break;case"i32":c()[e>>>2]=t;break;case"i64":ct=[t>>>0,(je=t,+Math.abs(je)>=1?je>0?(Math.min(+Math.floor(je/4294967296),4294967295)|0)>>>0:~~+Math.ceil((je-+(~~je>>>0))/4294967296)>>>0:0)],c()[e>>>2]=ct[0],c()[e+4>>>2]=ct[1];break;case"float":p()[e>>>2]=t;break;case"double":k()[e>>>3]=t;break;case"*":f()[e>>>2]=t;break;default:R("invalid type for setValue: "+n)}}function ue(e){ue.shown||(ue.shown={}),ue.shown[e]||(ue.shown[e]=1,L&&(e="warning: "+e),j(e))}function li(e,t,n,o){R("Assertion failed: "+se(e)+", at: "+[t?se(t):"unknown filename",n,o?se(o):"unknown function"])}var Sr="To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";function ui(e,t){R(Sr)}function _i(e){ua(e,!Q,1,!oe),F.threadInitTLS()}function ci(e){w?postMessage({cmd:"cleanupThread",thread:e}):fr(e)}function kr(e,t,n,o){return w?D(3,1,e,t,n,o):Ar(e,t,n,o)}function Ar(e,t,n,o){if(typeof SharedArrayBuffer>"u")return j("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var h=[],m=0;if(w&&(h.length===0||m))return kr(e,t,n,o);if(m)return m;var b={startRoutine:n,pthread_ptr:e,arg:o,transferList:h};return w?(b.cmd="spawnThread",postMessage(b,h),0):hr(b)}function Fr(e,t,n,o,h){if(w)return D(4,1,e,t,n,o,h);v(e<=64,"nfds must be less than or equal to 64"),v(!o,"exceptfds not supported");for(var m=0,b=t?c()[t>>>2]:0,g=t?c()[t+4>>>2]:0,E=n?c()[n>>>2]:0,A=n?c()[n+4>>>2]:0,C=o?c()[o>>>2]:0,Y=o?c()[o+4>>>2]:0,I=0,me=0,B=0,q=0,_e=0,ye=0,y=(t?c()[t>>>2]:0)|(n?c()[n>>>2]:0)|(o?c()[o>>>2]:0),S=(t?c()[t+4>>>2]:0)|(n?c()[n+4>>>2]:0)|(o?c()[o+4>>>2]:0),V=function(Aa,Fa,Ra,An){return Aa<32?Fa&An:Ra&An},H=0;H<e;H++){var J=1<<H%32;if(!!V(H,y,S,J)){var Z=we.getStreamFromFD(H),Te=we.DEFAULT_POLLMASK;Z.stream_ops.poll&&(Te=Z.stream_ops.poll(Z)),Te&1&&V(H,b,g,J)&&(H<32?I=I|J:me=me|J,m++),Te&4&&V(H,E,A,J)&&(H<32?B=B|J:q=q|J,m++),Te&2&&V(H,C,Y,J)&&(H<32?_e=_e|J:ye=ye|J,m++)}}return t&&(c()[t>>>2]=I,c()[t+4>>>2]=me),n&&(c()[n>>>2]=B,c()[n+4>>>2]=q),o&&(c()[o>>>2]=_e,c()[o+4>>>2]=ye),m}function fi(){j("missing function: $SOCKFS"),R(-1)}function Rr(){j("missing function: $FS"),R(-1)}function Xe(e){var t=fi.getSocket(e);if(!t)throw new Rr.ErrnoError(8);return t}function so(e){return c()[la()>>>2]=e,e}var lo={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function ht(e){return(e&255)+"."+(e>>8&255)+"."+(e>>16&255)+"."+(e>>24&255)}function Tr(e){var t="",n=0,o=0,h=0,m=0,b=0,g=0,E=[e[0]&65535,e[0]>>16,e[1]&65535,e[1]>>16,e[2]&65535,e[2]>>16,e[3]&65535,e[3]>>16],A=!0,C="";for(g=0;g<5;g++)if(E[g]!==0){A=!1;break}if(A){if(C=ht(E[6]|E[7]<<16),E[5]===-1)return t="::ffff:",t+=C,t;if(E[5]===0)return t="::",C==="0.0.0.0"&&(C=""),C==="0.0.0.1"&&(C="1"),t+=C,t}for(n=0;n<8;n++)E[n]===0&&(n-h>1&&(b=0),h=n,b++),b>o&&(o=b,m=n-o+1);for(n=0;n<8;n++){if(o>1&&E[n]===0&&n>=m&&n<m+o){n===m&&(t+=":",m===0&&(t+=":"));continue}t+=Number(bn(E[n]&65535)).toString(16),t+=n<7?":":""}return t}function Cr(e,t){var n=u()[e>>>1],o=bn(_()[e+2>>>1]),h;switch(n){case 2:if(t!==16)return{errno:28};h=c()[e+4>>>2],h=ht(h);break;case 10:if(t!==28)return{errno:28};h=[c()[e+8>>>2],c()[e+12>>>2],c()[e+16>>>2],c()[e+20>>>2]],h=Tr(h);break;default:return{errno:5}}return{family:n,addr:h,port:o}}function Qe(e){for(var t=e.split("."),n=0;n<4;n++){var o=Number(t[n]);if(isNaN(o))return null;t[n]=o}return(t[0]|t[1]<<8|t[2]<<16|t[3]<<24)>>>0}function Ze(e){return parseInt(e)}function bt(e){var t,n,o,h,m,b=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,g=[];if(!b.test(e))return null;if(e==="::")return[0,0,0,0,0,0,0,0];for(e.startsWith("::")?e=e.replace("::","Z:"):e=e.replace("::",":Z:"),e.indexOf(".")>0?(e=e.replace(new RegExp("[.]","g"),":"),t=e.split(":"),t[t.length-4]=Ze(t[t.length-4])+Ze(t[t.length-3])*256,t[t.length-3]=Ze(t[t.length-2])+Ze(t[t.length-1])*256,t=t.slice(0,t.length-2)):t=e.split(":"),o=0,h=0,n=0;n<t.length;n++)if(typeof t[n]=="string")if(t[n]==="Z"){for(h=0;h<8-t.length+1;h++)g[n+h]=0;o=h-1}else g[n+o]=kt(parseInt(t[n],16));else g[n+o]=t[n];return[g[1]<<16|g[0],g[3]<<16|g[2],g[5]<<16|g[4],g[7]<<16|g[6]]}var le={address_map:{id:1,addrs:{},names:{}},lookup_name:function(e){var t=Qe(e);if(t!==null||(t=bt(e),t!==null))return e;var n;if(le.address_map.addrs[e])n=le.address_map.addrs[e];else{var o=le.address_map.id++;v(o<65535,"exceeded max address mappings of 65535"),n="172.29."+(o&255)+"."+(o&65280),le.address_map.names[n]=e,le.address_map.addrs[e]=n}return n},lookup_addr:function(e){return le.address_map.names[e]?le.address_map.names[e]:null}};function xr(e,t,n){if(n&&e===0)return null;var o=Cr(e,t);if(o.errno)throw new Rr.ErrnoError(o.errno);return o.addr=le.lookup_addr(o.addr)||o.addr,o}function Dr(e,t,n){if(w)return D(5,1,e,t,n);var o=Xe(e),h=xr(t,n);return o.sock_ops.bind(o,h.addr,h.port),0}function jr(e,t,n){if(w)return D(6,1,e,t,n);var o=Xe(e),h=xr(t,n);return o.sock_ops.connect(o,h.addr,h.port),0}function Mr(e,t,n,o){if(w)return D(7,1,e,t,n,o);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ir(e,t,n){return w?D(8,1,e,t,n):(we.varargs=n,0)}function Hr(e,t){if(w)return D(9,1,e,t);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function uo(e,t){return v(e==e>>>0||e==(e|0)),v(t===(t|0)),t+2097152>>>0<4194305-!!e?(e>>>0)+t*4294967296:NaN}function Ur(e,t,n){if(w)return D(10,1,e,t,n);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Lr(e,t,n){if(w)return D(11,1,e,t,n);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function pt(e,t,n,o,h){switch(t){case 2:n=Qe(n),dr(e,16),h&&(c()[h>>>2]=16),u()[e>>>1]=t,c()[e+4>>>2]=n,u()[e+2>>>1]=kt(o);break;case 10:n=bt(n),dr(e,28),h&&(c()[h>>>2]=28),c()[e>>>2]=t,c()[e+8>>>2]=n[0],c()[e+12>>>2]=n[1],c()[e+16>>>2]=n[2],c()[e+20>>>2]=n[3],u()[e+2>>>1]=kt(o);break;default:return 5}return 0}function Or(e,t,n){if(w)return D(12,1,e,t,n);var o=Xe(e);if(!o.daddr)return-53;var h=pt(t,o.family,le.lookup_name(o.daddr),o.dport,n);return v(!h),0}function Pr(e,t,n,o,h){if(w)return D(13,1,e,t,n,o,h);var m=Xe(e);return t===1&&n===4?(c()[o>>>2]=m.error,c()[h>>>2]=4,m.error=null,0):-50}function Br(e,t,n){return w?D(14,1,e,t,n):(we.varargs=n,0)}function Nr(e,t){if(w)return D(15,1,e,t);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Wr(e,t,n){if(w)return D(16,1,e,t,n);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Yr(e,t,n,o){if(w)return D(17,1,e,t,n,o);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Xr(e,t,n,o){if(w)return D(18,1,e,t,n,o);we.varargs=o,R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Gr(e,t,n,o,h,m){if(w)return D(19,1,e,t,n,o,h,m);var b=Xe(e),g=b.sock_ops.recvmsg(b,n);if(!g)return 0;if(h){var E=pt(h,b.family,le.lookup_name(g.addr),g.port,m);v(!E)}return s().set(g.buffer,t>>>0),g.buffer.byteLength}function Kr(e,t,n,o){if(w)return D(20,1,e,t,n,o);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zr(e){if(w)return D(21,1,e);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function qr(e,t,n,o,h,m){if(w)return D(22,1,e,t,n,o,h,m);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Vr(e,t,n){if(w)return D(23,1,e,t,n);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $r(e,t){if(w)return D(24,1,e,t);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Jr(e,t,n){if(w)return D(25,1,e,t,n);R("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function di(e){var t=new WebAssembly.Exception(gr(),[e],{traceStack:!0});t.message=Er(t);var n=t.stack.split(`
`);throw n.splice(1,1),t.stack=n.join(`
`),t}function hi(){return 65536}var bi=!0;function pi(){return bi}function mt(e){Atomics.store(c(),e>>2,1),Ke()&&fa(e),Atomics.compareExchange(c(),e>>2,1,0)}i.executeNotifiedProxyingQueue=mt;function mi(e,t,n,o){if(e==t)setTimeout(()=>mt(o));else if(w)postMessage({targetThread:e,cmd:"processProxyingQueue",queue:o});else{var h=F.pthreads[e];if(!h){j("Cannot send message to thread with ID "+e+", unknown thread ID!");return}h.postMessage({cmd:"processProxyingQueue",queue:o})}}function yi(e,t,n){return j("emscripten_set_offscreencanvas_size: Build with -sOFFSCREENCANVAS_SUPPORT=1 to enable transferring canvases to pthreads."),-1}function gi(){R("native code called abort()")}function vi(e){R(Sr)}function wi(e,t){return globalThis.DUCKDB_RUNTIME.createDirectory(i,e,t)}function Ei(e,t){return globalThis.DUCKDB_RUNTIME.checkDirectory(i,e,t)}function Si(e,t){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(i,e,t)}function ki(e,t){return globalThis.DUCKDB_RUNTIME.removeDirectory(i,e,t)}function Ai(e){return globalThis.DUCKDB_RUNTIME.closeFile(i,e)}function Fi(e,t){return globalThis.DUCKDB_RUNTIME.checkFile(i,e,t)}function Ri(e){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(i,e)}function Ti(e,t,n,o){return globalThis.DUCKDB_RUNTIME.moveFile(i,e,t,n,o)}function Ci(e,t){return globalThis.DUCKDB_RUNTIME.openFile(i,e,t)}function xi(e,t,n,o){return globalThis.DUCKDB_RUNTIME.readFile(i,e,t,n,o)}function Di(e,t){return globalThis.DUCKDB_RUNTIME.truncateFile(i,e,t)}function ji(e,t,n,o){return globalThis.DUCKDB_RUNTIME.writeFile(i,e,t,n,o)}function Mi(e){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(e)}function Ii(e,t){return globalThis.DUCKDB_RUNTIME.glob(i,e,t)}function Hi(e){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(i,e)}function Ui(e,t,n,o,h,m){return globalThis.DUCKDB_RUNTIME.callScalarUDF(i,e,t,n,o,h,m)}function Li(){L||Q||ue("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")}function Oi(e){v(typeof e=="number"),console.error(se(e))}function Pi(){return Date.now()}function Qr(){return 4294901760}function Bi(){return Qr()}var yt;L?yt=()=>{var e=process.hrtime();return e[0]*1e3+e[1]/1e6}:yt=()=>performance.timeOrigin+performance.now();function Ni(e,t,n){s().copyWithin(e>>>0,t>>>0,t+n>>>0)}function Wi(){return L?N("os").cpus().length:navigator.hardwareConcurrency}function D(e,t){var n=arguments.length-2,o=arguments,h=19;if(n>h)throw"emscripten_proxy_to_main_thread_js: Too many arguments "+n+" to proxied function idx="+e+", maximum supported is "+h;return wr(()=>{for(var m=n,b=Me(m*8),g=b>>3,E=0;E<n;E++){var A=o[2+E];k()[g+E>>>0]=A}return ca(e,m,b,t)})}var gt=[];function Yi(e,t,n){gt.length=t;for(var o=n>>3,h=0;h<t;h++)gt[h]=k()[o+h>>>0];var m=aa[e];return v(m.length==t,"Call args mismatch in emscripten_receive_on_main_thread_js"),m.apply(null,gt)}function Xi(e){var t=G.buffer;try{return G.grow(e-t.byteLength+65535>>>16),de(),1}catch(n){j("emscripten_realloc_buffer: Attempted to grow heap from "+t.byteLength+" bytes to "+e+" bytes, but got error: "+n)}}function Gi(e){var t=s().length;if(e=e>>>0,e<=t)return!1;var n=Qr();if(e>n)return j("Cannot enlarge memory, asked to go up to "+e+" bytes, but the limit is "+n+" bytes!"),!1;let o=(E,A)=>E+(A-E%A)%A;for(var h=1;h<=4;h*=2){var m=t*(1+.2/h);m=Math.min(m,e+100663296);var b=Math.min(n,o(Math.max(e,m),65536)),g=Xi(b);if(g)return!0}return j("Failed to grow the heap from "+t+" bytes to "+b+" bytes, not enough memory!"),!1}function Ki(){throw"unwind"}var vt={};function zi(){return ee||"./this.program"}function Ge(){if(!Ge.strings){var e=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:e,_:zi()};for(var n in vt)vt[n]===void 0?delete t[n]:t[n]=vt[n];var o=[];for(var n in t)o.push(n+"="+t[n]);Ge.strings=o}return Ge.strings}function qi(e,t,n){for(var o=0;o<e.length;++o)v(e.charCodeAt(o)===(e.charCodeAt(o)&255)),l()[t++>>>0]=e.charCodeAt(o);n||(l()[t>>>0]=0)}function Zr(e,t){if(w)return D(26,1,e,t);var n=0;return Ge().forEach(function(o,h){var m=t+n;f()[e+h*4>>>2]=m,qi(o,m),n+=o.length+1}),0}function en(e,t){if(w)return D(27,1,e,t);var n=Ge();f()[e>>>2]=n.length;var o=0;return n.forEach(function(h){o+=h.length+1}),f()[t>>>2]=o,0}function tn(e){if(w)return D(28,1,e);R("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function rn(e,t){if(w)return D(29,1,e,t);var n=e==1||e==2?2:R();return l()[t>>>0]=n,0}function nn(e,t,n,o,h,m){if(w)return D(30,1,e,t,n,o,h,m);R("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function an(e,t,n,o,h,m){if(w)return D(31,1,e,t,n,o,h,m);R("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function on(e,t,n,o){if(w)return D(32,1,e,t,n,o);R("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function sn(e,t,n,o,h){return w?D(33,1,e,t,n,o,h):70}function ln(e){if(w)return D(34,1,e);R("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var wt=[null,[],[]];function Et(e,t){var n=wt[e];v(n),t===0||t===10?((e===1?He:j)(Kt(n,0)),n.length=0):n.push(t)}function Vi(){_a(0),wt[1].length&&Et(1,10),wt[2].length&&Et(2,10)}function un(e,t,n,o){if(w)return D(35,1,e,t,n,o);for(var h=0,m=0;m<n;m++){var b=f()[t>>>2],g=f()[t+4>>>2];t+=8;for(var E=0;E<g;E++)Et(e,s()[b+E>>>0]);h+=g}return f()[o>>>2]=h,0}function _n(e,t,n,o){if(w)return D(36,1,e,t,n,o);var h=[],m=null,b=0,g=0,E=0,A=0,C=0,Y=0,I,me;function B(q,_e,ye,y,S,V){var H,J,Z,Te;return J=q===10?28:16,S=q===10?Tr(S):ht(S),H=mn(J),Te=pt(H,q,S,V),v(!Te),Z=mn(32),c()[Z+4>>>2]=q,c()[Z+8>>>2]=_e,c()[Z+12>>>2]=ye,c()[Z+24>>>2]=y,f()[Z+20>>>2]=H,q===10?c()[Z+16>>>2]=28:c()[Z+16>>>2]=16,c()[Z+28>>>2]=0,Z}if(n&&(E=c()[n>>>2],A=c()[n+4>>>2],C=c()[n+8>>>2],Y=c()[n+12>>>2]),C&&!Y&&(Y=C===2?17:6),!C&&Y&&(C=Y===17?2:1),Y===0&&(Y=6),C===0&&(C=1),!e&&!t)return-2;if(E&-1088||n!==0&&c()[n>>>2]&2&&!e)return-1;if(E&32)return-2;if(C!==0&&C!==1&&C!==2)return-7;if(A!==0&&A!==2&&A!==10)return-6;if(t&&(t=se(t),g=parseInt(t,10),isNaN(g)))return E&1024?-2:-8;if(!e)return A===0&&(A=2),(E&1)===0&&(A===2?b=St(2130706433):b=[0,0,0,1]),I=B(A,C,Y,null,b,g),f()[o>>>2]=I,0;if(e=se(e),b=Qe(e),b!==null)if(A===0||A===2)A=2;else if(A===10&&E&8)b=[0,0,St(65535),b],A=10;else return-2;else if(b=bt(e),b!==null)if(A===0||A===10)A=10;else return-2;return b!=null?(I=B(A,C,Y,e,b,g),f()[o>>>2]=I,0):E&4?-2:(e=le.lookup_name(e),b=Qe(e),A===0?A=2:A===10&&(b=[0,0,St(65535),b]),I=B(A,C,Y,null,b,g),f()[o>>>2]=I,0)}function $i(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function"){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}else if(L)try{var t=N("crypto");return()=>t.randomBytes(1)[0]}catch(n){}return()=>R("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function et(e,t){et.randomDevice||(et.randomDevice=$i());for(var n=0;n<t;n++)l()[e+n>>>0]=et.randomDevice();return 0}function Ji(e,t,n,o,h,m,b){var g=Cr(e,t);if(g.errno)return-6;var E=g.port,A=g.addr,C=!1;if(n&&o){var Y;if(b&1||!(Y=le.lookup_addr(A))){if(b&8)return-2}else A=Y;var I=lt(A,n,o);I+1>=o&&(C=!0)}if(h&&m){E=""+E;var I=lt(E,h,m);I+1>=m&&(C=!0)}return C?-12:0}function tt(e){return e%4===0&&(e%100!==0||e%400===0)}function Qi(e,t){for(var n=0,o=0;o<=t;n+=e[o++]);return n}var cn=[31,29,31,30,31,30,31,31,30,31,30,31],fn=[31,28,31,30,31,30,31,31,30,31,30,31];function Zi(e,t){for(var n=new Date(e.getTime());t>0;){var o=tt(n.getFullYear()),h=n.getMonth(),m=(o?cn:fn)[h];if(t>m-n.getDate())t-=m-n.getDate()+1,n.setDate(1),h<11?n.setMonth(h+1):(n.setMonth(0),n.setFullYear(n.getFullYear()+1));else return n.setDate(n.getDate()+t),n}return n}function ea(e,t,n){var o=n>0?n:Pn(e)+1,h=new Array(o),m=zt(e,h,0,h.length);return t&&(h.length=m),h}function dn(e,t){v(e.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),l().set(e,t>>>0)}function ta(e,t,n,o){var h=c()[o+40>>>2],m={tm_sec:c()[o>>>2],tm_min:c()[o+4>>>2],tm_hour:c()[o+8>>>2],tm_mday:c()[o+12>>>2],tm_mon:c()[o+16>>>2],tm_year:c()[o+20>>>2],tm_wday:c()[o+24>>>2],tm_yday:c()[o+28>>>2],tm_isdst:c()[o+32>>>2],tm_gmtoff:c()[o+36>>>2],tm_zone:h?se(h):""},b=se(n),g={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var E in g)b=b.replace(new RegExp(E,"g"),g[E]);var A=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],C=["January","February","March","April","May","June","July","August","September","October","November","December"];function Y(y,S,V){for(var H=typeof y=="number"?y.toString():y||"";H.length<S;)H=V[0]+H;return H}function I(y,S){return Y(y,S,"0")}function me(y,S){function V(J){return J<0?-1:J>0?1:0}var H;return(H=V(y.getFullYear()-S.getFullYear()))===0&&(H=V(y.getMonth()-S.getMonth()))===0&&(H=V(y.getDate()-S.getDate())),H}function B(y){switch(y.getDay()){case 0:return new Date(y.getFullYear()-1,11,29);case 1:return y;case 2:return new Date(y.getFullYear(),0,3);case 3:return new Date(y.getFullYear(),0,2);case 4:return new Date(y.getFullYear(),0,1);case 5:return new Date(y.getFullYear()-1,11,31);case 6:return new Date(y.getFullYear()-1,11,30)}}function q(y){var S=Zi(new Date(y.tm_year+1900,0,1),y.tm_yday),V=new Date(S.getFullYear(),0,4),H=new Date(S.getFullYear()+1,0,4),J=B(V),Z=B(H);return me(J,S)<=0?me(Z,S)<=0?S.getFullYear()+1:S.getFullYear():S.getFullYear()-1}var _e={"%a":function(y){return A[y.tm_wday].substring(0,3)},"%A":function(y){return A[y.tm_wday]},"%b":function(y){return C[y.tm_mon].substring(0,3)},"%B":function(y){return C[y.tm_mon]},"%C":function(y){var S=y.tm_year+1900;return I(S/100|0,2)},"%d":function(y){return I(y.tm_mday,2)},"%e":function(y){return Y(y.tm_mday,2," ")},"%g":function(y){return q(y).toString().substring(2)},"%G":function(y){return q(y)},"%H":function(y){return I(y.tm_hour,2)},"%I":function(y){var S=y.tm_hour;return S==0?S=12:S>12&&(S-=12),I(S,2)},"%j":function(y){return I(y.tm_mday+Qi(tt(y.tm_year+1900)?cn:fn,y.tm_mon-1),3)},"%m":function(y){return I(y.tm_mon+1,2)},"%M":function(y){return I(y.tm_min,2)},"%n":function(){return`
`},"%p":function(y){return y.tm_hour>=0&&y.tm_hour<12?"AM":"PM"},"%S":function(y){return I(y.tm_sec,2)},"%t":function(){return"	"},"%u":function(y){return y.tm_wday||7},"%U":function(y){var S=y.tm_yday+7-y.tm_wday;return I(Math.floor(S/7),2)},"%V":function(y){var S=Math.floor((y.tm_yday+7-(y.tm_wday+6)%7)/7);if((y.tm_wday+371-y.tm_yday-2)%7<=2&&S++,S){if(S==53){var H=(y.tm_wday+371-y.tm_yday)%7;H!=4&&(H!=3||!tt(y.tm_year))&&(S=1)}}else{S=52;var V=(y.tm_wday+7-y.tm_yday-1)%7;(V==4||V==5&&tt(y.tm_year%400-1))&&S++}return I(S,2)},"%w":function(y){return y.tm_wday},"%W":function(y){var S=y.tm_yday+7-(y.tm_wday+6)%7;return I(Math.floor(S/7),2)},"%y":function(y){return(y.tm_year+1900).toString().substring(2)},"%Y":function(y){return y.tm_year+1900},"%z":function(y){var S=y.tm_gmtoff,V=S>=0;return S=Math.abs(S)/60,S=S/60*100+S%60,(V?"+":"-")+String("0000"+S).slice(-4)},"%Z":function(y){return y.tm_zone},"%%":function(){return"%"}};b=b.replace(/%%/g,"\0\0");for(var E in _e)b.includes(E)&&(b=b.replace(new RegExp(E,"g"),_e[E](m)));b=b.replace(/\0\0/g,"%");var ye=ea(b,!1);return ye.length>t?0:(dn(ye,e),ye.length-1)}function ra(e,t,n,o,h){return ta(e,t,n,o)}function na(e){var t=i["_"+e];return v(t,"Cannot call unknown function "+e+", make sure it is exported"),t}function ia(e,t,n,o,h){var m={string:B=>{var q=0;if(B!=null&&B!==0){var _e=(B.length<<2)+1;q=Me(_e),lt(B,q,_e)}return q},array:B=>{var q=Me(B.length);return dn(B,q),q}};function b(B){return t==="string"?se(B):t==="boolean"?Boolean(B):B}var g=na(e),E=[],A=0;if(v(t!=="array",'Return type should not be "array".'),o)for(var C=0;C<o.length;C++){var Y=m[n[C]];Y?(A===0&&(A=Ft()),E[C]=Y(o[C])):E[C]=o[C]}var I=g.apply(null,E);function me(B){return A!==0&&rt(A),b(B)}return I=me(I),I}F.init();var aa=[null,br,vr,kr,Fr,Dr,jr,Mr,Ir,Hr,Ur,Lr,Or,Pr,Br,Nr,Wr,Yr,Xr,Gr,Kr,zr,qr,Vr,$r,Jr,Zr,en,tn,rn,nn,an,on,sn,ln,un,_n];function oa(){Qn("fetchSettings")}var hn={__assert_fail:li,__dlsym:ui,__emscripten_init_main_thread_js:_i,__emscripten_thread_cleanup:ci,__pthread_create_js:Ar,__syscall__newselect:Fr,__syscall_bind:Dr,__syscall_connect:jr,__syscall_faccessat:Mr,__syscall_fcntl64:Ir,__syscall_fstat64:Hr,__syscall_ftruncate64:Ur,__syscall_getdents64:Lr,__syscall_getpeername:Or,__syscall_getsockopt:Pr,__syscall_ioctl:Br,__syscall_lstat64:Nr,__syscall_mkdirat:Wr,__syscall_newfstatat:Yr,__syscall_openat:Xr,__syscall_recvfrom:Gr,__syscall_renameat:Kr,__syscall_rmdir:zr,__syscall_sendto:qr,__syscall_socket:Vr,__syscall_stat64:$r,__syscall_unlinkat:Jr,__throw_exception_with_stack_trace:di,_emscripten_default_pthread_stack_size:hi,_emscripten_get_now_is_monotonic:pi,_emscripten_notify_task_queue:mi,_emscripten_set_offscreencanvas_size:yi,abort:gi,dlopen:vi,duckdb_web_fs_directory_create:wi,duckdb_web_fs_directory_exists:Ei,duckdb_web_fs_directory_list_files:Si,duckdb_web_fs_directory_remove:ki,duckdb_web_fs_file_close:Ai,duckdb_web_fs_file_exists:Fi,duckdb_web_fs_file_get_last_modified_time:Ri,duckdb_web_fs_file_move:Ti,duckdb_web_fs_file_open:Ci,duckdb_web_fs_file_read:xi,duckdb_web_fs_file_truncate:Di,duckdb_web_fs_file_write:ji,duckdb_web_fs_get_default_data_protocol:Mi,duckdb_web_fs_glob:Ii,duckdb_web_test_platform_feature:Hi,duckdb_web_udf_scalar_call:Ui,emscripten_check_blocking_allowed:Li,emscripten_console_error:Oi,emscripten_date_now:Pi,emscripten_get_heap_max:Bi,emscripten_get_now:yt,emscripten_memcpy_big:Ni,emscripten_num_logical_cores:Wi,emscripten_receive_on_main_thread_js:Yi,emscripten_resize_heap:Gi,emscripten_unwind_to_js_event_loop:Ki,environ_get:Zr,environ_sizes_get:en,exit:mr,fd_close:tn,fd_fdstat_get:rn,fd_pread:nn,fd_pwrite:an,fd_read:on,fd_seek:sn,fd_sync:ln,fd_write:un,getaddrinfo:_n,getentropy:et,getnameinfo:Ji,memory:G||i.wasmMemory,strftime_l:ra},_o=Jn(),co=d("__wasm_call_ctors"),sa=i._main=d("main"),fo=i._duckdb_web_fs_glob_add_path=d("duckdb_web_fs_glob_add_path"),ho=i._duckdb_web_clear_response=d("duckdb_web_clear_response"),bo=i._duckdb_web_fail_with=d("duckdb_web_fail_with"),po=i._duckdb_web_reset=d("duckdb_web_reset"),mo=i._duckdb_web_connect=d("duckdb_web_connect"),yo=i._duckdb_web_disconnect=d("duckdb_web_disconnect"),go=i._duckdb_web_flush_files=d("duckdb_web_flush_files"),vo=i._duckdb_web_flush_file=d("duckdb_web_flush_file"),wo=i._duckdb_web_open=d("duckdb_web_open"),Eo=i._duckdb_web_get_global_file_info=d("duckdb_web_get_global_file_info"),So=i._duckdb_web_collect_file_stats=d("duckdb_web_collect_file_stats"),ko=i._duckdb_web_export_file_stats=d("duckdb_web_export_file_stats"),Ao=i._duckdb_web_fs_drop_file=d("duckdb_web_fs_drop_file"),Fo=i._duckdb_web_fs_drop_files=d("duckdb_web_fs_drop_files"),Ro=i._duckdb_web_fs_glob_file_infos=d("duckdb_web_fs_glob_file_infos"),To=i._duckdb_web_fs_get_file_info_by_id=d("duckdb_web_fs_get_file_info_by_id"),Co=i._duckdb_web_fs_get_file_info_by_name=d("duckdb_web_fs_get_file_info_by_name"),xo=i._duckdb_web_fs_register_file_url=d("duckdb_web_fs_register_file_url"),Do=i._duckdb_web_fs_register_file_buffer=d("duckdb_web_fs_register_file_buffer"),jo=i._duckdb_web_copy_file_to_buffer=d("duckdb_web_copy_file_to_buffer"),Mo=i._duckdb_web_copy_file_to_path=d("duckdb_web_copy_file_to_path"),Io=i._duckdb_web_get_version=d("duckdb_web_get_version"),Ho=i._duckdb_web_get_feature_flags=d("duckdb_web_get_feature_flags"),Uo=i._duckdb_web_tokenize=d("duckdb_web_tokenize"),Lo=i._duckdb_web_udf_scalar_create=d("duckdb_web_udf_scalar_create"),Oo=i._duckdb_web_prepared_create=d("duckdb_web_prepared_create"),Po=i._duckdb_web_prepared_close=d("duckdb_web_prepared_close"),Bo=i._duckdb_web_prepared_run=d("duckdb_web_prepared_run"),No=i._duckdb_web_prepared_send=d("duckdb_web_prepared_send"),Wo=i._duckdb_web_query_run=d("duckdb_web_query_run"),Yo=i._duckdb_web_pending_query_start=d("duckdb_web_pending_query_start"),Xo=i._duckdb_web_pending_query_poll=d("duckdb_web_pending_query_poll"),Go=i._duckdb_web_pending_query_cancel=d("duckdb_web_pending_query_cancel"),Ko=i._duckdb_web_query_fetch_results=d("duckdb_web_query_fetch_results"),zo=i._duckdb_web_get_tablenames=d("duckdb_web_get_tablenames"),qo=i._duckdb_web_insert_arrow_from_ipc_stream=d("duckdb_web_insert_arrow_from_ipc_stream"),Vo=i._duckdb_web_insert_csv_from_path=d("duckdb_web_insert_csv_from_path"),$o=i._duckdb_web_insert_json_from_path=d("duckdb_web_insert_json_from_path"),Jo=i.__emscripten_tls_init=d("_emscripten_tls_init"),Ke=i._pthread_self=d("pthread_self"),la=d("__errno_location"),Qo=d("__dl_seterr"),ua=i.__emscripten_thread_init=d("_emscripten_thread_init"),Zo=i.__emscripten_thread_crashed=d("_emscripten_thread_crashed"),_a=i._fflush=d("fflush"),St=d("htonl"),kt=d("htons"),es=d("emscripten_main_browser_thread_id"),ts=d("emscripten_main_thread_process_queued_calls"),ca=d("_emscripten_run_in_main_runtime_thread_js"),rs=d("emscripten_dispatch_to_thread_"),bn=d("ntohs"),fa=i.__emscripten_proxy_execute_task_queue=d("_emscripten_proxy_execute_task_queue"),pn=d("_emscripten_thread_free_data"),da=i.__emscripten_thread_exit=d("_emscripten_thread_exit"),mn=i._malloc=d("malloc"),yn=i._free=d("free"),ha=function(){return(ha=i.asm.emscripten_stack_get_base).apply(null,arguments)},At=function(){return(At=i.asm.emscripten_stack_get_end).apply(null,arguments)},gn=function(){return(gn=i.asm.__trap).apply(null,arguments)},vn=function(){return(vn=i.asm.emscripten_stack_init).apply(null,arguments)},wn=function(){return(wn=i.asm.emscripten_stack_set_limits).apply(null,arguments)},ba=function(){return(ba=i.asm.emscripten_stack_get_free).apply(null,arguments)},Ft=d("stackSave"),rt=d("stackRestore"),Me=d("stackAlloc"),En=function(){return(En=i.asm.emscripten_stack_get_current).apply(null,arguments)},pa=i.___cxa_decrement_exception_refcount=d("__cxa_decrement_exception_refcount"),ma=i.___cxa_increment_exception_refcount=d("__cxa_increment_exception_refcount"),ya=i.___thrown_object_from_unwind_exception=d("__thrown_object_from_unwind_exception"),ga=i.___get_exception_message=d("__get_exception_message"),ns=i.dynCall_jiji=d("dynCall_jiji"),is=i.dynCall_iiiiij=d("dynCall_iiiiij"),as=i.dynCall_iiiiijj=d("dynCall_iiiiijj"),os=i.dynCall_iiiiiijj=d("dynCall_iiiiiijj"),ss=i.dynCall_viijii=d("dynCall_viijii"),ls=i.dynCall_jiii=d("dynCall_jiii"),us=i.dynCall_jii=d("dynCall_jii"),_s=i.dynCall_ji=d("dynCall_ji"),cs=i.dynCall_jij=d("dynCall_jij"),fs=i.dynCall_iiij=d("dynCall_iiij"),ds=i.dynCall_viji=d("dynCall_viji"),hs=i.dynCall_iij=d("dynCall_iij"),bs=i.dynCall_iiiiiji=d("dynCall_iiiiiji"),ps=i.dynCall_vij=d("dynCall_vij"),ms=i.dynCall_viij=d("dynCall_viij"),ys=i.dynCall_jiiiii=d("dynCall_jiiiii"),gs=i.dynCall_viiijj=d("dynCall_viiijj"),vs=i.dynCall_viiij=d("dynCall_viiij"),ws=i.dynCall_j=d("dynCall_j"),Es=i.dynCall_viijij=d("dynCall_viijij"),Ss=i.dynCall_viiijiiiijj=d("dynCall_viiijiiiijj"),ks=i.dynCall_vjjijij=d("dynCall_vjjijij"),As=i.dynCall_vijjji=d("dynCall_vijjji"),Fs=i.dynCall_vjjii=d("dynCall_vjjii"),Rs=i.dynCall_viiiiiji=d("dynCall_viiiiiji"),Ts=i.dynCall_jiiiji=d("dynCall_jiiiji"),Cs=i.dynCall_jiiij=d("dynCall_jiiij"),xs=i.dynCall_jijjij=d("dynCall_jijjij"),Ds=i.dynCall_vijjj=d("dynCall_vijjj"),js=i.dynCall_jiijii=d("dynCall_jiijii"),Ms=i.dynCall_jijiii=d("dynCall_jijiii"),Is=i.dynCall_viijiiiii=d("dynCall_viijiiiii"),Hs=i.dynCall_viijiiij=d("dynCall_viijiiij"),Us=i.dynCall_vijiiiji=d("dynCall_vijiiiji"),Ls=i.dynCall_viiiij=d("dynCall_viiiij"),Os=i.dynCall_jiiji=d("dynCall_jiiji"),Ps=i.dynCall_viiijij=d("dynCall_viiijij"),Bs=i.dynCall_viijiij=d("dynCall_viijiij"),Ns=i.dynCall_viiiiijj=d("dynCall_viiiiijj"),Ws=i.dynCall_viiijji=d("dynCall_viiijji"),Ys=i.dynCall_vijii=d("dynCall_vijii"),Xs=i.dynCall_jiiiij=d("dynCall_jiiiij"),Gs=i.dynCall_jj=d("dynCall_jj"),Ks=i.dynCall_ij=d("dynCall_ij"),zs=i.dynCall_ijjj=d("dynCall_ijjj"),qs=i.dynCall_jjjd=d("dynCall_jjjd"),Vs=i.dynCall_jjjjjjd=d("dynCall_jjjjjjd"),$s=i.dynCall_jijj=d("dynCall_jijj"),Js=i.dynCall_iiiji=d("dynCall_iiiji"),Qs=i.dynCall_viiji=d("dynCall_viiji"),Zs=i.dynCall_jiiiijj=d("dynCall_jiiiijj"),el=i.dynCall_jiiii=d("dynCall_jiiii"),tl=i.dynCall_iiijj=d("dynCall_iiijj"),rl=i.dynCall_iiji=d("dynCall_iiji"),nl=i.dynCall_viiiji=d("dynCall_viiiji"),il=i.dynCall_viiiiji=d("dynCall_viiiiji"),al=i.dynCall_viijji=d("dynCall_viijji"),ol=i.dynCall_viijj=d("dynCall_viijj"),sl=i.dynCall_jijiiii=d("dynCall_jijiiii"),ll=i.dynCall_viiijiji=d("dynCall_viiijiji"),ul=i.dynCall_viijiji=d("dynCall_viijiji");i.keepRuntimeAlive=Ne,i.wasmMemory=G,i.stackAlloc=Me,i.stackSave=Ft,i.stackRestore=rt,i.ccall=ia,i.ExitStatus=Ye,i.PThread=F;var va=["stringToNewUTF8","getHostByName","traverseStack","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromI64","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","stringToAscii","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","allocateUTF8","allocateUTF8OnStack","writeStringToMemory","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","emscriptenWebGLGet","computeUnpackAlignedImageSize","emscriptenWebGLGetTexPixelData","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","writeGLArray","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","runAndAbortIfError","ALLOC_NORMAL","ALLOC_STACK","allocate"];va.forEach(ei);var wa=["run","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createPreloadedFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","getTempRet0","setTempRet0","GROWABLE_HEAP_I8","GROWABLE_HEAP_U8","GROWABLE_HEAP_I16","GROWABLE_HEAP_U16","GROWABLE_HEAP_I32","GROWABLE_HEAP_U32","GROWABLE_HEAP_F32","GROWABLE_HEAP_F64","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","getRandomDevice","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","intArrayFromString","UTF16Decoder","writeArrayToMemory","writeAsciiToMemory","SYSCALLS","getSocketFromFD","getSocketAddress","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","tempFixedLengthArray","miniTempWebGLFloatBuffers","GL","AL","SDL","SDL_gfx","GLUT","EGL","GLFW","GLEW","IDBStore","terminateWorker","killThread","cleanupThread","registerTLSInit","cancelThread","spawnThread","exitOnMainThread","invokeEntryPoint","executeNotifiedProxyingQueue","SOCKFS","FS"];wa.forEach(_r);var nt;We=function e(){nt||Sn(),nt||(We=e)};function Ea(){v(ve==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),v(ut.length==0,"cannot call main when preRun functions remain to be called");var e=sa,t=0,n=0;try{var o=e(t,n);return pr(o,!0),o}catch(h){return yr(h)}}function Sa(){v(!w),vn(),tr()}function Sn(){if(ve>0)return;if(w||Sa(),w){P(i),ar(),(x => {if (typeof startWorker === 'function') startWorker(x); else console.log("NOOP");})(i);return}if(Bn(),ve>0)return;function e(){nt||(nt=!0,i.calledRun=!0,!Le&&(ar(),Nn(),P(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),kn&&Ea(),Wn()))}i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),e()},1)):e(),xe()}function ka(){var e=He,t=j,n=!1;He=j=o=>{n=!0};try{Vi()}catch(o){}He=e,j=t,n&&(ue("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),ue("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();var kn=!0;return i.noInitialRun&&(kn=!1),Sn(),a.ready}})(),Ct=Ua});var jn=Tt((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,a){return function(l){return new Sha256(a,!0).update(l)[r]()}},createMethod=function(r){var a=createOutputMethod("hex",r);NODE_JS&&(a=nodeWrap(a,r)),a.create=function(){return new Sha256(r)},a.update=function(u){return a.create().update(u)};for(var l=0;l<OUTPUT_TYPES.length;++l){var s=OUTPUT_TYPES[l];a[s]=createOutputMethod(s,r)}return a},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,a){return function(l,s){return new HmacSha256(l,a,!0).update(s)[r]()}},createHmacMethod=function(r){var a=createHmacOutputMethod("hex",r);a.create=function(u){return new HmacSha256(u,r)},a.update=function(u,_){return a.create(u).update(_)};for(var l=0;l<OUTPUT_TYPES.length;++l){var s=OUTPUT_TYPES[l];a[s]=createHmacOutputMethod(s,r)}return a};function Sha256(r,a){a?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var a,l=typeof r;if(l!=="string"){if(l==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);a=!0}for(var s,u=0,_,c=r.length,f=this.blocks;u<c;){if(this.hashed&&(this.hashed=!1,f[0]=this.block,f[16]=f[1]=f[2]=f[3]=f[4]=f[5]=f[6]=f[7]=f[8]=f[9]=f[10]=f[11]=f[12]=f[13]=f[14]=f[15]=0),a)for(_=this.start;u<c&&_<64;++u)f[_>>2]|=r[u]<<SHIFT[_++&3];else for(_=this.start;u<c&&_<64;++u)s=r.charCodeAt(u),s<128?f[_>>2]|=s<<SHIFT[_++&3]:s<2048?(f[_>>2]|=(192|s>>6)<<SHIFT[_++&3],f[_>>2]|=(128|s&63)<<SHIFT[_++&3]):s<55296||s>=57344?(f[_>>2]|=(224|s>>12)<<SHIFT[_++&3],f[_>>2]|=(128|s>>6&63)<<SHIFT[_++&3],f[_>>2]|=(128|s&63)<<SHIFT[_++&3]):(s=65536+((s&1023)<<10|r.charCodeAt(++u)&1023),f[_>>2]|=(240|s>>18)<<SHIFT[_++&3],f[_>>2]|=(128|s>>12&63)<<SHIFT[_++&3],f[_>>2]|=(128|s>>6&63)<<SHIFT[_++&3],f[_>>2]|=(128|s&63)<<SHIFT[_++&3]);this.lastByteIndex=_,this.bytes+=_-this.start,_>=64?(this.block=f[16],this.start=_-64,this.hash(),this.hashed=!0):this.start=_}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,a=this.lastByteIndex;r[16]=this.block,r[a>>2]|=EXTRA[a&3],this.block=r[16],a>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,a=this.h1,l=this.h2,s=this.h3,u=this.h4,_=this.h5,c=this.h6,f=this.h7,p=this.blocks,k,i,P,z,T,$,ee,te,oe,Q,L;for(k=16;k<64;++k)T=p[k-15],i=(T>>>7|T<<25)^(T>>>18|T<<14)^T>>>3,T=p[k-2],P=(T>>>17|T<<15)^(T>>>19|T<<13)^T>>>10,p[k]=p[k-16]+i+p[k-7]+P<<0;for(L=a&l,k=0;k<64;k+=4)this.first?(this.is224?(te=300032,T=p[0]-1413257819,f=T-150054599<<0,s=T+24177077<<0):(te=704751109,T=p[0]-210244248,f=T-1521486534<<0,s=T+143694565<<0),this.first=!1):(i=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),P=(u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7),te=r&a,z=te^r&l^L,ee=u&_^~u&c,T=f+P+ee+K[k]+p[k],$=i+z,f=s+T<<0,s=T+$<<0),i=(s>>>2|s<<30)^(s>>>13|s<<19)^(s>>>22|s<<10),P=(f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7),oe=s&r,z=oe^s&a^te,ee=f&u^~f&_,T=c+P+ee+K[k+1]+p[k+1],$=i+z,c=l+T<<0,l=T+$<<0,i=(l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10),P=(c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7),Q=l&s,z=Q^l&r^oe,ee=c&f^~c&u,T=_+P+ee+K[k+2]+p[k+2],$=i+z,_=a+T<<0,a=T+$<<0,i=(a>>>2|a<<30)^(a>>>13|a<<19)^(a>>>22|a<<10),P=(_>>>6|_<<26)^(_>>>11|_<<21)^(_>>>25|_<<7),L=a&l,z=L^a&s^Q,ee=_&c^~_&f,T=u+P+ee+K[k+3]+p[k+3],$=i+z,u=r+T<<0,r=T+$<<0;this.h0=this.h0+r<<0,this.h1=this.h1+a<<0,this.h2=this.h2+l<<0,this.h3=this.h3+s<<0,this.h4=this.h4+u<<0,this.h5=this.h5+_<<0,this.h6=this.h6+c<<0,this.h7=this.h7+f<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,a=this.h1,l=this.h2,s=this.h3,u=this.h4,_=this.h5,c=this.h6,f=this.h7,p=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]+HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[u>>28&15]+HEX_CHARS[u>>24&15]+HEX_CHARS[u>>20&15]+HEX_CHARS[u>>16&15]+HEX_CHARS[u>>12&15]+HEX_CHARS[u>>8&15]+HEX_CHARS[u>>4&15]+HEX_CHARS[u&15]+HEX_CHARS[_>>28&15]+HEX_CHARS[_>>24&15]+HEX_CHARS[_>>20&15]+HEX_CHARS[_>>16&15]+HEX_CHARS[_>>12&15]+HEX_CHARS[_>>8&15]+HEX_CHARS[_>>4&15]+HEX_CHARS[_&15]+HEX_CHARS[c>>28&15]+HEX_CHARS[c>>24&15]+HEX_CHARS[c>>20&15]+HEX_CHARS[c>>16&15]+HEX_CHARS[c>>12&15]+HEX_CHARS[c>>8&15]+HEX_CHARS[c>>4&15]+HEX_CHARS[c&15];return this.is224||(p+=HEX_CHARS[f>>28&15]+HEX_CHARS[f>>24&15]+HEX_CHARS[f>>20&15]+HEX_CHARS[f>>16&15]+HEX_CHARS[f>>12&15]+HEX_CHARS[f>>8&15]+HEX_CHARS[f>>4&15]+HEX_CHARS[f&15]),p},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,a=this.h1,l=this.h2,s=this.h3,u=this.h4,_=this.h5,c=this.h6,f=this.h7,p=[r>>24&255,r>>16&255,r>>8&255,r&255,a>>24&255,a>>16&255,a>>8&255,a&255,l>>24&255,l>>16&255,l>>8&255,l&255,s>>24&255,s>>16&255,s>>8&255,s&255,u>>24&255,u>>16&255,u>>8&255,u&255,_>>24&255,_>>16&255,_>>8&255,_&255,c>>24&255,c>>16&255,c>>8&255,c&255];return this.is224||p.push(f>>24&255,f>>16&255,f>>8&255,f&255),p},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),a=new DataView(r);return a.setUint32(0,this.h0),a.setUint32(4,this.h1),a.setUint32(8,this.h2),a.setUint32(12,this.h3),a.setUint32(16,this.h4),a.setUint32(20,this.h5),a.setUint32(24,this.h6),this.is224||a.setUint32(28,this.h7),r};function HmacSha256(r,a,l){var s,u=typeof r;if(u==="string"){var _=[],c=r.length,f=0,p;for(s=0;s<c;++s)p=r.charCodeAt(s),p<128?_[f++]=p:p<2048?(_[f++]=192|p>>6,_[f++]=128|p&63):p<55296||p>=57344?(_[f++]=224|p>>12,_[f++]=128|p>>6&63,_[f++]=128|p&63):(p=65536+((p&1023)<<10|r.charCodeAt(++s)&1023),_[f++]=240|p>>18,_[f++]=128|p>>12&63,_[f++]=128|p>>6&63,_[f++]=128|p&63);r=_}else if(u==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(a,!0).update(r).array());var k=[],i=[];for(s=0;s<64;++s){var P=r[s]||0;k[s]=92^P,i[s]=54^P}Sha256.call(this,a,l),this.update(i),this.oKeyPad=k,this.inner=!0,this.sharedMemory=l}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var O={},Cn=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";Cn&&(Dt=Fn(),jt=Dt.parentPort,jt.on("message",r=>Lt({data:r})),Ht=Rn(),Object.assign(global,{self:global,require:it,Module:O,location:{href:__filename},Worker:Dt.Worker,importScripts:function(r){(0,eval)(Ht.readFileSync(r,"utf8")+"//# sourceURL="+r)},postMessage:function(r){jt.postMessage(r)},performance:global.performance||{now:function(){return Date.now()}}}));var Dt,jt,Ht,Mt=!1,It=[];function La(r,a){r||abort("Assertion failed: "+a)}function Oa(){var r=Array.prototype.slice.call(arguments).join(" ");if(Cn){Ht.writeSync(2,r+`
n
`);return}console.error(r)}function Pa(){var r=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:r,threadId:O._pthread_self()})}var qe=Oa;self.alert=Pa;O.instantiateWasm=(r,a)=>{var l=O.wasmModule;O.wasmModule=null;var s=new WebAssembly.Instance(l,r);return a(s)};self.onunhandledrejection=r=>{var a;throw(a=r.reason)!=null?a:r};function Ut(r){try{if(r.data.cmd==="load"){let a=[];self.onmessage=l=>a.push(l),self.startWorker=l=>{O=l,postMessage({cmd:"loaded"});for(let s of a)Ut(s);self.onmessage=Ut},O.wasmModule=r.data.wasmModule;for(let l of r.data.handlers)O[l]=function(){postMessage({cmd:"callHandler",handler:l,args:[...arguments]})};O.wasmMemory=r.data.wasmMemory,O.buffer=O.wasmMemory.buffer,O.workerID=r.data.workerID,O.ENVIRONMENT_IS_PTHREAD=!0,(r.data.urlOrBlob?Promise.resolve().then(()=>at(it(r.data.urlOrBlob))):Promise.resolve().then(()=>(xt(),Tn))).then(l=>l.default(O))}else if(r.data.cmd==="run"){O.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),La(r.data.pthread_ptr),O.establishStackSpace(),O.PThread.receiveObjectTransfer(r.data),O.PThread.threadInitTLS(),Mt||(It.forEach(a=>{O.executeNotifiedProxyingQueue(a)}),It=[],Mt=!0);try{O.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(a){if(a!="unwind")throw a;qe("Pthread 0x"+O._pthread_self().toString(16)+" completed its main entry point with an `unwind`, keeping the worker alive for asynchronous operation.")}}else r.data.cmd==="cancel"?O._pthread_self()&&O.__emscripten_thread_exit(-1):r.data.target==="setimmediate"||(r.data.cmd==="processProxyingQueue"?Mt?O.executeNotifiedProxyingQueue(r.data.queue):It.push(r.data.queue):r.data.cmd&&(qe("worker.js received unknown command "+r.data.cmd),qe(r.data)))}catch(a){throw qe("worker.js onmessage() captured an uncaught exception: "+a),a&&a.stack&&qe(a.stack),O.__emscripten_thread_crashed&&O.__emscripten_thread_crashed(),a}}; addEventListener('message', (x)=>Ut(x));var Lt=self.onmessage;function xn(){return O}function Dn(r){O=r}xt();var Ee=at(jn()),Mn=function(r,a,l){var s;if((s=r==null?void 0:r.endpoint)!=null&&s.startsWith("http")){let u=`${r==null?void 0:r.endpoint}`,_=u.indexOf("://")+3;return u.substring(_)}else return r!=null&&r.endpoint?`${l}.${r==null?void 0:r.endpoint}`:`${l}.s3.amazonaws.com`};function Na(r,a,l){var u,_,c,f;let s=In(a);return{url:s.path,query:"",host:Mn(r,a,s.bucket),region:(u=r==null?void 0:r.region)!=null?u:"",service:"s3",method:l,accessKeyId:(_=r==null?void 0:r.accessKeyId)!=null?_:"",secretAccessKey:(c=r==null?void 0:r.secretAccessKey)!=null?c:"",sessionToken:(f=r==null?void 0:r.sessionToken)!=null?f:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Wa(r,a=!1){let l="0123456789ABCDEF",s="";for(let u=0;u<r.length;u++){let _=r[u];_>="A"&&_<="Z"||_>="a"&&_<="z"||_>="0"&&_<="9"||_=="_"||_=="-"||_=="~"||_=="."?s+=_:_=="/"?a?s+="%2F":s+=_:(s+="%",s+=l[_.charCodeAt(0)>>4],s+=l[_.charCodeAt(0)&15])}return s}function Ya(r,a=null){var $;let l=($=a==null?void 0:a.contentHash)!=null?$:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",s=new Map;s.set("x-amz-date",r.datetimeNow),s.set("x-amz-content-sha256",l),r.sessionToken&&s.set("x-amz-security-token",r.sessionToken);let u="";a!=null&&a.contentType&&(u+="content-type;"),u+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(u+=";x-amz-security-token");let _=r.method+`
`+Wa(r.url)+`
`+r.query;a!=null&&a.contentType&&(_+=`
content-type:`+(a==null?void 0:a.contentType)),_+=`
host:`+r.host+`
x-amz-content-sha256:`+l+`
x-amz-date:`+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(_+=`
x-amz-security-token:`+r.sessionToken),_+=`

`+u+`
`+l;let c=(0,Ee.sha256)(_),f=`AWS4-HMAC-SHA256
`+r.datetimeNow+`
`+r.dateNow+"/"+r.region+"/"+r.service+`/aws4_request
`+c,p="AWS4"+r.secretAccessKey,k=Ee.sha256.hmac.arrayBuffer(p,r.dateNow),i=Ee.sha256.hmac.arrayBuffer(k,r.region),P=Ee.sha256.hmac.arrayBuffer(i,r.service),z=Ee.sha256.hmac.arrayBuffer(P,"aws4_request"),T=Ee.sha256.hmac(z,f);return s.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+u+", Signature="+T),s}var Xa=function(r,a,l,s=null,u=null){let _=Na(r,a,l),c={contentType:s,contentHash:u?Ee.sha256.hex(u):null};return Ya(_,c)};function Se(r,a,l,s,u=null,_=null){((a==null?void 0:a.accessKeyId)||(a==null?void 0:a.sessionToken))&&(Xa(a,l,s,u,_).forEach((f,p)=>{r.setRequestHeader(p,f)}),u&&r.setRequestHeader("content-type",u))}function In(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let a=r.indexOf("/",5);if(a==-1)throw new Error("URL needs to contain a '/' after the host");let l=r.substring(5,a);if(!l)throw new Error("URL needs to contain a bucket name");let s=r.substring(a);if(!s)throw new Error("URL needs to contain key");return{bucket:l,path:s}}function ke(r,a){var s;let l=In(a);return(s=r==null?void 0:r.endpoint)!=null&&s.startsWith("http")?`${r==null?void 0:r.endpoint}/${l.bucket}`+l.path:"https://"+Mn(r,a,l.bucket)+l.path}var Ln=new TextEncoder,Hn=new TextDecoder("utf-8");function Ot(r,a,l){let s=Ln.encode(l),u=r._malloc(s.byteLength),_=r.HEAPU8.subarray(u,u+s.byteLength);_.set(s),r.HEAPF64[(a>>3)+0]=1,r.HEAPF64[(a>>3)+1]=u,r.HEAPF64[(a>>3)+2]=_.byteLength}function Bt(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Pt(r,a,l,s){let u=r.HEAPU8.subarray(a,a+s*Bt(l));switch(l){case"UINT8":return new Uint8Array(u.buffer,u.byteOffset,s);case"INT8":return new Int8Array(u.buffer,u.byteOffset,s);case"INT32":return new Int32Array(u.buffer,u.byteOffset,s);case"FLOAT":return new Float32Array(u.buffer,u.byteOffset,s);case"DOUBLE":return new Float64Array(u.buffer,u.byteOffset,s);case"VARCHAR":return new Float64Array(u.buffer,u.byteOffset,s);default:return new Array(0)}}function Un(r,a,l){let s=r.HEAPU8.subarray(a,a+l);return new Uint8Array(s.buffer,s.byteOffset,l)}function ot(r,a,l){let s=r.HEAPU8.subarray(a,a+l*8);return new Float64Array(s.buffer,s.byteOffset,l)}function On(r,a,l,s,u,_,c,f){try{let p=r._udfFunctions.get(s);if(!p){Ot(a,l,"Unknown UDF with id: "+s);return}let k=Hn.decode(a.HEAPU8.subarray(u,u+_)),i=JSON.parse(k),P=ot(a,c,f/8),z=x=>{var ie;let X=null;switch(x.validityBuffer!==void 0&&(X=Un(a,P[x.validityBuffer],i.rows)),x.physicalType){case"VARCHAR":{if(x.dataBuffer===null||x.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(x.lengthBuffer===null||x.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let ne=Pt(a,P[x.dataBuffer],x.physicalType,i.rows),N=[],W=ot(a,P[x.lengthBuffer],i.rows);for(let U=0;U<i.rows;++U){if(X!=null&&!X[U]){N.push(null);continue}let ae=a.HEAPU8.subarray(ne[U],ne[U]+W[U]),Ae=Hn.decode(ae);N.push(Ae)}return U=>N[U]}case"STRUCT":{let ne={},N=[];for(let W=0;W<(((ie=x.children)==null?void 0:ie.length)||0);++W){let U=x.children[W],ae=z(U);N.push(Ae=>{ne[U.name]=ae(Ae)})}return X!=null?W=>{if(!X[W])return null;for(let U of N)U(W);return ne}:W=>{for(let U of N)U(W);return ne}}default:{if(x.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+x.physicalType);let ne=Pt(a,P[x.dataBuffer],x.physicalType,i.rows);return X!=null?N=>X[N]?ne[N]:null:N=>ne[N]}}},T=[];for(let x=0;x<i.args.length;++x)T.push(z(i.args[x]));let $=i.rows*Bt(i.ret.physicalType),ee=a._malloc($),te=Pt(a,ee,i.ret.physicalType,i.rows),oe=a._malloc(i.rows),Q=Un(a,oe,i.rows);if(te.length==0||Q.length==0){Ot(a,l,"Can't create physical arrays for result");return}let L=te;i.ret.physicalType=="VARCHAR"&&(L=new Array(i.rows));let Ce=[];for(let x=0;x<i.args.length;++x)Ce.push(null);for(let x=0;x<i.rows;++x){for(let ie=0;ie<i.args.length;++ie)Ce[ie]=T[ie](x);let X=p.func(...Ce);L[x]=X,Q[x]=X==null?0:1}let w=0;switch(i.ret.physicalType){case"VARCHAR":{let x=new Array(0);w=a._malloc(i.rows*Bt("DOUBLE"));let X=ot(a,w,i.rows),ie=0;for(let U=0;U<i.rows;++U){let ae=Ln.encode(L[U]||"");x.push(ae),X[U]=ae.length,ie+=ae.length}let ne=a._malloc(ie),N=a.HEAPU8.subarray(ne,ne+ie),W=0;for(let U=0;U<i.rows;++U){te[U]=W;let ae=x[U];N.subarray(W,W+ae.length).set(ae),W+=ae.length}}}let re=3*8,Ie=a._malloc(re),ge=ot(a,Ie,3);ge[0]=ee,ge[1]=oe,ge[2]=w,a.HEAPF64[(l>>3)+0]=0,a.HEAPF64[(l>>3)+1]=Ie,a.HEAPF64[(l>>3)+2]=0}catch(p){Ot(a,l,p.toString())}}function Ka(){let r=new TextDecoder;return a=>(typeof SharedArrayBuffer<"u"&&a.buffer instanceof SharedArrayBuffer&&(a=new Uint8Array(a)),r.decode(a))}var za=Ka();function be(r,a){console.error(`FAIL WITH: ${a}`),r.ccall("duckdb_web_fail_with",null,["string"],[a])}function ce(r,a,l){return za(r.HEAPU8.subarray(a,a+l))}function Nt(r,a,l,s){let u=r.stackSave(),_=r.stackAlloc(3*8);l.unshift("number"),s.unshift(_),r.ccall(a,null,l,s);let c=r.HEAPF64[(_>>3)+0],f=r.HEAPF64[(_>>3)+1],p=r.HEAPF64[(_>>3)+2];return r.stackRestore(u),[c,f,p]}function Wt(r){r.ccall("duckdb_web_clear_response",null,[],[])}var M={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,a){try{let l=M._fileInfoCache.get(a),[s,u,_]=Nt(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[a,(l==null?void 0:l.cacheEpoch)||0]);if(s!==0)return null;if(_===0)return l;let c=ce(r,u,_);Wt(r);let f=JSON.parse(c);if(f==null)return null;let p={...f,blob:null};return M._fileInfoCache.set(a,p),p}catch(l){return null}},getGlobalFileInfo(r){var a;try{let[l,s,u]=Nt(r,"duckdb_web_get_global_file_info",["number"],[((a=M._globalFileInfo)==null?void 0:a.cacheEpoch)||0]);if(l!==0)return null;if(u===0)return M._globalFileInfo;let _=ce(r,s,u);Wt(r);let c=JSON.parse(_);return c==null?null:(M._globalFileInfo={...c,blob:null},M._globalFileInfo)}catch(l){return null}},testPlatformFeature:(r,a)=>{switch(a){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${a}`),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,a,l)=>{var s;try{M._fileInfoCache.delete(a);let u=M.getFileInfo(r,a);switch(u==null?void 0:u.dataProtocol){case 4:case 5:{if(l&1&&l&2)throw new Error(`Opening file ${u.fileName} failed: cannot open file with both read and write flags set`);if(l&32)throw new Error(`Opening file ${u.fileName} failed: appending to HTTP/S3 files is not supported`);if(l&2){let c=new XMLHttpRequest;if(u.dataProtocol==5?(c.open("HEAD",ke(u.s3Config,u.dataUrl),!1),Se(c,u.s3Config,u.dataUrl,"HEAD")):c.open("HEAD",u.dataUrl,!1),c.send(null),c.status!=200&&c.status!=404)throw new Error(`Opening file ${u.fileName} failed: Unexpected return status from server (${c.status})`);if(c.status==404&&!(l&8||l&16))throw new Error(`Opening file ${u.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let f=r._malloc(1),p=new Uint8Array;r.HEAPU8.set(p,f);let k=r._malloc(2*8);return r.HEAPF64[(k>>3)+0]=1,r.HEAPF64[(k>>3)+1]=f,k}else if(l!=1)throw new Error(`Opening file ${u.fileName} failed: unsupported file flags: ${l}`);let _=null;try{let c=new XMLHttpRequest;u.dataProtocol==5?(c.open("HEAD",ke(u.s3Config,u.dataUrl),!1),Se(c,u.s3Config,u.dataUrl,"HEAD")):c.open("HEAD",u.dataUrl,!1),c.setRequestHeader("Range","bytes=0-"),c.send(null);let f=c.getResponseHeader("Content-Length");if(c.status==206&&f!==null){let p=r._malloc(16);return r.HEAPF64[(p>>3)+0]=+f,r.HEAPF64[(p>>3)+1]=0,p}}catch(c){_=c,console.warn(`HEAD request with range header failed: ${c}`)}if(u.allowFullHttpReads){console.warn(`falling back to full HTTP read for: ${u.dataUrl}`);let c=new XMLHttpRequest;if(u.dataProtocol==5?(c.open("GET",ke(u.s3Config,u.dataUrl),!1),Se(c,u.s3Config,u.dataUrl,"GET")):c.open("GET",u.dataUrl,!1),c.responseType="arraybuffer",c.send(null),c.status==200){let f=r._malloc(c.response.byteLength),p=new Uint8Array(c.response,0,c.response.byteLength);r.HEAPU8.set(p,f);let k=r._malloc(2*8);return r.HEAPF64[(k>>3)+0]=c.response.byteLength,r.HEAPF64[(k>>3)+1]=f,k}}if(_!=null)throw new Error(`Reading file ${u.fileName} failed with error: ${_}`);return 0}case 2:{let _=(s=M._files)==null?void 0:s.get(u.fileName);if(_){let p=r._malloc(16);return r.HEAPF64[(p>>3)+0]=_.size,r.HEAPF64[(p>>3)+1]=0,p}console.warn(`Buffering missing file: ${u.fileName}`);let c=r._malloc(2*8),f=r._malloc(1);return r.HEAPF64[(c>>3)+0]=1,r.HEAPF64[(c>>3)+1]=f,c}}}catch(u){console.error(u.toString()),be(r,u.toString())}return 0},glob:(r,a,l)=>{try{let s=ce(r,a,l);if(s.startsWith("http")||s.startsWith("s3://")){let u=new XMLHttpRequest;if(s.startsWith("s3://")){let _=M.getGlobalFileInfo(r);u.open("HEAD",ke(_==null?void 0:_.s3Config,s),!1),Se(u,_==null?void 0:_.s3Config,s,"HEAD")}else u.open("HEAD",s,!1);if(u.send(null),u.status!=200&&u.status!==206){be(r,`HEAD request failed: ${s}`);return}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[s])}}catch(s){return be(r,s.toString()),0}},checkFile:(r,a,l)=>{try{let s=ce(r,a,l);if(s.startsWith("http")||s.startsWith("s3://")){let u=new XMLHttpRequest;if(s.startsWith("s3://")){let _=M.getGlobalFileInfo(r);u.open("HEAD",ke(_==null?void 0:_.s3Config,s),!1),Se(u,_==null?void 0:_.s3Config,s,"HEAD")}else u.open("HEAD",s,!1);return u.send(null),u.status==206||u.status==200}}catch(s){return!1}return!1},syncFile:(r,a)=>{},closeFile:(r,a)=>{var s;let l=M.getFileInfo(r,a);switch(M._fileInfoCache.delete(a),l==null?void 0:l.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let u=(s=M._files)==null?void 0:s.get(l.fileName);if(!u)throw new Error(`No OPFS access handle registered with name: ${l.fileName}`);return u.flush()}}},truncateFile:(r,a,l)=>{var u;let s=M.getFileInfo(r,a);switch(s==null?void 0:s.dataProtocol){case 4:be(r,"Cannot truncate a http file");return;case 5:be(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:be(r,"truncateFile not implemented");return;case 3:{let _=(u=M._files)==null?void 0:u.get(s.fileName);if(!_)throw new Error(`No OPFS access handle registered with name: ${s.fileName}`);return _.truncate(l)}}return 0},readFile(r,a,l,s,u){var _,c;try{let f=M.getFileInfo(r,a);switch(f==null?void 0:f.dataProtocol){case 4:case 5:{if(!f.dataUrl)throw new Error(`Missing data URL for file ${a}`);try{let p=new XMLHttpRequest;if(f.dataProtocol==5?(p.open("GET",ke(f==null?void 0:f.s3Config,f.dataUrl),!1),Se(p,f==null?void 0:f.s3Config,f.dataUrl,"GET")):p.open("GET",f.dataUrl,!1),p.responseType="arraybuffer",p.setRequestHeader("Range",`bytes=${u}-${u+s-1}`),p.send(null),p.status==206||p.status==200&&s==p.response.byteLength&&u==0){let k=new Uint8Array(p.response,0,Math.min(p.response.byteLength,s));return r.HEAPU8.set(k,l),k.byteLength}else throw p.status==200?new Error(`Range request for ${f.dataUrl} did not return a partial response: ${p.status} "${p.statusText}"`):new Error(`Range request for ${f.dataUrl} did returned non-success status: ${p.status} "${p.statusText}"`)}catch(p){throw new Error(`Range request for ${f.dataUrl} failed with error: ${p}"`)}}case 2:{let p=(_=M._files)==null?void 0:_.get(f.fileName);if(!p)throw new Error(`No HTML5 file registered with name: ${f.fileName}`);let k=p.slice(u,u+s),i=new Uint8Array(new FileReaderSync().readAsArrayBuffer(k));return r.HEAPU8.set(i,l),i.byteLength}case 3:{let p=(c=M._files)==null?void 0:c.get(f.fileName);if(!p)throw new Error(`No OPFS access handle registered with name: ${f.fileName}`);let k=r.HEAPU8.subarray(l,l+s);return p.read(k,{at:u})}}return 0}catch(f){return be(r,f.toString()),0}},writeFile:(r,a,l,s,u)=>{var c;let _=M.getFileInfo(r,a);switch(_==null?void 0:_.dataProtocol){case 4:return be(r,"Cannot write to HTTP file"),0;case 5:{let f=r.HEAPU8.subarray(l,l+s),p=new XMLHttpRequest;return p.open("PUT",ke(_==null?void 0:_.s3Config,_.dataUrl),!1),Se(p,_==null?void 0:_.s3Config,_.dataUrl,"PUT","",f),p.send(f),s}case 2:return be(r,"cannot write using the html5 file reader api"),0;case 3:{let f=(c=M._files)==null?void 0:c.get(_.fileName);if(!f)throw new Error(`No OPFS access handle registered with name: ${_.fileName}`);let p=r.HEAPU8.subarray(l,l+s);return f.write(p,{at:u})}}return 0},getLastFileModificationTime:(r,a)=>{var s;let l=M.getFileInfo(r,a);switch(l==null?void 0:l.dataProtocol){case 2:{if(!((s=M._files)==null?void 0:s.get(l.fileName)))throw Error(`No handle available for file: ${l.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,a,l)=>{let s=ce(r,a,l);return console.log(`checkDirectory: ${s}`),!1},createDirectory:(r,a,l)=>{let s=ce(r,a,l);console.log(`createDirectory: ${s}`)},removeDirectory:(r,a,l)=>{let s=ce(r,a,l);console.log(`removeDirectory: ${s}`)},listDirectoryEntries:(r,a,l)=>{let s=ce(r,a,l);return console.log(`listDirectoryEntries: ${s}`),!1},moveFile:(r,a,l,s,u)=>{var p,k;let _=ce(r,a,l),c=ce(r,s,u),f=(p=M._files)==null?void 0:p.get(_);f!==void 0&&(M._files.delete(f),M._files.set(c,f));for(let[i,P]of((k=M._fileInfoCache)==null?void 0:k.entries())||[])if(P.dataUrl==_){M._fileInfoCache.delete(i);break}return!0},removeFile:(r,a,l)=>{},callScalarUDF:(r,a,l,s,u,_,c)=>{On(M,r,a,l,s,u,_,c)}};globalThis.DUCKDB_RUNTIME={};for(let r of Object.getOwnPropertyNames(M))r!="constructor"&&(globalThis.DUCKDB_RUNTIME[r]=Object.getOwnPropertyDescriptor(M,r).value);globalThis.onmessage=r=>{if(r.data.cmd==="load"){let a=xn();a.wasmModule=r.data.wasmModule,a.wasmMemory=r.data.wasmMemory,a.buffer=a.wasmMemory.buffer,a.ENVIRONMENT_IS_PTHREAD=!0,Ct(a).then(function(l){Dn(l)})}else if(r.data.cmd==="registerFileHandle")globalThis.DUCKDB_RUNTIME._files=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._files.set(r.data.fileName,r.data.fileHandle);else if(r.data.cmd==="dropFileHandle")globalThis.DUCKDB_RUNTIME._files=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._files.delete(r.data.fileName);else if(r.data.cmd==="registerUDFFunction")globalThis.DUCKDB_RUNTIME._udfFunctions=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._udfFunctions.set(r.data.udf.name,r.data.udf);else if(r.data.cmd==="dropUDFFunctions"){globalThis.DUCKDB_RUNTIME._udfFunctions=globalThis.DUCKDB_RUNTIME._files||new Map;for(let a of globalThis.DUCKDB_RUNTIME._udfFunctions.keys())globalThis.DUCKDB_RUNTIME._udfFunctions.get(a).connection_id==r.data.connectionId&&globalThis.DUCKDB_RUNTIME._udfFunctions.delete(a)}else Lt(r)};})();
/**
 * @license
 * Copyright 2015 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
