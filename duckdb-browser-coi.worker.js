"use strict";var duckdb=(()=>{var Dp=Object.create;var Os=Object.defineProperty;var Op=Object.getOwnPropertyDescriptor;var Rp=Object.getOwnPropertyNames;var Mp=Object.getPrototypeOf,kp=Object.prototype.hasOwnProperty;var Cp=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var vu=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),In=(r,t)=>{for(var e in t)Os(r,e,{get:t[e],enumerable:!0})},Su=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Rp(t))!kp.call(r,i)&&i!==e&&Os(r,i,{get:()=>t[i],enumerable:!(n=Op(t,i))||n.enumerable});return r};var Ca=(r,t,e)=>(e=r!=null?Dp(Mp(r)):{},Su(t||!r||!r.__esModule?Os(e,"default",{value:r,enumerable:!0}):e,r)),Lp=r=>Su(Os({},"__esModule",{value:!0}),r);var zu=vu((Yg,ks)=>{var Iu,Tu,Au,Eu,Fu,xu,Bu,Du,Ou,Rs,La,Ru,Mu,ku,Gn,Cu,Lu,Uu,Nu,ju,Pu,Hu,Vu,Wu,Ms;(function(r){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(n){r(e(t,e(n)))}):typeof ks=="object"&&typeof ks.exports=="object"?r(e(t,e(ks.exports))):r(e(t));function e(n,i){return n!==t&&(typeof Object.create=="function"?Object.defineProperty(n,"__esModule",{value:!0}):n.__esModule=!0),function(s,o){return n[s]=i?i(s,o):o}}})(function(r){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(n[s]=i[s])};Iu=function(n,i){if(typeof i!="function"&&i!==null)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");t(n,i);function s(){this.constructor=n}n.prototype=i===null?Object.create(i):(s.prototype=i.prototype,new s)},Tu=Object.assign||function(n){for(var i,s=1,o=arguments.length;s<o;s++){i=arguments[s];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(n[l]=i[l])}return n},Au=function(n,i){var s={};for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&i.indexOf(o)<0&&(s[o]=n[o]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var l=0,o=Object.getOwnPropertySymbols(n);l<o.length;l++)i.indexOf(o[l])<0&&Object.prototype.propertyIsEnumerable.call(n,o[l])&&(s[o[l]]=n[o[l]]);return s},Eu=function(n,i,s,o){var l=arguments.length,d=l<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,s):o,h;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")d=Reflect.decorate(n,i,s,o);else for(var u=n.length-1;u>=0;u--)(h=n[u])&&(d=(l<3?h(d):l>3?h(i,s,d):h(i,s))||d);return l>3&&d&&Object.defineProperty(i,s,d),d},Fu=function(n,i){return function(s,o){i(s,o,n)}},xu=function(n,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(n,i)},Bu=function(n,i,s,o){function l(d){return d instanceof s?d:new s(function(h){h(d)})}return new(s||(s=Promise))(function(d,h){function u(T){try{w(o.next(T))}catch(tt){h(tt)}}function g(T){try{w(o.throw(T))}catch(tt){h(tt)}}function w(T){T.done?d(T.value):l(T.value).then(u,g)}w((o=o.apply(n,i||[])).next())})},Du=function(n,i){var s={label:0,sent:function(){if(d[0]&1)throw d[1];return d[1]},trys:[],ops:[]},o,l,d,h;return h={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(h[Symbol.iterator]=function(){return this}),h;function u(w){return function(T){return g([w,T])}}function g(w){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,l&&(d=w[0]&2?l.return:w[0]?l.throw||((d=l.return)&&d.call(l),0):l.next)&&!(d=d.call(l,w[1])).done)return d;switch(l=0,d&&(w=[w[0]&2,d.value]),w[0]){case 0:case 1:d=w;break;case 4:return s.label++,{value:w[1],done:!1};case 5:s.label++,l=w[1],w=[0];continue;case 7:w=s.ops.pop(),s.trys.pop();continue;default:if(d=s.trys,!(d=d.length>0&&d[d.length-1])&&(w[0]===6||w[0]===2)){s=0;continue}if(w[0]===3&&(!d||w[1]>d[0]&&w[1]<d[3])){s.label=w[1];break}if(w[0]===6&&s.label<d[1]){s.label=d[1],d=w;break}if(d&&s.label<d[2]){s.label=d[2],s.ops.push(w);break}d[2]&&s.ops.pop(),s.trys.pop();continue}w=i.call(n,s)}catch(T){w=[6,T],l=0}finally{o=d=0}if(w[0]&5)throw w[1];return{value:w[0]?w[1]:void 0,done:!0}}},Ou=function(n,i){for(var s in n)s!=="default"&&!Object.prototype.hasOwnProperty.call(i,s)&&Ms(i,n,s)},Ms=Object.create?function(n,i,s,o){o===void 0&&(o=s);var l=Object.getOwnPropertyDescriptor(i,s);(!l||("get"in l?!i.__esModule:l.writable||l.configurable))&&(l={enumerable:!0,get:function(){return i[s]}}),Object.defineProperty(n,o,l)}:function(n,i,s,o){o===void 0&&(o=s),n[o]=i[s]},Rs=function(n){var i=typeof Symbol=="function"&&Symbol.iterator,s=i&&n[i],o=0;if(s)return s.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&o>=n.length&&(n=void 0),{value:n&&n[o++],done:!n}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},La=function(n,i){var s=typeof Symbol=="function"&&n[Symbol.iterator];if(!s)return n;var o=s.call(n),l,d=[],h;try{for(;(i===void 0||i-- >0)&&!(l=o.next()).done;)d.push(l.value)}catch(u){h={error:u}}finally{try{l&&!l.done&&(s=o.return)&&s.call(o)}finally{if(h)throw h.error}}return d},Ru=function(){for(var n=[],i=0;i<arguments.length;i++)n=n.concat(La(arguments[i]));return n},Mu=function(){for(var n=0,i=0,s=arguments.length;i<s;i++)n+=arguments[i].length;for(var o=Array(n),l=0,i=0;i<s;i++)for(var d=arguments[i],h=0,u=d.length;h<u;h++,l++)o[l]=d[h];return o},ku=function(n,i,s){if(s||arguments.length===2)for(var o=0,l=i.length,d;o<l;o++)(d||!(o in i))&&(d||(d=Array.prototype.slice.call(i,0,o)),d[o]=i[o]);return n.concat(d||Array.prototype.slice.call(i))},Gn=function(n){return this instanceof Gn?(this.v=n,this):new Gn(n)},Cu=function(n,i,s){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=s.apply(n,i||[]),l,d=[];return l={},h("next"),h("throw"),h("return"),l[Symbol.asyncIterator]=function(){return this},l;function h(nt){o[nt]&&(l[nt]=function(yt){return new Promise(function(gt,xt){d.push([nt,yt,gt,xt])>1||u(nt,yt)})})}function u(nt,yt){try{g(o[nt](yt))}catch(gt){tt(d[0][3],gt)}}function g(nt){nt.value instanceof Gn?Promise.resolve(nt.value.v).then(w,T):tt(d[0][2],nt)}function w(nt){u("next",nt)}function T(nt){u("throw",nt)}function tt(nt,yt){nt(yt),d.shift(),d.length&&u(d[0][0],d[0][1])}},Lu=function(n){var i,s;return i={},o("next"),o("throw",function(l){throw l}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(l,d){i[l]=n[l]?function(h){return(s=!s)?{value:Gn(n[l](h)),done:l==="return"}:d?d(h):h}:d}},Uu=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=n[Symbol.asyncIterator],s;return i?i.call(n):(n=typeof Rs=="function"?Rs(n):n[Symbol.iterator](),s={},o("next"),o("throw"),o("return"),s[Symbol.asyncIterator]=function(){return this},s);function o(d){s[d]=n[d]&&function(h){return new Promise(function(u,g){h=n[d](h),l(u,g,h.done,h.value)})}}function l(d,h,u,g){Promise.resolve(g).then(function(w){d({value:w,done:u})},h)}},Nu=function(n,i){return Object.defineProperty?Object.defineProperty(n,"raw",{value:i}):n.raw=i,n};var e=Object.create?function(n,i){Object.defineProperty(n,"default",{enumerable:!0,value:i})}:function(n,i){n.default=i};ju=function(n){if(n&&n.__esModule)return n;var i={};if(n!=null)for(var s in n)s!=="default"&&Object.prototype.hasOwnProperty.call(n,s)&&Ms(i,n,s);return e(i,n),i},Pu=function(n){return n&&n.__esModule?n:{default:n}},Hu=function(n,i,s,o){if(s==="a"&&!o)throw new TypeError("Private accessor was defined without a getter");if(typeof i=="function"?n!==i||!o:!i.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return s==="m"?o:s==="a"?o.call(n):o?o.value:i.get(n)},Vu=function(n,i,s,o,l){if(o==="m")throw new TypeError("Private method is not writable");if(o==="a"&&!l)throw new TypeError("Private accessor was defined without a setter");if(typeof i=="function"?n!==i||!l:!i.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return o==="a"?l.call(n,s):l?l.value=s:i.set(n,s),s},Wu=function(n,i){if(i===null||typeof i!="object"&&typeof i!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof n=="function"?i===n:n.has(i)},r("__extends",Iu),r("__assign",Tu),r("__rest",Au),r("__decorate",Eu),r("__param",Fu),r("__metadata",xu),r("__awaiter",Bu),r("__generator",Du),r("__exportStar",Ou),r("__createBinding",Ms),r("__values",Rs),r("__read",La),r("__spread",Ru),r("__spreadArrays",Mu),r("__spreadArray",ku),r("__await",Gn),r("__asyncGenerator",Cu),r("__asyncDelegator",Lu),r("__asyncValues",Uu),r("__makeTemplateObject",Nu),r("__importStar",ju),r("__importDefault",Pu),r("__classPrivateFieldGet",Hu),r("__classPrivateFieldSet",Vu),r("__classPrivateFieldIn",Wu)})});var Lf=vu((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,t){return function(e){return new Sha256(t,!0).update(e)[r]()}},createMethod=function(r){var t=createOutputMethod("hex",r);NODE_JS&&(t=nodeWrap(t,r)),t.create=function(){return new Sha256(r)},t.update=function(i){return t.create().update(i)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,r)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[r]()}},createHmacMethod=function(r){var t=createHmacOutputMethod("hex",r);t.create=function(i){return new HmacSha256(i,r)},t.update=function(i,s){return t.create(i).update(s)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,r)}return t};function Sha256(r,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var t,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,i=0,s,o=r.length,l=this.blocks;i<o;){if(this.hashed&&(this.hashed=!1,l[0]=this.block,l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0),t)for(s=this.start;i<o&&s<64;++i)l[s>>2]|=r[i]<<SHIFT[s++&3];else for(s=this.start;i<o&&s<64;++i)n=r.charCodeAt(i),n<128?l[s>>2]|=n<<SHIFT[s++&3]:n<2048?(l[s>>2]|=(192|n>>6)<<SHIFT[s++&3],l[s>>2]|=(128|n&63)<<SHIFT[s++&3]):n<55296||n>=57344?(l[s>>2]|=(224|n>>12)<<SHIFT[s++&3],l[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],l[s>>2]|=(128|n&63)<<SHIFT[s++&3]):(n=65536+((n&1023)<<10|r.charCodeAt(++i)&1023),l[s>>2]|=(240|n>>18)<<SHIFT[s++&3],l[s>>2]|=(128|n>>12&63)<<SHIFT[s++&3],l[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],l[s>>2]|=(128|n&63)<<SHIFT[s++&3]);this.lastByteIndex=s,this.bytes+=s-this.start,s>=64?(this.block=l[16],this.start=s-64,this.hash(),this.hashed=!0):this.start=s}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,t=this.lastByteIndex;r[16]=this.block,r[t>>2]|=EXTRA[t&3],this.block=r[16],t>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,l=this.h7,d=this.blocks,h,u,g,w,T,tt,nt,yt,gt,xt,ft;for(h=16;h<64;++h)T=d[h-15],u=(T>>>7|T<<25)^(T>>>18|T<<14)^T>>>3,T=d[h-2],g=(T>>>17|T<<15)^(T>>>19|T<<13)^T>>>10,d[h]=d[h-16]+u+d[h-7]+g<<0;for(ft=t&e,h=0;h<64;h+=4)this.first?(this.is224?(yt=300032,T=d[0]-1413257819,l=T-150054599<<0,n=T+24177077<<0):(yt=704751109,T=d[0]-210244248,l=T-1521486534<<0,n=T+143694565<<0),this.first=!1):(u=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),g=(i>>>6|i<<26)^(i>>>11|i<<21)^(i>>>25|i<<7),yt=r&t,w=yt^r&e^ft,nt=i&s^~i&o,T=l+g+nt+K[h]+d[h],tt=u+w,l=n+T<<0,n=T+tt<<0),u=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),g=(l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7),gt=n&r,w=gt^n&t^yt,nt=l&i^~l&s,T=o+g+nt+K[h+1]+d[h+1],tt=u+w,o=e+T<<0,e=T+tt<<0,u=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),g=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),xt=e&n,w=xt^e&r^gt,nt=o&l^~o&i,T=s+g+nt+K[h+2]+d[h+2],tt=u+w,s=t+T<<0,t=T+tt<<0,u=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),g=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),ft=t&e,w=ft^t&n^xt,nt=s&o^~s&l,T=i+g+nt+K[h+3]+d[h+3],tt=u+w,i=r+T<<0,r=T+tt<<0;this.h0=this.h0+r<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+i<<0,this.h5=this.h5+s<<0,this.h6=this.h6+o<<0,this.h7=this.h7+l<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,l=this.h7,d=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15];return this.is224||(d+=HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]),d},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,l=this.h7,d=[r>>24&255,r>>16&255,r>>8&255,r&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,i>>24&255,i>>16&255,i>>8&255,i&255,s>>24&255,s>>16&255,s>>8&255,s&255,o>>24&255,o>>16&255,o>>8&255,o&255];return this.is224||d.push(l>>24&255,l>>16&255,l>>8&255,l&255),d},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),t=new DataView(r);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),r};function HmacSha256(r,t,e){var n,i=typeof r;if(i==="string"){var s=[],o=r.length,l=0,d;for(n=0;n<o;++n)d=r.charCodeAt(n),d<128?s[l++]=d:d<2048?(s[l++]=192|d>>6,s[l++]=128|d&63):d<55296||d>=57344?(s[l++]=224|d>>12,s[l++]=128|d>>6&63,s[l++]=128|d&63):(d=65536+((d&1023)<<10|r.charCodeAt(++n)&1023),s[l++]=240|d>>18,s[l++]=128|d>>12&63,s[l++]=128|d>>6&63,s[l++]=128|d&63);r=s}else if(i==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(t,!0).update(r).array());var h=[],u=[];for(n=0;n<64;++n){var g=r[n]||0;h[n]=92^g,u[n]=54^g}Sha256.call(this,t,e),this.update(u),this.oKeyPad=h,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var xy={};In(xy,{registerWorker:()=>jf});var Yu=Ca(zu(),1),{__extends:Gg,__assign:$g,__rest:Gu,__decorate:Xg,__param:Kg,__metadata:Jg,__awaiter:E,__generator:qg,__exportStar:Qg,__createBinding:Zg,__values:t0,__read:e0,__spread:r0,__spreadArrays:n0,__spreadArray:i0,__await:X,__asyncGenerator:me,__asyncDelegator:$n,__asyncValues:Ne,__makeTemplateObject:s0,__importStar:o0,__importDefault:a0,__classPrivateFieldGet:l0,__classPrivateFieldSet:c0,__classPrivateFieldIn:u0}=Yu.default;var Va={};In(Va,{compareArrayLike:()=>Ha,joinUint8Arrays:()=>Oe,memcpy:()=>Xn,rebaseValueOffsets:()=>Ci,toArrayBufferView:()=>q,toArrayBufferViewAsyncIterator:()=>qe,toArrayBufferViewIterator:()=>pr,toBigInt64Array:()=>Wp,toBigUint64Array:()=>Gp,toFloat32Array:()=>$p,toFloat32ArrayAsyncIterator:()=>c_,toFloat32ArrayIterator:()=>e_,toFloat64Array:()=>Xp,toFloat64ArrayAsyncIterator:()=>u_,toFloat64ArrayIterator:()=>r_,toInt16Array:()=>Vp,toInt16ArrayAsyncIterator:()=>s_,toInt16ArrayIterator:()=>qp,toInt32Array:()=>Tn,toInt32ArrayAsyncIterator:()=>o_,toInt32ArrayIterator:()=>Qp,toInt8Array:()=>Hp,toInt8ArrayAsyncIterator:()=>i_,toInt8ArrayIterator:()=>Jp,toUint16Array:()=>zp,toUint16ArrayAsyncIterator:()=>a_,toUint16ArrayIterator:()=>Zp,toUint32Array:()=>Yp,toUint32ArrayAsyncIterator:()=>l_,toUint32ArrayIterator:()=>t_,toUint8Array:()=>j,toUint8ArrayAsyncIterator:()=>Pa,toUint8ArrayIterator:()=>ja,toUint8ClampedArray:()=>Kp,toUint8ClampedArrayAsyncIterator:()=>d_,toUint8ClampedArrayIterator:()=>n_});var Up=new TextDecoder("utf-8"),Mi=r=>Up.decode(r),Np=new TextEncoder,en=r=>Np.encode(r);var[h0,Cs]=(()=>{let r=()=>{throw new Error("BigInt is not available in this environment")};function t(){throw r()}return t.asIntN=()=>{throw r()},t.asUintN=()=>{throw r()},typeof BigInt<"u"?[BigInt,!0]:[t,!1]})(),[je,p0]=(()=>{let r=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[Pe,_0]=(()=>{let r=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var jp=r=>typeof r=="number",$u=r=>typeof r=="boolean",$t=r=>typeof r=="function",fe=r=>r!=null&&Object(r)===r,Ke=r=>fe(r)&&$t(r.then);var Je=r=>fe(r)&&$t(r[Symbol.iterator]),He=r=>fe(r)&&$t(r[Symbol.asyncIterator]),Ls=r=>fe(r)&&fe(r.schema);var Us=r=>fe(r)&&"done"in r&&"value"in r;var Ns=r=>fe(r)&&$t(r.stat)&&jp(r.fd);var js=r=>fe(r)&&ki(r.body),Ps=r=>"_getDOMStream"in r&&"_getNodeStream"in r,Xu=r=>fe(r)&&$t(r.abort)&&$t(r.getWriter)&&!Ps(r),ki=r=>fe(r)&&$t(r.cancel)&&$t(r.getReader)&&!Ps(r),Ku=r=>fe(r)&&$t(r.end)&&$t(r.write)&&$u(r.writable)&&!Ps(r),Hs=r=>fe(r)&&$t(r.read)&&$t(r.pipe)&&$u(r.readable)&&!Ps(r),Ju=r=>fe(r)&&$t(r.clear)&&$t(r.bytes)&&$t(r.position)&&$t(r.setPosition)&&$t(r.capacity)&&$t(r.getBufferIdentifier)&&$t(r.createLong);var Na=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function Pp(r){let t=r[0]?[r[0]]:[],e,n,i,s;for(let o,l,d=0,h=0,u=r.length;++d<u;){if(o=t[h],l=r[d],!o||!l||o.buffer!==l.buffer||l.byteOffset<o.byteOffset){l&&(t[++h]=l);continue}if({byteOffset:e,byteLength:i}=o,{byteOffset:n,byteLength:s}=l,e+i<n||n+s<e){l&&(t[++h]=l);continue}t[h]=new Uint8Array(o.buffer,e,n-e+s)}return t}function Xn(r,t,e=0,n=t.byteLength){let i=r.byteLength,s=new Uint8Array(r.buffer,r.byteOffset,i),o=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,i));return s.set(o,e),r}function Oe(r,t){let e=Pp(r),n=e.reduce((u,g)=>u+g.byteLength,0),i,s,o,l=0,d=-1,h=Math.min(t||Number.POSITIVE_INFINITY,n);for(let u=e.length;++d<u;){if(i=e[d],s=i.subarray(0,Math.min(i.length,h-l)),h<=l+s.length){s.length<i.length?e[d]=i.subarray(s.length):s.length===i.length&&d++,o?Xn(o,s,l):o=s;break}Xn(o||(o=new Uint8Array(h)),s,l),l+=s.length}return[o||new Uint8Array(0),e.slice(d),n-(o?o.byteLength:0)]}function q(r,t){let e=Us(t)?t.value:t;return e instanceof r?r===Uint8Array?new r(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=en(e)),e instanceof ArrayBuffer?new r(e):e instanceof Na?new r(e):Ju(e)?q(r,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new r(0):new r(e.buffer,e.byteOffset,e.byteLength/r.BYTES_PER_ELEMENT):r.from(e)):new r(0)}var Hp=r=>q(Int8Array,r),Vp=r=>q(Int16Array,r),Tn=r=>q(Int32Array,r),Wp=r=>q(je,r),j=r=>q(Uint8Array,r),zp=r=>q(Uint16Array,r),Yp=r=>q(Uint32Array,r),Gp=r=>q(Pe,r),$p=r=>q(Float32Array,r),Xp=r=>q(Float64Array,r),Kp=r=>q(Uint8ClampedArray,r),Ua=r=>(r.next(),r);function*pr(r,t){let e=function*(i){yield i},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Na?e(t):Je(t)?t:e(t);return yield*Ua(function*(i){let s=null;do s=i.next(yield q(r,s));while(!s.done)}(n[Symbol.iterator]())),new r}var Jp=r=>pr(Int8Array,r),qp=r=>pr(Int16Array,r),Qp=r=>pr(Int32Array,r),ja=r=>pr(Uint8Array,r),Zp=r=>pr(Uint16Array,r),t_=r=>pr(Uint32Array,r),e_=r=>pr(Float32Array,r),r_=r=>pr(Float64Array,r),n_=r=>pr(Uint8ClampedArray,r);function qe(r,t){return me(this,arguments,function*(){if(Ke(t))return yield X(yield X(yield*$n(Ne(qe(r,yield X(t))))));let n=function(o){return me(this,arguments,function*(){yield yield X(yield X(o))})},i=function(o){return me(this,arguments,function*(){yield X(yield*$n(Ne(Ua(function*(l){let d=null;do d=l.next(yield d==null?void 0:d.value);while(!d.done)}(o[Symbol.iterator]())))))})},s=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Na?n(t):Je(t)?i(t):He(t)?t:n(t);return yield X(yield*$n(Ne(Ua(function(o){return me(this,arguments,function*(){let l=null;do l=yield X(o.next(yield yield X(q(r,l))));while(!l.done)})}(s[Symbol.asyncIterator]()))))),yield X(new r)})}var i_=r=>qe(Int8Array,r),s_=r=>qe(Int16Array,r),o_=r=>qe(Int32Array,r),Pa=r=>qe(Uint8Array,r),a_=r=>qe(Uint16Array,r),l_=r=>qe(Uint32Array,r),c_=r=>qe(Float32Array,r),u_=r=>qe(Float64Array,r),d_=r=>qe(Uint8ClampedArray,r);function Ci(r,t,e){if(r!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=r}return e}function Ha(r,t){let e=0,n=r.length;if(n!==t.length)return!1;if(n>0)do if(r[e]!==t[e])return!1;while(++e<n);return!0}var ee={fromIterable(r){return Vs(f_(r))},fromAsyncIterable(r){return Vs(h_(r))},fromDOMStream(r){return Vs(p_(r))},fromNodeStream(r){return Vs(__(r))},toDOMStream(r,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(r,t){throw new Error('"toNodeStream" not available in this environment')}},Vs=r=>(r.next(),r);function*f_(r){let t,e=!1,n=[],i,s,o,l=0;function d(){return s==="peek"?Oe(n,o)[0]:([i,n,l]=Oe(n,o),i)}({cmd:s,size:o}=yield null);let h=ja(r)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(o-l)?h.next():h.next(o-l),!t&&i.byteLength>0&&(n.push(i),l+=i.byteLength),t||o<=l)do({cmd:s,size:o}=yield d());while(o<l);while(!t)}catch(u){(e=!0)&&typeof h.throw=="function"&&h.throw(u)}finally{e===!1&&typeof h.return=="function"&&h.return(null)}return null}function h_(r){return me(this,arguments,function*(){let e,n=!1,i=[],s,o,l,d=0;function h(){return o==="peek"?Oe(i,l)[0]:([s,i,d]=Oe(i,l),s)}({cmd:o,size:l}=yield yield X(null));let u=Pa(r)[Symbol.asyncIterator]();try{do if({done:e,value:s}=Number.isNaN(l-d)?yield X(u.next()):yield X(u.next(l-d)),!e&&s.byteLength>0&&(i.push(s),d+=s.byteLength),e||l<=d)do({cmd:o,size:l}=yield yield X(h()));while(l<d);while(!e)}catch(g){(n=!0)&&typeof u.throw=="function"&&(yield X(u.throw(g)))}finally{n===!1&&typeof u.return=="function"&&(yield X(u.return(new Uint8Array(0))))}return yield X(null)})}function p_(r){return me(this,arguments,function*(){let e=!1,n=!1,i=[],s,o,l,d=0;function h(){return o==="peek"?Oe(i,l)[0]:([s,i,d]=Oe(i,l),s)}({cmd:o,size:l}=yield yield X(null));let u=new za(r);try{do if({done:e,value:s}=Number.isNaN(l-d)?yield X(u.read()):yield X(u.read(l-d)),!e&&s.byteLength>0&&(i.push(j(s)),d+=s.byteLength),e||l<=d)do({cmd:o,size:l}=yield yield X(h()));while(l<d);while(!e)}catch(g){(n=!0)&&(yield X(u.cancel(g)))}finally{n===!1?yield X(u.cancel()):r.locked&&u.releaseLock()}return yield X(null)})}var za=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return E(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return E(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=j(e)),e})}},Wa=(r,t)=>{let e=i=>n([t,i]),n;return[t,e,new Promise(i=>(n=i)&&r.once(t,e))]};function __(r){return me(this,arguments,function*(){let e=[],n="error",i=!1,s=null,o,l,d=0,h=[],u;function g(){return o==="peek"?Oe(h,l)[0]:([u,h,d]=Oe(h,l),u)}if({cmd:o,size:l}=yield yield X(null),r.isTTY)return yield yield X(new Uint8Array(0)),yield X(null);try{e[0]=Wa(r,"end"),e[1]=Wa(r,"error");do{if(e[2]=Wa(r,"readable"),[n,s]=yield X(Promise.race(e.map(T=>T[2]))),n==="error")break;if((i=n==="end")||(Number.isFinite(l-d)?(u=j(r.read(l-d)),u.byteLength<l-d&&(u=j(r.read()))):u=j(r.read()),u.byteLength>0&&(h.push(u),d+=u.byteLength)),i||l<=d)do({cmd:o,size:l}=yield yield X(g()));while(l<d)}while(!i)}finally{yield X(w(e,n==="error"?s:null))}return yield X(null);function w(T,tt){return u=h=null,new Promise((nt,yt)=>{for(let[gt,xt]of T)r.off(gt,xt);try{let gt=r.destroy;gt&&gt.call(r,tt),tt=void 0}catch(gt){tt=gt||tt}finally{tt!=null?yt(tt):nt()}})}})}var Kt;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Kt||(Kt={}));var Dt;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Dt||(Dt={}));var At;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(At||(At={}));var re;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(re||(re={}));var Z;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(Z||(Z={}));var he;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(he||(he={}));var at;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(at||(at={}));var _;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.Float=3]="Float",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct=13]="Struct",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Dictionary=-1]="Dictionary",r[r.Int8=-2]="Int8",r[r.Int16=-3]="Int16",r[r.Int32=-4]="Int32",r[r.Int64=-5]="Int64",r[r.Uint8=-6]="Uint8",r[r.Uint16=-7]="Uint16",r[r.Uint32=-8]="Uint32",r[r.Uint64=-9]="Uint64",r[r.Float16=-10]="Float16",r[r.Float32=-11]="Float32",r[r.Float64=-12]="Float64",r[r.DateDay=-13]="DateDay",r[r.DateMillisecond=-14]="DateMillisecond",r[r.TimestampSecond=-15]="TimestampSecond",r[r.TimestampMillisecond=-16]="TimestampMillisecond",r[r.TimestampMicrosecond=-17]="TimestampMicrosecond",r[r.TimestampNanosecond=-18]="TimestampNanosecond",r[r.TimeSecond=-19]="TimeSecond",r[r.TimeMillisecond=-20]="TimeMillisecond",r[r.TimeMicrosecond=-21]="TimeMicrosecond",r[r.TimeNanosecond=-22]="TimeNanosecond",r[r.DenseUnion=-23]="DenseUnion",r[r.SparseUnion=-24]="SparseUnion",r[r.IntervalDayTime=-25]="IntervalDayTime",r[r.IntervalYearMonth=-26]="IntervalYearMonth"})(_||(_={}));var Ve;(function(r){r[r.OFFSET=0]="OFFSET",r[r.DATA=1]="DATA",r[r.VALIDITY=2]="VALIDITY",r[r.TYPE=3]="TYPE"})(Ve||(Ve={}));var al={};In(al,{clampIndex:()=>om,clampRange:()=>Ni,createElementComparator:()=>on});var m_=void 0;function Qe(r){if(r===null)return"null";if(r===m_)return"undefined";switch(typeof r){case"number":return`${r}`;case"bigint":return`${r}`;case"string":return`"${r}"`}return typeof r[Symbol.toPrimitive]=="function"?r[Symbol.toPrimitive]("string"):ArrayBuffer.isView(r)?r instanceof je||r instanceof Pe?`[${[...r].map(t=>Qe(t))}]`:`[${r}]`:ArrayBuffer.isView(r)?`[${r}]`:JSON.stringify(r,(t,e)=>typeof e=="bigint"?`${e}`:e)}var Ga={};In(Ga,{BN:()=>An,bignumToBigInt:()=>Ws,bignumToString:()=>rn,isArrowBigNumSymbol:()=>qu});var qu=Symbol.for("isArrowBigNum");function Ze(r,...t){return t.length===0?Object.setPrototypeOf(q(this.TypedArray,r),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(r,...t),this.constructor.prototype)}Ze.prototype[qu]=!0;Ze.prototype.toJSON=function(){return`"${rn(this)}"`};Ze.prototype.valueOf=function(){return Qu(this)};Ze.prototype.toString=function(){return rn(this)};Ze.prototype[Symbol.toPrimitive]=function(r="default"){switch(r){case"number":return Qu(this);case"string":return rn(this);case"default":return Ws(this)}return rn(this)};function Kn(...r){return Ze.apply(this,r)}function Jn(...r){return Ze.apply(this,r)}function Li(...r){return Ze.apply(this,r)}Object.setPrototypeOf(Kn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(Jn.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(Li.prototype,Object.create(Uint32Array.prototype));Object.assign(Kn.prototype,Ze.prototype,{constructor:Kn,signed:!0,TypedArray:Int32Array,BigIntArray:je});Object.assign(Jn.prototype,Ze.prototype,{constructor:Jn,signed:!1,TypedArray:Uint32Array,BigIntArray:Pe});Object.assign(Li.prototype,Ze.prototype,{constructor:Li,signed:!0,TypedArray:Uint32Array,BigIntArray:Pe});function Qu(r){let{buffer:t,byteOffset:e,length:n,signed:i}=r,s=new Pe(t,e,n),o=i&&s[s.length-1]&BigInt(1)<<BigInt(63),l=BigInt(o?1:0),d=BigInt(0);if(o){for(let h of s)l+=~h*(BigInt(1)<<BigInt(32)*d++);l*=BigInt(-1)}else for(let h of s)l+=h*(BigInt(1)<<BigInt(32)*d++);return l}var rn,Ws;Cs?(Ws=r=>r.byteLength===8?new r.BigIntArray(r.buffer,r.byteOffset,1)[0]:Ya(r),rn=r=>r.byteLength===8?`${new r.BigIntArray(r.buffer,r.byteOffset,1)[0]}`:Ya(r)):(rn=Ya,Ws=rn);function Ya(r){let t="",e=new Uint32Array(2),n=new Uint16Array(r.buffer,r.byteOffset,r.byteLength/2),i=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),s=-1,o=n.length-1;do{for(e[0]=n[s=0];s<o;)n[s++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[s];n[s]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t=`${e[0]}${t}`}while(i[0]||i[1]||i[2]||i[3]);return t!=null?t:"0"}var An=class{static new(t,e){switch(e){case!0:return new Kn(t);case!1:return new Jn(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case je:return new Kn(t)}return t.byteLength===16?new Li(t):new Jn(t)}static signed(t){return new Kn(t)}static unsigned(t){return new Jn(t)}static decimal(t){return new Li(t)}constructor(t,e){return An.new(t,e)}};var Zu,td,ed,rd,nd,id,sd,od,ad,ld,cd,ud,dd,fd,hd,pd,_d,md,yd,B=class{static isNull(t){return(t==null?void 0:t.typeId)===_.Null}static isInt(t){return(t==null?void 0:t.typeId)===_.Int}static isFloat(t){return(t==null?void 0:t.typeId)===_.Float}static isBinary(t){return(t==null?void 0:t.typeId)===_.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===_.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===_.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===_.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===_.Date}static isTime(t){return(t==null?void 0:t.typeId)===_.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===_.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===_.Interval}static isList(t){return(t==null?void 0:t.typeId)===_.List}static isStruct(t){return(t==null?void 0:t.typeId)===_.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===_.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===_.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===_.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===_.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===_.Dictionary}static isDenseUnion(t){return B.isUnion(t)&&t.mode===Dt.Dense}static isSparseUnion(t){return B.isUnion(t)&&t.mode===Dt.Sparse}get typeId(){return _.NONE}};Zu=Symbol.toStringTag;B[Zu]=(r=>(r.children=null,r.ArrayType=Array,r[Symbol.toStringTag]="DataType"))(B.prototype);var pe=class extends B{toString(){return"Null"}get typeId(){return _.Null}};td=Symbol.toStringTag;pe[td]=(r=>r[Symbol.toStringTag]="Null")(pe.prototype);var Lt=class extends B{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return _.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?je:Pe}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`${this.isSigned?"I":"Ui"}nt${this.bitWidth}`}};ed=Symbol.toStringTag;Lt[ed]=(r=>(r.isSigned=null,r.bitWidth=null,r[Symbol.toStringTag]="Int"))(Lt.prototype);var zs=class extends Lt{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},Ys=class extends Lt{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},_r=class extends Lt{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},Gs=class extends Lt{constructor(){super(!0,64)}get ArrayType(){return je}},$s=class extends Lt{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},Xs=class extends Lt{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},Ks=class extends Lt{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},Js=class extends Lt{constructor(){super(!1,64)}get ArrayType(){return Pe}};Object.defineProperty(zs.prototype,"ArrayType",{value:Int8Array});Object.defineProperty(Ys.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(_r.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(Gs.prototype,"ArrayType",{value:je});Object.defineProperty($s.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(Xs.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Ks.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(Js.prototype,"ArrayType",{value:Pe});var ye=class extends B{constructor(t){super(),this.precision=t}get typeId(){return _.Float}get ArrayType(){switch(this.precision){case At.HALF:return Uint16Array;case At.SINGLE:return Float32Array;case At.DOUBLE:return Float64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`Float${this.precision<<5||16}`}};rd=Symbol.toStringTag;ye[rd]=(r=>(r.precision=null,r[Symbol.toStringTag]="Float"))(ye.prototype);var qs=class extends ye{constructor(){super(At.HALF)}},Qs=class extends ye{constructor(){super(At.SINGLE)}},Zs=class extends ye{constructor(){super(At.DOUBLE)}};Object.defineProperty(qs.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Qs.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(Zs.prototype,"ArrayType",{value:Float64Array});var kr=class extends B{constructor(){super()}get typeId(){return _.Binary}toString(){return"Binary"}};nd=Symbol.toStringTag;kr[nd]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Binary"))(kr.prototype);var Cr=class extends B{constructor(){super()}get typeId(){return _.Utf8}toString(){return"Utf8"}};id=Symbol.toStringTag;Cr[id]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Utf8"))(Cr.prototype);var Lr=class extends B{constructor(){super()}get typeId(){return _.Bool}toString(){return"Bool"}};sd=Symbol.toStringTag;Lr[sd]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Bool"))(Lr.prototype);var Ur=class extends B{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return _.Decimal}toString(){return`Decimal[${this.precision}e${this.scale>0?"+":""}${this.scale}]`}};od=Symbol.toStringTag;Ur[od]=(r=>(r.scale=null,r.precision=null,r.ArrayType=Uint32Array,r[Symbol.toStringTag]="Decimal"))(Ur.prototype);var Nr=class extends B{constructor(t){super(),this.unit=t}get typeId(){return _.Date}toString(){return`Date${(this.unit+1)*32}<${re[this.unit]}>`}};ad=Symbol.toStringTag;Nr[ad]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Date"))(Nr.prototype);var tr=class extends B{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return _.Time}toString(){return`Time${this.bitWidth}<${Z[this.unit]}>`}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return je}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}};ld=Symbol.toStringTag;tr[ld]=(r=>(r.unit=null,r.bitWidth=null,r[Symbol.toStringTag]="Time"))(tr.prototype);var jr=class extends B{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return _.Timestamp}toString(){return`Timestamp<${Z[this.unit]}${this.timezone?`, ${this.timezone}`:""}>`}};cd=Symbol.toStringTag;jr[cd]=(r=>(r.unit=null,r.timezone=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Timestamp"))(jr.prototype);var Pr=class extends B{constructor(t){super(),this.unit=t}get typeId(){return _.Interval}toString(){return`Interval<${he[this.unit]}>`}};ud=Symbol.toStringTag;Pr[ud]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Interval"))(Pr.prototype);var er=class extends B{constructor(t){super(),this.children=[t]}get typeId(){return _.List}toString(){return`List<${this.valueType}>`}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};dd=Symbol.toStringTag;er[dd]=(r=>(r.children=null,r[Symbol.toStringTag]="List"))(er.prototype);var wt=class extends B{constructor(t){super(),this.children=t}get typeId(){return _.Struct}toString(){return`Struct<{${this.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};fd=Symbol.toStringTag;wt[fd]=(r=>(r.children=null,r[Symbol.toStringTag]="Struct"))(wt.prototype);var rr=class extends B{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((i,s,o)=>(i[s]=o)&&i||i,Object.create(null))}get typeId(){return _.Union}toString(){return`${this[Symbol.toStringTag]}<${this.children.map(t=>`${t.type}`).join(" | ")}>`}};hd=Symbol.toStringTag;rr[hd]=(r=>(r.mode=null,r.typeIds=null,r.children=null,r.typeIdToChildIndex=null,r.ArrayType=Int8Array,r[Symbol.toStringTag]="Union"))(rr.prototype);var Hr=class extends B{constructor(t){super(),this.byteWidth=t}get typeId(){return _.FixedSizeBinary}toString(){return`FixedSizeBinary[${this.byteWidth}]`}};pd=Symbol.toStringTag;Hr[pd]=(r=>(r.byteWidth=null,r.ArrayType=Uint8Array,r[Symbol.toStringTag]="FixedSizeBinary"))(Hr.prototype);var nr=class extends B{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return _.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return`FixedSizeList[${this.listSize}]<${this.valueType}>`}};_d=Symbol.toStringTag;nr[_d]=(r=>(r.children=null,r.listSize=null,r[Symbol.toStringTag]="FixedSizeList"))(nr.prototype);var ir=class extends B{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return _.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return`Map<{${this.children[0].type.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};md=Symbol.toStringTag;ir[md]=(r=>(r.children=null,r.keysSorted=null,r[Symbol.toStringTag]="Map_"))(ir.prototype);var y_=(r=>()=>++r)(-1),Re=class extends B{constructor(t,e,n,i){super(),this.indices=e,this.dictionary=t,this.isOrdered=i||!1,this.id=n==null?y_():typeof n=="number"?n:n.low}get typeId(){return _.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return`Dictionary<${this.indices}, ${this.dictionary}>`}};yd=Symbol.toStringTag;Re[yd]=(r=>(r.id=null,r.indices=null,r.isOrdered=null,r.dictionary=null,r[Symbol.toStringTag]="Dictionary"))(Re.prototype);function Me(r){let t=r;switch(r.typeId){case _.Decimal:return r.bitWidth/32;case _.Timestamp:return 2;case _.Date:return 1+t.unit;case _.Interval:return 1+t.unit;case _.FixedSizeList:return t.listSize;case _.FixedSizeBinary:return t.byteWidth;default:return 1}}var R=class{visitMany(t,...e){return t.map((n,i)=>this.visit(n,...e.map(s=>s[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return b_(this,t,e)}getVisitFnByTypeId(t,e=!0){return qn(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function b_(r,t,e=!0){return typeof t=="number"?qn(r,t,e):typeof t=="string"&&t in _?qn(r,_[t],e):t&&t instanceof B?qn(r,bd(t),e):(t==null?void 0:t.type)&&t.type instanceof B?qn(r,bd(t.type),e):qn(r,_.NONE,e)}function qn(r,t,e=!0){let n=null;switch(t){case _.Null:n=r.visitNull;break;case _.Bool:n=r.visitBool;break;case _.Int:n=r.visitInt;break;case _.Int8:n=r.visitInt8||r.visitInt;break;case _.Int16:n=r.visitInt16||r.visitInt;break;case _.Int32:n=r.visitInt32||r.visitInt;break;case _.Int64:n=r.visitInt64||r.visitInt;break;case _.Uint8:n=r.visitUint8||r.visitInt;break;case _.Uint16:n=r.visitUint16||r.visitInt;break;case _.Uint32:n=r.visitUint32||r.visitInt;break;case _.Uint64:n=r.visitUint64||r.visitInt;break;case _.Float:n=r.visitFloat;break;case _.Float16:n=r.visitFloat16||r.visitFloat;break;case _.Float32:n=r.visitFloat32||r.visitFloat;break;case _.Float64:n=r.visitFloat64||r.visitFloat;break;case _.Utf8:n=r.visitUtf8;break;case _.Binary:n=r.visitBinary;break;case _.FixedSizeBinary:n=r.visitFixedSizeBinary;break;case _.Date:n=r.visitDate;break;case _.DateDay:n=r.visitDateDay||r.visitDate;break;case _.DateMillisecond:n=r.visitDateMillisecond||r.visitDate;break;case _.Timestamp:n=r.visitTimestamp;break;case _.TimestampSecond:n=r.visitTimestampSecond||r.visitTimestamp;break;case _.TimestampMillisecond:n=r.visitTimestampMillisecond||r.visitTimestamp;break;case _.TimestampMicrosecond:n=r.visitTimestampMicrosecond||r.visitTimestamp;break;case _.TimestampNanosecond:n=r.visitTimestampNanosecond||r.visitTimestamp;break;case _.Time:n=r.visitTime;break;case _.TimeSecond:n=r.visitTimeSecond||r.visitTime;break;case _.TimeMillisecond:n=r.visitTimeMillisecond||r.visitTime;break;case _.TimeMicrosecond:n=r.visitTimeMicrosecond||r.visitTime;break;case _.TimeNanosecond:n=r.visitTimeNanosecond||r.visitTime;break;case _.Decimal:n=r.visitDecimal;break;case _.List:n=r.visitList;break;case _.Struct:n=r.visitStruct;break;case _.Union:n=r.visitUnion;break;case _.DenseUnion:n=r.visitDenseUnion||r.visitUnion;break;case _.SparseUnion:n=r.visitSparseUnion||r.visitUnion;break;case _.Dictionary:n=r.visitDictionary;break;case _.Interval:n=r.visitInterval;break;case _.IntervalDayTime:n=r.visitIntervalDayTime||r.visitInterval;break;case _.IntervalYearMonth:n=r.visitIntervalYearMonth||r.visitInterval;break;case _.FixedSizeList:n=r.visitFixedSizeList;break;case _.Map:n=r.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error(`Unrecognized type '${_[t]}'`)}function bd(r){switch(r.typeId){case _.Null:return _.Null;case _.Int:{let{bitWidth:t,isSigned:e}=r;switch(t){case 8:return e?_.Int8:_.Uint8;case 16:return e?_.Int16:_.Uint16;case 32:return e?_.Int32:_.Uint32;case 64:return e?_.Int64:_.Uint64}return _.Int}case _.Float:switch(r.precision){case At.HALF:return _.Float16;case At.SINGLE:return _.Float32;case At.DOUBLE:return _.Float64}return _.Float;case _.Binary:return _.Binary;case _.Utf8:return _.Utf8;case _.Bool:return _.Bool;case _.Decimal:return _.Decimal;case _.Time:switch(r.unit){case Z.SECOND:return _.TimeSecond;case Z.MILLISECOND:return _.TimeMillisecond;case Z.MICROSECOND:return _.TimeMicrosecond;case Z.NANOSECOND:return _.TimeNanosecond}return _.Time;case _.Timestamp:switch(r.unit){case Z.SECOND:return _.TimestampSecond;case Z.MILLISECOND:return _.TimestampMillisecond;case Z.MICROSECOND:return _.TimestampMicrosecond;case Z.NANOSECOND:return _.TimestampNanosecond}return _.Timestamp;case _.Date:switch(r.unit){case re.DAY:return _.DateDay;case re.MILLISECOND:return _.DateMillisecond}return _.Date;case _.Interval:switch(r.unit){case he.DAY_TIME:return _.IntervalDayTime;case he.YEAR_MONTH:return _.IntervalYearMonth}return _.Interval;case _.Map:return _.Map;case _.List:return _.List;case _.Struct:return _.Struct;case _.Union:switch(r.mode){case Dt.Dense:return _.DenseUnion;case Dt.Sparse:return _.SparseUnion}return _.Union;case _.FixedSizeBinary:return _.FixedSizeBinary;case _.FixedSizeList:return _.FixedSizeList;case _.Dictionary:return _.Dictionary}throw new Error(`Unrecognized type '${_[r.typeId]}'`)}R.prototype.visitInt8=null;R.prototype.visitInt16=null;R.prototype.visitInt32=null;R.prototype.visitInt64=null;R.prototype.visitUint8=null;R.prototype.visitUint16=null;R.prototype.visitUint32=null;R.prototype.visitUint64=null;R.prototype.visitFloat16=null;R.prototype.visitFloat32=null;R.prototype.visitFloat64=null;R.prototype.visitDateDay=null;R.prototype.visitDateMillisecond=null;R.prototype.visitTimestampSecond=null;R.prototype.visitTimestampMillisecond=null;R.prototype.visitTimestampMicrosecond=null;R.prototype.visitTimestampNanosecond=null;R.prototype.visitTimeSecond=null;R.prototype.visitTimeMillisecond=null;R.prototype.visitTimeMicrosecond=null;R.prototype.visitTimeNanosecond=null;R.prototype.visitDenseUnion=null;R.prototype.visitSparseUnion=null;R.prototype.visitIntervalDayTime=null;R.prototype.visitIntervalYearMonth=null;var $a={};In($a,{float64ToUint16:()=>Ui,uint16ToFloat64:()=>to});var gd=new Float64Array(1),Qn=new Uint32Array(gd.buffer);function to(r){let t=(r&31744)>>10,e=(r&1023)/1024,n=Math.pow(-1,(r&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function Ui(r){if(r!==r)return 32256;gd[0]=r;let t=(Qn[1]&2147483648)>>16&65535,e=Qn[1]&2146435072,n=0;return e>=1089470464?Qn[0]>0?e=31744:(e=(e&2080374784)>>16,n=(Qn[1]&1048575)>>10):e<=1056964608?(n=1048576+(Qn[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(Qn[1]&1048575)+512>>10),t|e|n&65535}var P=class extends R{};function $(r){return(t,e,n)=>{if(t.setValid(e,n!=null))return r(t,e,n)}}var g_=(r,t,e)=>{r[t]=Math.trunc(e/864e5)},Xa=(r,t,e)=>{r[t]=Math.trunc(e%4294967296),r[t+1]=Math.trunc(e/4294967296)},w_=(r,t,e)=>{r[t]=Math.trunc(e*1e3%4294967296),r[t+1]=Math.trunc(e*1e3/4294967296)},v_=(r,t,e)=>{r[t]=Math.trunc(e*1e6%4294967296),r[t+1]=Math.trunc(e*1e6/4294967296)},wd=(r,t,e,n)=>{if(e+1<t.length){let{[e]:i,[e+1]:s}=t;r.set(n.subarray(0,s-i),i)}},S_=({offset:r,values:t},e,n)=>{let i=r+e;n?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},Vr=({values:r},t,e)=>{r[t]=e},Ka=({values:r},t,e)=>{r[t]=e},vd=({values:r},t,e)=>{r[t]=Ui(e)},I_=(r,t,e)=>{switch(r.type.precision){case At.HALF:return vd(r,t,e);case At.SINGLE:case At.DOUBLE:return Ka(r,t,e)}},eo=({values:r},t,e)=>{g_(r,t,e.valueOf())},ro=({values:r},t,e)=>{Xa(r,t*2,e.valueOf())},Ja=({stride:r,values:t},e,n)=>{t.set(n.subarray(0,r),r*e)},T_=({values:r,valueOffsets:t},e,n)=>wd(r,t,e,n),A_=({values:r,valueOffsets:t},e,n)=>{wd(r,t,e,en(n))},qa=(r,t,e)=>{r.type.unit===re.DAY?eo(r,t,e):ro(r,t,e)},no=({values:r},t,e)=>Xa(r,t*2,e/1e3),io=({values:r},t,e)=>Xa(r,t*2,e),so=({values:r},t,e)=>w_(r,t*2,e),oo=({values:r},t,e)=>v_(r,t*2,e),Qa=(r,t,e)=>{switch(r.type.unit){case Z.SECOND:return no(r,t,e);case Z.MILLISECOND:return io(r,t,e);case Z.MICROSECOND:return so(r,t,e);case Z.NANOSECOND:return oo(r,t,e)}},ao=({values:r},t,e)=>{r[t]=e},lo=({values:r},t,e)=>{r[t]=e},co=({values:r},t,e)=>{r[t]=e},uo=({values:r},t,e)=>{r[t]=e},Za=(r,t,e)=>{switch(r.type.unit){case Z.SECOND:return ao(r,t,e);case Z.MILLISECOND:return lo(r,t,e);case Z.MICROSECOND:return co(r,t,e);case Z.NANOSECOND:return uo(r,t,e)}},tl=({values:r,stride:t},e,n)=>{r.set(n.subarray(0,t),t*e)},E_=(r,t,e)=>{let n=r.children[0],i=r.valueOffsets,s=ne.getVisitFn(n);if(Array.isArray(e))for(let o=-1,l=i[t],d=i[t+1];l<d;)s(n,l++,e[++o]);else for(let o=-1,l=i[t],d=i[t+1];l<d;)s(n,l++,e.get(++o))},F_=(r,t,e)=>{let n=r.children[0],{valueOffsets:i}=r,s=ne.getVisitFn(n),{[t]:o,[t+1]:l}=i,d=e instanceof Map?e.entries():Object.entries(e);for(let h of d)if(s(n,o,h),++o>=l)break},x_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[s]),B_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(s)),D_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(i.name)),O_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[i.name]),R_=(r,t,e)=>{let n=r.type.children.map(s=>ne.getVisitFn(s.type)),i=e instanceof Map?D_(t,e):e instanceof H?B_(t,e):Array.isArray(e)?x_(t,e):O_(t,e);r.type.children.forEach((s,o)=>i(n[o],r.children[o],s,o))},M_=(r,t,e)=>{r.type.mode===Dt.Dense?Sd(r,t,e):Id(r,t,e)},Sd=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];ne.visit(i,r.valueOffsets[t],e)},Id=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];ne.visit(i,t,e)},k_=(r,t,e)=>{var n;(n=r.dictionary)===null||n===void 0||n.set(r.values[t],e)},el=(r,t,e)=>{r.type.unit===he.DAY_TIME?fo(r,t,e):ho(r,t,e)},fo=({values:r},t,e)=>{r.set(e.subarray(0,2),2*t)},ho=({values:r},t,e)=>{r[t]=e[0]*12+e[1]%12},C_=(r,t,e)=>{let{stride:n}=r,i=r.children[0],s=ne.getVisitFn(i);if(Array.isArray(e))for(let o=-1,l=t*n;++o<n;)s(i,l+o,e[o]);else for(let o=-1,l=t*n;++o<n;)s(i,l+o,e.get(o))};P.prototype.visitBool=$(S_);P.prototype.visitInt=$(Vr);P.prototype.visitInt8=$(Vr);P.prototype.visitInt16=$(Vr);P.prototype.visitInt32=$(Vr);P.prototype.visitInt64=$(Vr);P.prototype.visitUint8=$(Vr);P.prototype.visitUint16=$(Vr);P.prototype.visitUint32=$(Vr);P.prototype.visitUint64=$(Vr);P.prototype.visitFloat=$(I_);P.prototype.visitFloat16=$(vd);P.prototype.visitFloat32=$(Ka);P.prototype.visitFloat64=$(Ka);P.prototype.visitUtf8=$(A_);P.prototype.visitBinary=$(T_);P.prototype.visitFixedSizeBinary=$(Ja);P.prototype.visitDate=$(qa);P.prototype.visitDateDay=$(eo);P.prototype.visitDateMillisecond=$(ro);P.prototype.visitTimestamp=$(Qa);P.prototype.visitTimestampSecond=$(no);P.prototype.visitTimestampMillisecond=$(io);P.prototype.visitTimestampMicrosecond=$(so);P.prototype.visitTimestampNanosecond=$(oo);P.prototype.visitTime=$(Za);P.prototype.visitTimeSecond=$(ao);P.prototype.visitTimeMillisecond=$(lo);P.prototype.visitTimeMicrosecond=$(co);P.prototype.visitTimeNanosecond=$(uo);P.prototype.visitDecimal=$(tl);P.prototype.visitList=$(E_);P.prototype.visitStruct=$(R_);P.prototype.visitUnion=$(M_);P.prototype.visitDenseUnion=$(Sd);P.prototype.visitSparseUnion=$(Id);P.prototype.visitDictionary=$(k_);P.prototype.visitInterval=$(el);P.prototype.visitIntervalDayTime=$(fo);P.prototype.visitIntervalYearMonth=$(ho);P.prototype.visitFixedSizeList=$(C_);P.prototype.visitMap=$(F_);var ne=new P;var sr=Symbol.for("parent"),Zn=Symbol.for("rowIndex"),nn=class{constructor(t,e){return this[sr]=t,this[Zn]=e,new Proxy(this,new nl)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Zn],e=this[sr],n=e.type.children,i={};for(let s=-1,o=n.length;++s<o;)i[n[s].name]=Ht.visit(e.children[s],t);return i}toString(){return`{${[...this].map(([t,e])=>`${Qe(t)}: ${Qe(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new rl(this[sr],this[Zn])}},rl=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Ht.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(nn.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[sr]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Zn]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var nl=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[sr].type.children.map(e=>e.name)}has(t,e){return t[sr].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[sr].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[sr].type.children.findIndex(i=>i.name===e);if(n!==-1){let i=Ht.visit(t[sr].children[n],t[Zn]);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[sr].type.children.findIndex(s=>s.name===e);return i!==-1?(ne.visit(t[sr].children[i],t[Zn],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var C=class extends R{};function W(r){return(t,e)=>t.getValid(e)?r(t,e):null}var L_=(r,t)=>864e5*r[t],il=(r,t)=>4294967296*r[t+1]+(r[t]>>>0),U_=(r,t)=>4294967296*(r[t+1]/1e3)+(r[t]>>>0)/1e3,N_=(r,t)=>4294967296*(r[t+1]/1e6)+(r[t]>>>0)/1e6,Td=r=>new Date(r),j_=(r,t)=>Td(L_(r,t)),P_=(r,t)=>Td(il(r,t)),H_=(r,t)=>null,Ad=(r,t,e)=>{if(e+1>=t.length)return null;let n=t[e],i=t[e+1];return r.subarray(n,i)},V_=({offset:r,values:t},e)=>{let n=r+e;return(t[n>>3]&1<<n%8)!==0},Ed=({values:r},t)=>j_(r,t),Fd=({values:r},t)=>P_(r,t*2),sn=({stride:r,values:t},e)=>t[r*e],W_=({stride:r,values:t},e)=>to(t[r*e]),xd=({values:r},t)=>r[t],z_=({stride:r,values:t},e)=>t.subarray(r*e,r*(e+1)),Y_=({values:r,valueOffsets:t},e)=>Ad(r,t,e),G_=({values:r,valueOffsets:t},e)=>{let n=Ad(r,t,e);return n!==null?Mi(n):null},$_=({values:r},t)=>r[t],X_=({type:r,values:t},e)=>r.precision!==At.HALF?t[e]:to(t[e]),K_=(r,t)=>r.type.unit===re.DAY?Ed(r,t):Fd(r,t),Bd=({values:r},t)=>1e3*il(r,t*2),Dd=({values:r},t)=>il(r,t*2),Od=({values:r},t)=>U_(r,t*2),Rd=({values:r},t)=>N_(r,t*2),J_=(r,t)=>{switch(r.type.unit){case Z.SECOND:return Bd(r,t);case Z.MILLISECOND:return Dd(r,t);case Z.MICROSECOND:return Od(r,t);case Z.NANOSECOND:return Rd(r,t)}},Md=({values:r},t)=>r[t],kd=({values:r},t)=>r[t],Cd=({values:r},t)=>r[t],Ld=({values:r},t)=>r[t],q_=(r,t)=>{switch(r.type.unit){case Z.SECOND:return Md(r,t);case Z.MILLISECOND:return kd(r,t);case Z.MICROSECOND:return Cd(r,t);case Z.NANOSECOND:return Ld(r,t)}},Q_=({values:r,stride:t},e)=>An.decimal(r.subarray(t*e,t*(e+1))),Z_=(r,t)=>{let{valueOffsets:e,stride:n,children:i}=r,{[t*n]:s,[t*n+1]:o}=e,d=i[0].slice(s,o-s);return new H([d])},tm=(r,t)=>{let{valueOffsets:e,children:n}=r,{[t]:i,[t+1]:s}=e,o=n[0];return new mr(o.slice(i,s-i))},em=(r,t)=>new nn(r,t),rm=(r,t)=>r.type.mode===Dt.Dense?Ud(r,t):Nd(r,t),Ud=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Ht.visit(n,r.valueOffsets[t])},Nd=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Ht.visit(n,t)},nm=(r,t)=>{var e;return(e=r.dictionary)===null||e===void 0?void 0:e.get(r.values[t])},im=(r,t)=>r.type.unit===he.DAY_TIME?jd(r,t):Pd(r,t),jd=({values:r},t)=>r.subarray(2*t,2*(t+1)),Pd=({values:r},t)=>{let e=r[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},sm=(r,t)=>{let{stride:e,children:n}=r,s=n[0].slice(t*e,e);return new H([s])};C.prototype.visitNull=W(H_);C.prototype.visitBool=W(V_);C.prototype.visitInt=W($_);C.prototype.visitInt8=W(sn);C.prototype.visitInt16=W(sn);C.prototype.visitInt32=W(sn);C.prototype.visitInt64=W(xd);C.prototype.visitUint8=W(sn);C.prototype.visitUint16=W(sn);C.prototype.visitUint32=W(sn);C.prototype.visitUint64=W(xd);C.prototype.visitFloat=W(X_);C.prototype.visitFloat16=W(W_);C.prototype.visitFloat32=W(sn);C.prototype.visitFloat64=W(sn);C.prototype.visitUtf8=W(G_);C.prototype.visitBinary=W(Y_);C.prototype.visitFixedSizeBinary=W(z_);C.prototype.visitDate=W(K_);C.prototype.visitDateDay=W(Ed);C.prototype.visitDateMillisecond=W(Fd);C.prototype.visitTimestamp=W(J_);C.prototype.visitTimestampSecond=W(Bd);C.prototype.visitTimestampMillisecond=W(Dd);C.prototype.visitTimestampMicrosecond=W(Od);C.prototype.visitTimestampNanosecond=W(Rd);C.prototype.visitTime=W(q_);C.prototype.visitTimeSecond=W(Md);C.prototype.visitTimeMillisecond=W(kd);C.prototype.visitTimeMicrosecond=W(Cd);C.prototype.visitTimeNanosecond=W(Ld);C.prototype.visitDecimal=W(Q_);C.prototype.visitList=W(Z_);C.prototype.visitStruct=W(em);C.prototype.visitUnion=W(rm);C.prototype.visitDenseUnion=W(Ud);C.prototype.visitSparseUnion=W(Nd);C.prototype.visitDictionary=W(nm);C.prototype.visitInterval=W(im);C.prototype.visitIntervalDayTime=W(jd);C.prototype.visitIntervalYearMonth=W(Pd);C.prototype.visitFixedSizeList=W(sm);C.prototype.visitMap=W(tm);var Ht=new C;var We=Symbol.for("keys"),ti=Symbol.for("vals"),mr=class{constructor(t){return this[We]=new H([t.children[0]]).memoize(),this[ti]=t.children[1],new Proxy(this,new ol)}[Symbol.iterator](){return new sl(this[We],this[ti])}get size(){return this[We].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[We],e=this[ti],n={};for(let i=-1,s=t.length;++i<s;)n[t.get(i)]=Ht.visit(e,i);return n}toString(){return`{${[...this].map(([t,e])=>`${Qe(t)}: ${Qe(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},sl=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Ht.visit(this.vals,t)]})}},ol=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[We].toArray().map(String)}has(t,e){return t[We].includes(e)}getOwnPropertyDescriptor(t,e){if(t[We].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[We].indexOf(e);if(n!==-1){let i=Ht.visit(Reflect.get(t,ti),n);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[We].indexOf(e);return i!==-1?(ne.visit(Reflect.get(t,ti),i,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(mr.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[We]:{writable:!0,enumerable:!1,configurable:!1,value:null},[ti]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function om(r,t,e){let n=r.length,i=t>-1?t:n+t%n;return e?e(r,i):i}var Hd;function Ni(r,t,e,n){let{length:i=0}=r,s=typeof t!="number"?0:t,o=typeof e!="number"?i:e;return s<0&&(s=(s%i+i)%i),o<0&&(o=(o%i+i)%i),o<s&&(Hd=s,s=o,o=Hd),o>i&&(o=i),n?n(r,s,o):[s,o]}var Vd=r=>r!==r;function on(r){if(typeof r!=="object"||r===null)return Vd(r)?Vd:e=>e===r;if(r instanceof Date){let e=r.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(r)?e=>e?Ha(r,e):!1:r instanceof Map?lm(r):Array.isArray(r)?am(r):r instanceof H?cm(r):um(r,!0)}function am(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=on(r[e]);return po(t)}function lm(r){let t=-1,e=[];for(let n of r.values())e[++t]=on(n);return po(e)}function cm(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=on(r.get(e));return po(t)}function um(r,t=!1){let e=Object.keys(r);if(!t&&e.length===0)return()=>!1;let n=[];for(let i=-1,s=e.length;++i<s;)n[i]=on(r[e[i]]);return po(n,e)}function po(r,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return dm(r,e);case Map:return Wd(r,e,e.keys());case mr:case nn:case Object:case void 0:return Wd(r,e,t||Object.keys(e))}return e instanceof H?fm(r,e):!1}}function dm(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t[n]))return!1;return!0}function fm(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t.get(n)))return!1;return!0}function Wd(r,t,e){let n=e[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),s=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),o=0,l=r.length,d=s.next(),h=n.next(),u=i.next();for(;o<l&&!h.done&&!u.done&&!d.done&&!(h.value!==u.value||!r[o](d.value));++o,h=n.next(),u=i.next(),d=s.next());return o===l&&h.done&&u.done&&d.done?!0:(n.return&&n.return(),i.return&&i.return(),s.return&&s.return(),!1)}var ll={};In(ll,{BitIterator:()=>En,getBit:()=>zd,getBool:()=>mo,packBools:()=>Fn,popcnt_array:()=>Yd,popcnt_bit_range:()=>ji,popcnt_uint32:()=>_o,setBool:()=>hm,truncateBitmap:()=>ei});function mo(r,t,e,n){return(e&1<<n)!==0}function zd(r,t,e,n){return(e&1<<n)>>n}function hm(r,t,e){return e?!!(r[t>>3]|=1<<t%8)||!0:!(r[t>>3]&=~(1<<t%8))&&!1}function ei(r,t,e){let n=e.byteLength+7&-8;if(r>0||e.byteLength<n){let i=new Uint8Array(n);return i.set(r%8===0?e.subarray(r>>3):Fn(new En(e,r,t,null,mo)).subarray(0,n)),i}return e}function Fn(r){let t=[],e=0,n=0,i=0;for(let o of r)o&&(i|=1<<n),++n===8&&(t[e++]=i,i=n=0);(e===0||n>0)&&(t[e++]=i);let s=new Uint8Array(t.length+7&-8);return s.set(t),s}var En=class{constructor(t,e,n,i,s){this.bytes=t,this.length=n,this.context=i,this.get=s,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function ji(r,t,e){if(e-t<=0)return 0;if(e-t<8){let s=0;for(let o of new En(r,t,e-t,r,zd))s+=o;return s}let n=e>>3<<3,i=t+(t%8===0?0:8-t%8);return ji(r,t,i)+ji(r,n,e)+Yd(r,i>>3,n-i>>3)}function Yd(r,t,e){let n=0,i=Math.trunc(t),s=new DataView(r.buffer,r.byteOffset,r.byteLength),o=e===void 0?r.byteLength:i+e;for(;o-i>=4;)n+=_o(s.getUint32(i)),i+=4;for(;o-i>=2;)n+=_o(s.getUint16(i)),i+=2;for(;o-i>=1;)n+=_o(s.getUint8(i)),i+=1;return n}function _o(r){let t=Math.trunc(r);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var pm=-1,lt=class{constructor(t,e,n,i,s,o=[],l){this.type=t,this.children=o,this.dictionary=l,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let d;s instanceof lt?(this.stride=s.stride,this.values=s.values,this.typeIds=s.typeIds,this.nullBitmap=s.nullBitmap,this.valueOffsets=s.valueOffsets):(this.stride=Me(t),s&&((d=s[0])&&(this.valueOffsets=d),(d=s[1])&&(this.values=d),(d=s[2])&&(this.nullBitmap=d),(d=s[3])&&(this.typeIds=d))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:i,typeIds:s}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),this.children.reduce((o,l)=>o+l.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=pm&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-ji(e,this.offset,this.offset+this.length)),t}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:d}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:d,_nullCount:0})}let{nullBitmap:n,offset:i}=this,s=i+t>>3,o=(i+t)%8,l=n[s]>>o&1;return e?l===0&&(n[s]|=1<<o,this._nullCount=this.nullCount+1):l===1&&(n[s]&=~(1<<o),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,i=this._nullCount,s=this,o=this.children){return new lt(t,e,n,i,s,o,this.dictionary)}slice(t,e){let{stride:n,typeId:i,children:s}=this,o=+(this._nullCount===0)-1,l=i===16?n:1,d=this._sliceBuffers(t,e,n,i);return this.clone(this.type,this.offset+t,e,o,d,s.length===0||this.valueOffsets?s:this._sliceChildren(s,l*t,l*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===_.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);i[e>>3]=(1<<e-(e&-8))-1,n>0&&i.set(ei(this.offset,e,this.nullBitmap),0);let s=this.buffers;return s[Ve.VALIDITY]=i,this.clone(this.type,0,t,n+(t-e),s)}_sliceBuffers(t,e,n,i){let s,{buffers:o}=this;return(s=o[Ve.TYPE])&&(o[Ve.TYPE]=s.subarray(t,t+e)),(s=o[Ve.OFFSET])&&(o[Ve.OFFSET]=s.subarray(t,t+e+1))||(s=o[Ve.DATA])&&(o[Ve.DATA]=i===6?s:s.subarray(n*t,n*(t+e))),o}_sliceChildren(t,e,n){return t.map(i=>i.slice(e,n))}};lt.prototype.children=Object.freeze([]);var xn=class extends R{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:i=0}=t;return new lt(e,n,i,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length>>3,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.data),s=j(t.nullBitmap),o=Tn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new lt(e,n,l,d,[o,i,s])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.data),s=j(t.nullBitmap),o=Tn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new lt(e,n,l,d,[o,i,s])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:i}=t,s=j(t.nullBitmap),o=Tn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new lt(e,n,l,d,[o,void 0,s],[i])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=j(t.nullBitmap),{length:o=i.reduce((d,{length:h})=>Math.max(d,h),0),nullCount:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,void 0,s],i)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=j(t.nullBitmap),o=q(e.ArrayType,t.typeIds),{["length"]:l=o.length,["nullCount"]:d=t.nullBitmap?-1:0}=t;if(B.isSparseUnion(e))return new lt(e,n,l,d,[void 0,void 0,s,o],i);let h=Tn(t.valueOffsets);return new lt(e,n,l,d,[h,void 0,s,o],i)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.indices.ArrayType,t.data),{["dictionary"]:o=new H([new xn().visit({type:e.dictionary})])}=t,{["length"]:l=s.length,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new lt(e,n,l,d,[void 0,s,i],[],o)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,i=j(t.nullBitmap),s=q(e.ArrayType,t.data),{["length"]:o=s.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,s,i])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new xn().visit({type:e.valueType})}=t,s=j(t.nullBitmap),{["length"]:o=i.length/Me(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new lt(e,n,o,l,[void 0,void 0,s],[i])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new xn().visit({type:e.childType})}=t,s=j(t.nullBitmap),o=Tn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new lt(e,n,l,d,[o,void 0,s],[i])}};function V(r){return new xn().visit(r)}var Pi=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function yo(r){return r.reduce((t,e)=>t+e.nullCount,0)}function bo(r){return r.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(r.length+1))}function go(r,t,e,n){let i=[];for(let s=-1,o=r.length;++s<o;){let l=r[s],d=t[s],{length:h}=l;if(d>=n)break;if(e>=d+h)continue;if(d>=e&&d+h<=n){i.push(l);continue}let u=Math.max(0,e-d),g=Math.min(n-d,h);i.push(l.slice(u,g-u))}return i.length===0&&i.push(r[0].slice(0,0)),i}function cl(r,t,e,n){let i=0,s=0,o=t.length-1;do{if(i>=o-1)return e<t[o]?n(r,i,e-t[i]):null;s=i+Math.trunc((o-i)*.5),e<t[s]?o=s:i=s}while(i<o)}function Hi(r,t){return r.getValid(t)}function an(r){function t(e,n,i){return r(e[n],i)}return function(e){let n=this.data;return cl(n,this._offsets,e,t)}}function wo(r){let t;function e(n,i,s){return r(n[i],s,t)}return function(n,i){let s=this.data;t=i;let o=cl(s,this._offsets,n,e);return t=void 0,o}}function vo(r){let t;function e(n,i,s){let o=s,l=0,d=0;for(let h=i-1,u=n.length;++h<u;){let g=n[h];if(~(l=r(g,t,o)))return d+l;o=0,d+=g.length}return-1}return function(n,i){t=n;let s=this.data,o=typeof i!="number"?e(s,0,0):cl(s,this._offsets,i,e);return t=void 0,o}}var L=class extends R{};function _m(r,t){return t===null&&r.length>0?0:-1}function mm(r,t){let{nullBitmap:e}=r;if(!e||r.nullCount<=0)return-1;let n=0;for(let i of new En(e,r.offset+(t||0),r.length,e,mo)){if(!i)return n;++n}return-1}function Q(r,t,e){if(t===void 0)return-1;if(t===null)return mm(r,e);let n=Ht.getVisitFn(r),i=on(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}function Gd(r,t,e){let n=Ht.getVisitFn(r),i=on(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}L.prototype.visitNull=_m;L.prototype.visitBool=Q;L.prototype.visitInt=Q;L.prototype.visitInt8=Q;L.prototype.visitInt16=Q;L.prototype.visitInt32=Q;L.prototype.visitInt64=Q;L.prototype.visitUint8=Q;L.prototype.visitUint16=Q;L.prototype.visitUint32=Q;L.prototype.visitUint64=Q;L.prototype.visitFloat=Q;L.prototype.visitFloat16=Q;L.prototype.visitFloat32=Q;L.prototype.visitFloat64=Q;L.prototype.visitUtf8=Q;L.prototype.visitBinary=Q;L.prototype.visitFixedSizeBinary=Q;L.prototype.visitDate=Q;L.prototype.visitDateDay=Q;L.prototype.visitDateMillisecond=Q;L.prototype.visitTimestamp=Q;L.prototype.visitTimestampSecond=Q;L.prototype.visitTimestampMillisecond=Q;L.prototype.visitTimestampMicrosecond=Q;L.prototype.visitTimestampNanosecond=Q;L.prototype.visitTime=Q;L.prototype.visitTimeSecond=Q;L.prototype.visitTimeMillisecond=Q;L.prototype.visitTimeMicrosecond=Q;L.prototype.visitTimeNanosecond=Q;L.prototype.visitDecimal=Q;L.prototype.visitList=Q;L.prototype.visitStruct=Q;L.prototype.visitUnion=Q;L.prototype.visitDenseUnion=Gd;L.prototype.visitSparseUnion=Gd;L.prototype.visitDictionary=Q;L.prototype.visitInterval=Q;L.prototype.visitIntervalDayTime=Q;L.prototype.visitIntervalYearMonth=Q;L.prototype.visitFixedSizeList=Q;L.prototype.visitMap=Q;var Bn=new L;var U=class extends R{};function z(r){let{type:t}=r;if(r.nullCount===0&&r.stride===1&&(t.typeId===_.Timestamp||t instanceof Lt&&t.bitWidth!==64||t instanceof tr&&t.bitWidth!==64||t instanceof ye&&t.precision!==At.HALF))return new Pi(r.data.length,n=>{let i=r.data[n];return i.values.subarray(0,i.length)[Symbol.iterator]()});let e=0;return new Pi(r.data.length,n=>{let s=r.data[n].length,o=r.slice(e,e+s);return e+=s,new ul(o)})}var ul=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};U.prototype.visitNull=z;U.prototype.visitBool=z;U.prototype.visitInt=z;U.prototype.visitInt8=z;U.prototype.visitInt16=z;U.prototype.visitInt32=z;U.prototype.visitInt64=z;U.prototype.visitUint8=z;U.prototype.visitUint16=z;U.prototype.visitUint32=z;U.prototype.visitUint64=z;U.prototype.visitFloat=z;U.prototype.visitFloat16=z;U.prototype.visitFloat32=z;U.prototype.visitFloat64=z;U.prototype.visitUtf8=z;U.prototype.visitBinary=z;U.prototype.visitFixedSizeBinary=z;U.prototype.visitDate=z;U.prototype.visitDateDay=z;U.prototype.visitDateMillisecond=z;U.prototype.visitTimestamp=z;U.prototype.visitTimestampSecond=z;U.prototype.visitTimestampMillisecond=z;U.prototype.visitTimestampMicrosecond=z;U.prototype.visitTimestampNanosecond=z;U.prototype.visitTime=z;U.prototype.visitTimeSecond=z;U.prototype.visitTimeMillisecond=z;U.prototype.visitTimeMicrosecond=z;U.prototype.visitTimeNanosecond=z;U.prototype.visitDecimal=z;U.prototype.visitList=z;U.prototype.visitStruct=z;U.prototype.visitUnion=z;U.prototype.visitDenseUnion=z;U.prototype.visitSparseUnion=z;U.prototype.visitDictionary=z;U.prototype.visitInterval=z;U.prototype.visitIntervalDayTime=z;U.prototype.visitIntervalYearMonth=z;U.prototype.visitFixedSizeList=z;U.prototype.visitMap=z;var ri=new U;var ym=(r,t)=>r+t,yr=class extends R{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===Z.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,i)=>n+ke.visit(i,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,i)=>n+ke.visit(i,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},bm=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),gm=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),wm=({valueOffsets:r,stride:t,children:e},n)=>{let i=e[0],{[n*t]:s}=r,{[n*t+1]:o}=r,l=ke.getVisitFn(i.type),d=i.slice(s,o-s),h=8;for(let u=-1,g=o-s;++u<g;)h+=l(d,u);return h},vm=({stride:r,children:t},e)=>{let n=t[0],i=n.slice(e*r,r),s=ke.getVisitFn(n.type),o=0;for(let l=-1,d=i.length;++l<d;)o+=s(i,l);return o},Sm=(r,t)=>r.type.mode===Dt.Dense?$d(r,t):Xd(r,t),$d=({type:r,children:t,typeIds:e,valueOffsets:n},i)=>{let s=r.typeIdToChildIndex[e[i]];return 8+ke.visit(t[s],n[i])},Xd=({children:r},t)=>4+ke.visitMany(r,r.map(()=>t)).reduce(ym,0);yr.prototype.visitUtf8=bm;yr.prototype.visitBinary=gm;yr.prototype.visitList=wm;yr.prototype.visitFixedSizeList=vm;yr.prototype.visitUnion=Sm;yr.prototype.visitDenseUnion=$d;yr.prototype.visitSparseUnion=Xd;var ke=new yr;var Kd,Jd={},qd={},H=class{constructor(t){var e,n,i;let s=t[0]instanceof H?t.flatMap(l=>l.data):t;if(s.length===0||s.some(l=>!(l instanceof lt)))throw new TypeError("Vector constructor expects an Array of Data instances.");let o=(e=s[0])===null||e===void 0?void 0:e.type;switch(s.length){case 0:this._offsets=[0];break;case 1:{let{get:l,set:d,indexOf:h,byteLength:u}=Jd[o.typeId],g=s[0];this.isValid=w=>Hi(g,w),this.get=w=>l(g,w),this.set=(w,T)=>d(g,w,T),this.indexOf=w=>h(g,w),this.getByteLength=w=>u(g,w),this._offsets=[0,g.length];break}default:Object.setPrototypeOf(this,qd[o.typeId]),this._offsets=bo(s);break}this.data=s,this.type=o,this.stride=Me(o),this.numChildren=(i=(n=o.children)===null||n===void 0?void 0:n.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=yo(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return`${this.VectorName}<${this.type[Symbol.toStringTag]}>`}get VectorName(){return`${_[this.type.typeId]}Vector`}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return ri.visit(this)}concat(...t){return new H(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new H(Ni(this,t,e,({data:n,_offsets:i},s,o)=>go(n,i,s,o)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:i,ArrayType:s}=this;switch(t.typeId){case _.Int:case _.Float:case _.Decimal:case _.Time:case _.Timestamp:switch(e.length){case 0:return new s;case 1:return e[0].values.subarray(0,n*i);default:return e.reduce((o,{values:l,length:d})=>(o.array.set(l.subarray(0,d*i),o.offset),o.offset+=d*i,o),{array:new s(n*i),offset:0}).array}}return[...this]}toString(){return`[${[...this].join(",")}]`}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new H(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return B.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(B.isDictionary(this.type)){let t=new ni(this.data[0].dictionary),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new H(e)}return new ni(this)}unmemoize(){if(B.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new H(e)}return this}};Kd=Symbol.toStringTag;H[Kd]=(r=>{r.type=B.prototype,r.data=[],r.length=0,r.stride=1,r.numChildren=0,r._nullCount=-1,r._byteLength=-1,r._offsets=new Uint32Array([0]),r[Symbol.isConcatSpreadable]=!0;let t=Object.keys(_).map(e=>_[e]).filter(e=>typeof e=="number"&&e!==_.NONE);for(let e of t){let n=Ht.getVisitFnByTypeId(e),i=ne.getVisitFnByTypeId(e),s=Bn.getVisitFnByTypeId(e),o=ke.getVisitFnByTypeId(e);Jd[e]={get:n,set:i,indexOf:s,byteLength:o},qd[e]=Object.create(r,{isValid:{value:an(Hi)},get:{value:an(Ht.getVisitFnByTypeId(e))},set:{value:wo(ne.getVisitFnByTypeId(e))},indexOf:{value:vo(Bn.getVisitFnByTypeId(e))},getByteLength:{value:an(ke.getVisitFnByTypeId(e))}})}return"Vector"})(H.prototype);var ni=class extends H{constructor(t){super(t.data);let e=this.get,n=this.set,i=this.slice,s=new Array(this.length);Object.defineProperty(this,"get",{value(o){let l=s[o];if(l!==void 0)return l;let d=e.call(this,o);return s[o]=d,d}}),Object.defineProperty(this,"set",{value(o,l){n.call(this,o,l),s[o]=l}}),Object.defineProperty(this,"slice",{value:(o,l)=>new ni(i.call(this,o,l))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new H(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function Qd(r){if(!r||r.length<=0)return function(i){return!0};let t="",e=r.filter(n=>n===n);return e.length>0&&(t=`
    switch (x) {${e.map(n=>`
        case ${Im(n)}:`).join("")}
            return false;
    }`),r.length!==e.length&&(t=`if (x !== x) return false;
${t}`),new Function("x",`${t}
return true;`)}function Im(r){return typeof r!="bigint"?Qe(r):Cs?`${Qe(r)}n`:`"${Qe(r)}"`}var dl=(r,t)=>(Math.ceil(r)*t+63&-64||64)/t,Tm=(r,t=0)=>r.length>=t?r.subarray(0,t):Xn(new r.constructor(t),r,0),ln=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,i=this.buffer.length;n>=i&&this._resize(i===0?dl(n*1,this.BYTES_PER_ELEMENT):dl(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=dl(t*this.stride,this.BYTES_PER_ELEMENT);let e=Tm(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=Xn(new this.ArrayType(t),this.buffer)}};ln.prototype.offset=0;var Wr=class extends ln{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},ii=class extends Wr{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),i=t>>3,s=t%8,o=n[i]>>s&1;return e?o===0&&(n[i]|=1<<s,++this.numValid):o===1&&(n[i]&=~(1<<s),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},si=class extends Wr{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,i=this.reserve(t-n+1).buffer;return n<t++&&i.fill(i[n],n,t),i[t]=i[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var Et=class{constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=Me(t),this._nulls=new ii,e&&e.length>0&&(this._isValid=Qd(e))}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}toVector(){return new H([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:i,_typeIds:s,children:o}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),o.reduce((l,d)=>l+d.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e=`${this.numChildren}`){throw new Error(`Cannot append children to non-nested type "${this.type}"`)}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,i,{type:s,length:o,nullCount:l,_typeIds:d,_offsets:h,_values:u,_nulls:g}=this;(e=d==null?void 0:d.flush(o))?i=h==null?void 0:h.flush(o):(i=h==null?void 0:h.flush(o))?t=u==null?void 0:u.flush(h.last()):t=u==null?void 0:u.flush(o),l>0&&(n=g==null?void 0:g.flush(o));let w=this.children.map(T=>T.flush());return this.clear(),V({type:s,length:o,nullCount:l,children:w,child:w[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let s of this.children)s.clear();return this}};Et.prototype.length=1;Et.prototype.stride=1;Et.prototype.children=null;Et.prototype.finished=!1;Et.prototype.nullValues=null;Et.prototype._isValid=()=>!0;var Jt=class extends Et{constructor(t){super(t),this._values=new Wr(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},br=class extends Et{constructor(t){super(t),this._pendingLength=0,this._offsets=new si}setValue(t,e){let n=this._pending||(this._pending=new Map),i=n.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=e instanceof mr?e[We].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var Dn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,i){return t.prep(8,24),t.writeInt64(i),t.pad(4),t.writeInt32(n),t.writeInt64(e),t.offset()}};var gr=new Int32Array(2),So=new Float32Array(gr.buffer),Io=new Float64Array(gr.buffer),oi=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var Vt=class{constructor(t,e){this.low=t|0,this.high=e|0}static create(t,e){return t==0&&e==0?Vt.ZERO:new Vt(t,e)}toFloat64(){return(this.low>>>0)+this.high*4294967296}equals(t){return this.low==t.low&&this.high==t.high}};Vt.ZERO=new Vt(0,0);var Vi;(function(r){r[r.UTF8_BYTES=1]="UTF8_BYTES",r[r.UTF16_STRING=2]="UTF16_STRING"})(Vi||(Vi={}));var _e=class{constructor(t){this.bytes_=t,this.position_=0}static allocate(t){return new _e(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return new Vt(this.readInt32(t),this.readInt32(t+4))}readUint64(t){return new Vt(this.readUint32(t),this.readUint32(t+4))}readFloat32(t){return gr[0]=this.readInt32(t),So[0]}readFloat64(t){return gr[oi?0:1]=this.readInt32(t),gr[oi?1:0]=this.readInt32(t+4),Io[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)}writeUint64(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)}writeFloat32(t,e){So[0]=e,this.writeInt32(t,gr[0])}writeFloat64(t,e){Io[0]=e,this.writeInt32(t,gr[oi?0:1]),this.writeInt32(t+4,gr[oi?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t),i="",s=0;if(t+=4,e===Vi.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;s<n;){let o,l=this.readUint8(t+s++);if(l<192)o=l;else{let d=this.readUint8(t+s++);if(l<224)o=(l&31)<<6|d&63;else{let h=this.readUint8(t+s++);if(l<240)o=(l&15)<<12|(d&63)<<6|h&63;else{let u=this.readUint8(t+s++);o=(l&7)<<18|(d&63)<<12|(h&63)<<6|u&63}}}o<65536?i+=String.fromCharCode(o):(o-=65536,i+=String.fromCharCode((o>>10)+55296,(o&(1<<10)-1)+56320))}return i}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createLong(t,e){return Vt.create(t,e)}createScalarList(t,e){let n=[];for(let i=0;i<e;++i)t(i)!==null&&n.push(t(i));return n}createObjList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s.unpack())}return n}};var zr=class{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null;let e;t?e=t:e=1024,this.bb=_e.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let i=this.bb.capacity();this.bb=zr.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||!e.equals(n))&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,i=_e.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let i=2;this.addInt16(t-this.object_start);let s=(n+i)*2;this.addInt16(s);let o=0,l=this.space;t:for(e=0;e<this.vtables.length;e++){let d=this.bb.capacity()-this.vtables[e];if(s==this.bb.readInt16(d)){for(let h=2;h<s;h+=2)if(this.bb.readInt16(l+h)!=this.bb.readInt16(d+h))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let i=n?4:0;if(e){let s=e;if(this.prep(this.minalign,4+4+i),s.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let o=4-1;o>=0;o--)this.writeInt8(s.charCodeAt(o))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,i=n-this.bb.readInt32(n);if(!(this.bb.readInt16(i+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(!t)return 0;let e;if(t instanceof Uint8Array)e=t;else{e=[];let n=0;for(;n<t.length;){let i,s=t.charCodeAt(n++);if(s<55296||s>=56320)i=s;else{let o=t.charCodeAt(n++);i=(s<<10)+o+(65536-(55296<<10)-56320)}i<128?e.push(i):(i<2048?e.push(i>>6&31|192):(i<65536?e.push(i>>12&15|224):e.push(i>>18&7|240,i>>12&63|128),e.push(i>>6&63|128)),e.push(i&63|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,i=this.space,s=this.bb.bytes();n<e.length;n++)s[i++]=e[n];return this.endVector()}createLong(t,e){return Vt.create(t,e)}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let i=t[n];if(i!==null)e.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t),this.endVector()}};var vt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new vt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new vt).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return vt.startKeyValue(t),vt.addKey(t,e),vt.addValue(t,n),vt.endKeyValue(t)}};var cn;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(cn||(cn={}));var un;(function(r){r[r.Little=0]="Little",r[r.Big=1]="Big"})(un||(un={}));var Wi;(function(r){r[r.DenseArray=0]="DenseArray"})(Wi||(Wi={}));var qt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new qt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new qt).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return qt.startInt(t),qt.addBitWidth(t,e),qt.addIsSigned(t,n),qt.endInt(t)}};var Ce=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new Ce).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new Ce).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new qt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):Wi.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,Wi.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var wr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new wr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new wr).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return wr.startBinary(t),wr.endBinary(t)}};var vr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new vr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new vr).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return vr.startBool(t),vr.endBool(t)}};var zi;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(zi||(zi={}));var be=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new be).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new be).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):zi.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,zi.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return be.startDate(t),be.addUnit(t,e),be.endDate(t)}};var Qt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new Qt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new Qt).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,i){return Qt.startDecimal(t),Qt.addPrecision(t,e),Qt.addScale(t,n),Qt.addBitWidth(t,i),Qt.endDecimal(t)}};var dn;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(dn||(dn={}));var ge=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new ge).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new ge).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return ge.startFixedSizeBinary(t),ge.addByteWidth(t,e),ge.endFixedSizeBinary(t)}};var we=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new we).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new we).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return we.startFixedSizeList(t),we.addListSize(t,e),we.endFixedSizeList(t)}};var Yi;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(Yi||(Yi={}));var ve=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new ve).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new ve).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Yi.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,Yi.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return ve.startFloatingPoint(t),ve.addPrecision(t,e),ve.endFloatingPoint(t)}};var Gi;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Gi||(Gi={}));var Se=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new Se).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new Se).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Gi.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Gi.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return Se.startInterval(t),Se.addUnit(t,e),Se.endInterval(t)}};var Sr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new Sr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new Sr).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return Sr.startList(t),Sr.endList(t)}};var Ie=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new Ie).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new Ie).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return Ie.startMap(t),Ie.addKeysSorted(t,e),Ie.endMap(t)}};var Ir=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new Ir).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new Ir).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return Ir.startNull(t),Ir.endNull(t)}};var Tr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new Tr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new Tr).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return Tr.startStruct_(t),Tr.endStruct_(t)}};var oe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new oe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new oe).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):dn.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,dn.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return oe.startTime(t),oe.addUnit(t,e),oe.addBitWidth(t,n),oe.endTime(t)}};var ae=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new ae).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new ae).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):dn.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,dn.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return ae.startTimestamp(t),ae.addUnit(t,e),ae.addTimezone(t,n),ae.endTimestamp(t)}};var $i;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})($i||($i={}));var Zt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new Zt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new Zt).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):$i.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,$i.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return Zt.startUnion(t),Zt.addMode(t,e),Zt.addTypeIds(t,n),Zt.endUnion(t)}};var Ar=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new Ar).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new Ar).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return Ar.startUtf8(t),Ar.endUtf8(t)}};var Ft;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.FloatingPoint=3]="FloatingPoint",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct_=13]="Struct_",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Duration=18]="Duration",r[r.LargeBinary=19]="LargeBinary",r[r.LargeUtf8=20]="LargeUtf8",r[r.LargeList=21]="LargeList"})(Ft||(Ft={}));var Wt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new Wt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new Wt).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):Ft.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Ce).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new Wt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new vt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,Ft.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var Ot=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new Ot).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new Ot).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):un.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new Wt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new vt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):this.bb.createLong(0,0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,un.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,i,s){return Ot.startSchema(t),Ot.addEndianness(t,e),Ot.addFields(t,n),Ot.addCustomMetadata(t,i),Ot.addFeatures(t,s),Ot.endSchema(t)}};var le=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new le).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new le).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):cn.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Ot).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Dn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new Dn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new vt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,cn.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var rt=class{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=fl(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,e)=>`${e}: ${t}`).join(", ")} }>`}select(t){let e=new Set(t),n=this.fields.filter(i=>e.has(i.name));return new rt(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new rt(e,this.metadata)}assign(...t){let e=t[0]instanceof rt?t[0]:Array.isArray(t[0])?new rt(t[0]):new rt(t),n=[...this.fields],i=Ao(Ao(new Map,this.metadata),e.metadata),s=e.fields.filter(l=>{let d=n.findIndex(h=>h.name===l.name);return~d?(n[d]=l.clone({metadata:Ao(Ao(new Map,n[d].metadata),l.metadata)}))&&!1:!0}),o=fl(s,new Map);return new rt([...n,...s],i,new Map([...this.dictionaries,...o]))}};rt.prototype.fields=null;rt.prototype.metadata=null;rt.prototype.dictionaries=null;var Y=class{constructor(t,e,n=!1,i){this.name=t,this.type=e,this.nullable=n,this.metadata=i||new Map}static new(...t){let[e,n,i,s]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),i===void 0&&(i=t[0].nullable),s===void 0&&(s=t[0].metadata)),new Y(`${e}`,n,i,s)}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[e,n,i,s]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,i=this.nullable,s=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:i=this.nullable,metadata:s=this.metadata}=t[0],Y.new(e,n,i,s)}};Y.prototype.type=null;Y.prototype.name=null;Y.prototype.nullable=null;Y.prototype.metadata=null;function Ao(r,t){return new Map([...r||new Map,...t||new Map])}function fl(r,t=new Map){for(let e=-1,n=r.length;++e<n;){let s=r[e].type;if(B.isDictionary(s)){if(!t.has(s.id))t.set(s.id,s.dictionary);else if(t.get(s.id)!==s.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&fl(s.children,t)}return t}var Zd=Vt,Am=zr,Em=_e,Yr=class{constructor(t,e=Kt.V4,n,i){this.schema=t,this.version=e,n&&(this._recordBatches=n),i&&(this._dictionaryBatches=i)}static decode(t){t=new Em(j(t));let e=le.getRootAsFooter(t),n=rt.decode(e.schema());return new hl(n,e)}static encode(t){let e=new Am,n=rt.encode(e,t.schema);le.startRecordBatchesVector(e,t.numRecordBatches);for(let o of[...t.recordBatches()].slice().reverse())ar.encode(e,o);let i=e.endVector();le.startDictionariesVector(e,t.numDictionaries);for(let o of[...t.dictionaryBatches()].slice().reverse())ar.encode(e,o);let s=e.endVector();return le.startFooter(e),le.addSchema(e,n),le.addVersion(e,Kt.V4),le.addRecordBatches(e,i),le.addDictionaries(e,s),le.finishFooterBuffer(e,le.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var hl=class extends Yr{constructor(t,e){super(t,e.version()),this._footer=e}get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return ar.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return ar.decode(e)}return null}},ar=class{constructor(t,e,n){this.metaDataLength=t,this.offset=typeof n=="number"?n:n.low,this.bodyLength=typeof e=="number"?e:e.low}static decode(t){return new ar(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,i=new Zd(e.offset,0),s=new Zd(e.bodyLength,0);return Dn.createBlock(t,i,n,s)}};var St=Object.freeze({done:!0,value:void 0}),Xi=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},On=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},Eo=class extends On{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return E(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(St);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return ee.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return ee.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return E(this,void 0,void 0,function*(){return yield this.abort(t),St})}return(t){return E(this,void 0,void 0,function*(){return yield this.close(),St})}read(t){return E(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return E(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(St)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var Er=class extends Eo{write(t){if((t=j(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?Mi(this.toUint8Array(!0)):this.toUint8Array(!1).then(Mi)}toUint8Array(t=!1){return t?Oe(this._values)[0]:(()=>E(this,void 0,void 0,function*(){var e,n;let i=[],s=0;try{for(var o=Ne(this),l;l=yield o.next(),!l.done;){let d=l.value;i.push(d),s+=d.byteLength}}catch(d){e={error:d}}finally{try{l&&!l.done&&(n=o.return)&&(yield n.call(o))}finally{if(e)throw e.error}}return Oe(i,s)[0]}))()}},Fr=class{constructor(t){t&&(this.source=new pl(ee.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},Te=class{constructor(t){t instanceof Te?this.source=t.source:t instanceof Er?this.source=new Gr(ee.fromAsyncIterable(t)):Hs(t)?this.source=new Gr(ee.fromNodeStream(t)):ki(t)?this.source=new Gr(ee.fromDOMStream(t)):js(t)?this.source=new Gr(ee.fromDOMStream(t.body)):Je(t)?this.source=new Gr(ee.fromIterable(t)):Ke(t)?this.source=new Gr(ee.fromAsyncIterable(t)):He(t)&&(this.source=new Gr(ee.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},pl=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||St)}return(t){return Object.create(this.source.return&&this.source.return(t)||St)}},Gr=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return E(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return E(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return E(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return E(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return E(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||St;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return E(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||St;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var Ki=class extends Fr{constructor(t,e){super(),this.position=0,this.buffer=j(t),this.size=typeof e>"u"?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:i}=this;return e&&i<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,i+Math.min(n-i,t)),e.subarray(i,this.position)):null}readAt(t,e){let n=this.buffer,i=Math.min(this.size,t+e);return n?n.subarray(t,i):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},fn=class extends Te{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>E(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return E(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return E(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return E(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:i}=this;if(e&&i<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let s=i,o=0,l=0,d=Math.min(n,s+Math.min(n-s,t)),h=new Uint8Array(Math.max(0,(this.position=d)-s));for(;(s+=l)<d&&(o+=l)<h.byteLength;)({bytesRead:l}=yield e.read(h,o,h.byteLength-o,s));return h}return null})}readAt(t,e){return E(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:i}=this;if(n&&t+e<i){let s=Math.min(i,t+e),o=new Uint8Array(s-t);return(yield n.read(o,0,e,t)).buffer}return new Uint8Array(e)})}close(){return E(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return E(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return E(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var ml={};In(ml,{BaseInt64:()=>Ji,Int128:()=>Ae,Int64:()=>te,Uint64:()=>ct});function ai(r){return r<0&&(r=4294967295+r+1),`0x${r.toString(16)}`}var li=8,_l=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],Ji=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=e[3]*n[3];this.buffer[0]=i&65535;let s=i>>>16;return i=e[2]*n[3],s+=i,i=e[3]*n[2]>>>0,s+=i,this.buffer[0]+=s<<16,this.buffer[1]=s>>>0<i?65536:0,this.buffer[1]+=s>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return`${ai(this.buffer[1])} ${ai(this.buffer[0])}`}},ct=class extends Ji{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return ct.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return ct.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,i=new ct(e);for(let s=0;s<n;){let o=li<n-s?li:n-s,l=new ct(new Uint32Array([Number.parseInt(t.slice(s,s+o),10),0])),d=new ct(new Uint32Array([_l[o],0]));i.times(d),i.plus(l),s+=o}return i}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)ct.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new ct(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new ct(new Uint32Array(t.buffer)).plus(e)}},te=class extends Ji{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return te.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return te.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),i=t.length,s=new te(e);for(let o=n?1:0;o<i;){let l=li<i-o?li:i-o,d=new te(new Uint32Array([Number.parseInt(t.slice(o,o+l),10),0])),h=new te(new Uint32Array([_l[l],0]));s.times(h),s.plus(d),o+=l}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)te.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new te(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new te(new Uint32Array(t.buffer)).plus(e)}},Ae=class{constructor(t){this.buffer=t}high(){return new te(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new te(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new ct(new Uint32Array([this.buffer[3],0])),n=new ct(new Uint32Array([this.buffer[2],0])),i=new ct(new Uint32Array([this.buffer[1],0])),s=new ct(new Uint32Array([this.buffer[0],0])),o=new ct(new Uint32Array([t.buffer[3],0])),l=new ct(new Uint32Array([t.buffer[2],0])),d=new ct(new Uint32Array([t.buffer[1],0])),h=new ct(new Uint32Array([t.buffer[0],0])),u=ct.multiply(s,h);this.buffer[0]=u.low();let g=new ct(new Uint32Array([u.high(),0]));return u=ct.multiply(i,h),g.plus(u),u=ct.multiply(s,d),g.plus(u),this.buffer[1]=g.low(),this.buffer[3]=g.lessThan(u)?1:0,this.buffer[2]=g.high(),new ct(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(ct.multiply(n,h)).plus(ct.multiply(i,d)).plus(ct.multiply(s,l)),this.buffer[3]+=ct.multiply(e,h).plus(ct.multiply(n,d)).plus(ct.multiply(i,l)).plus(ct.multiply(s,o)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return`${ai(this.buffer[3])} ${ai(this.buffer[2])} ${ai(this.buffer[1])} ${ai(this.buffer[0])}`}static multiply(t,e){return new Ae(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new Ae(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return Ae.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return Ae.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),i=t.length,s=new Ae(e);for(let o=n?1:0;o<i;){let l=li<i-o?li:i-o,d=new Ae(new Uint32Array([Number.parseInt(t.slice(o,o+l),10),0,0,0])),h=new Ae(new Uint32Array([_l[l],0,0,0]));s.times(h),s.plus(d),o+=l}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,i=t.length;++n<i;)Ae.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var qi=class extends R{constructor(t,e,n,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=i}visit(t){return super.visit(t instanceof Y?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return V({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===Dt.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return V({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},Fo=class extends qi{constructor(t,e,n,i){super(new Uint8Array(0),e,n,i),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):Fn(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return q(Uint8Array,q(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return q(Uint8Array,q(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return B.isTimestamp(t)?q(Uint8Array,te.convertArray(n[e])):(B.isInt(t)||B.isTime(t))&&t.bitWidth===64?q(Uint8Array,te.convertArray(n[e])):B.isDate(t)&&t.unit===re.MILLISECOND?q(Uint8Array,te.convertArray(n[e])):B.isDecimal(t)?q(Uint8Array,Ae.convertArray(n[e])):B.isBinary(t)||B.isFixedSizeBinary(t)?Fm(n[e]):B.isBool(t)?Fn(n[e]):B.isUtf8(t)?en(n[e].join("")):q(Uint8Array,q(t.ArrayType,n[e].map(i=>+i)))}};function Fm(r){let t=r.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var ci=class extends br{constructor(t){super(t),this._values=new ln(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,j(e))}_flushPending(t,e){let n=this._offsets,i=this._values.reserve(e).buffer,s=0;for(let[o,l]of t)if(l===void 0)n.set(o,0);else{let d=l.length;i.set(l,s),n.set(o,d),s+=d}}};var xo=class extends Et{constructor(t){super(t),this._values=new ii}setValue(t,e){this._values.set(t,+e)}};var Rn=class extends Jt{};Rn.prototype._setValue=qa;var Qi=class extends Rn{};Qi.prototype._setValue=eo;var Zi=class extends Rn{};Zi.prototype._setValue=ro;var ts=class extends Jt{};ts.prototype._setValue=tl;var Bo=class extends Et{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new Re(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=Mn({type:this.type.indices,nullValues:e}),this.dictionary=Mn({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,i=this.valueToKey(e),s=n[i];return s===void 0&&(n[i]=s=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,s)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:`${t}`}};var es=class extends Jt{};es.prototype._setValue=Ja;var Do=class extends Et{setValue(t,e){let[n]=this.children,i=t*this.stride;for(let s=-1,o=e.length;++s<o;)n.set(i+s,e[s])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new nr(this.type.listSize,new Y(e,t.type,!0)),n}};var kn=class extends Jt{setValue(t,e){this._values.set(t,e)}},Oo=class extends kn{setValue(t,e){super.setValue(t,Ui(e))}},Ro=class extends kn{},Mo=class extends kn{};var Cn=class extends Jt{};Cn.prototype._setValue=el;var rs=class extends Cn{};rs.prototype._setValue=fo;var ns=class extends Cn{};ns.prototype._setValue=ho;var Ye=class extends Jt{setValue(t,e){this._values.set(t,e)}},ko=class extends Ye{},Co=class extends Ye{},Lo=class extends Ye{},Uo=class extends Ye{},No=class extends Ye{},jo=class extends Ye{},Po=class extends Ye{},Ho=class extends Ye{};var Vo=class extends br{constructor(t){super(t),this._offsets=new si}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new er(new Y(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(typeof s>"u")e.set(i,0);else{let o=s.length,l=e.set(i,o).buffer[i];for(let d=-1;++d<o;)n.set(l+d,s[d])}}};var Wo=class extends br{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),i=this._pending||(this._pending=new Map),s=i.get(t);s&&(this._pendingLength-=s.size),this._pendingLength+=n.size,i.set(t,n)}addChild(t,e=`${this.numChildren}`){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new ir(new Y(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(s===void 0)e.set(i,0);else{let{[i]:o,[i+1]:l}=e.set(i,s.size).buffer;for(let d of s.entries())if(n.set(o,d),++o>=l)break}}};var zo=class extends Et{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var Yo=class extends Et{setValue(t,e){let{children:n,type:i}=this;switch(Array.isArray(e)||e.constructor){case!0:return i.children.forEach((s,o)=>n[o].set(t,e[o]));case Map:return i.children.forEach((s,o)=>n[o].set(t,e.get(s.name)));default:return i.children.forEach((s,o)=>n[o].set(t,e[s.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e=`${this.numChildren}`){let n=this.children.push(t);return this.type=new wt([...this.type.children,new Y(e,t.type,!0)]),n}};var $r=class extends Jt{};$r.prototype._setValue=Qa;var is=class extends $r{};is.prototype._setValue=no;var ss=class extends $r{};ss.prototype._setValue=io;var os=class extends $r{};os.prototype._setValue=so;var as=class extends $r{};as.prototype._setValue=oo;var Xr=class extends Jt{};Xr.prototype._setValue=Za;var ls=class extends Xr{};ls.prototype._setValue=ao;var cs=class extends Xr{};cs.prototype._setValue=lo;var us=class extends Xr{};us.prototype._setValue=co;var ds=class extends Xr{};ds.prototype._setValue=uo;var ui=class extends Et{constructor(t){super(t),this._typeIds=new Wr(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let i=this.type.typeIdToChildIndex[n],s=this.children[i];s==null||s.set(t,e)}addChild(t,e=`${this.children.length}`){let n=this.children.push(t),{type:{children:i,mode:s,typeIds:o}}=this,l=[...i,new Y(e,t.type)];return this.type=new rr(s,[...o,n],l),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},Go=class extends ui{},$o=class extends ui{constructor(t){super(t),this._offsets=new Wr(new Int32Array(0))}setValue(t,e,n){let i=this._typeIds.set(t,n).buffer[t],s=this.getChildAt(this.type.typeIdToChildIndex[i]),o=this._offsets.set(t,s.length).buffer[t];s==null||s.set(o,e)}};var fs=class extends br{constructor(t){super(t),this._values=new ln(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,en(e))}_flushPending(t,e){}};fs.prototype._flushPending=ci.prototype._flushPending;var yl=class extends R{visitNull(){return zo}visitBool(){return xo}visitInt(){return Ye}visitInt8(){return ko}visitInt16(){return Co}visitInt32(){return Lo}visitInt64(){return Uo}visitUint8(){return No}visitUint16(){return jo}visitUint32(){return Po}visitUint64(){return Ho}visitFloat(){return kn}visitFloat16(){return Oo}visitFloat32(){return Ro}visitFloat64(){return Mo}visitUtf8(){return fs}visitBinary(){return ci}visitFixedSizeBinary(){return es}visitDate(){return Rn}visitDateDay(){return Qi}visitDateMillisecond(){return Zi}visitTimestamp(){return $r}visitTimestampSecond(){return is}visitTimestampMillisecond(){return ss}visitTimestampMicrosecond(){return os}visitTimestampNanosecond(){return as}visitTime(){return Xr}visitTimeSecond(){return ls}visitTimeMillisecond(){return cs}visitTimeMicrosecond(){return us}visitTimeNanosecond(){return ds}visitDecimal(){return ts}visitList(){return Vo}visitStruct(){return Yo}visitUnion(){return ui}visitDenseUnion(){return $o}visitSparseUnion(){return Go}visitDictionary(){return Bo}visitInterval(){return Cn}visitIntervalDayTime(){return rs}visitIntervalYearMonth(){return ns}visitFixedSizeList(){return Do}visitMap(){return Wo}},tf=new yl;var N=class extends R{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,i)=>this.compareFields(n,e[i]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function Ee(r,t){return t instanceof r.constructor}function hs(r,t){return r===t||Ee(r,t)}function Kr(r,t){return r===t||Ee(r,t)&&r.bitWidth===t.bitWidth&&r.isSigned===t.isSigned}function Xo(r,t){return r===t||Ee(r,t)&&r.precision===t.precision}function xm(r,t){return r===t||Ee(r,t)&&r.byteWidth===t.byteWidth}function bl(r,t){return r===t||Ee(r,t)&&r.unit===t.unit}function ps(r,t){return r===t||Ee(r,t)&&r.unit===t.unit&&r.timezone===t.timezone}function _s(r,t){return r===t||Ee(r,t)&&r.unit===t.unit&&r.bitWidth===t.bitWidth}function Bm(r,t){return r===t||Ee(r,t)&&r.children.length===t.children.length&&xr.compareManyFields(r.children,t.children)}function Dm(r,t){return r===t||Ee(r,t)&&r.children.length===t.children.length&&xr.compareManyFields(r.children,t.children)}function gl(r,t){return r===t||Ee(r,t)&&r.mode===t.mode&&r.typeIds.every((e,n)=>e===t.typeIds[n])&&xr.compareManyFields(r.children,t.children)}function Om(r,t){return r===t||Ee(r,t)&&r.id===t.id&&r.isOrdered===t.isOrdered&&xr.visit(r.indices,t.indices)&&xr.visit(r.dictionary,t.dictionary)}function wl(r,t){return r===t||Ee(r,t)&&r.unit===t.unit}function Rm(r,t){return r===t||Ee(r,t)&&r.listSize===t.listSize&&r.children.length===t.children.length&&xr.compareManyFields(r.children,t.children)}function Mm(r,t){return r===t||Ee(r,t)&&r.keysSorted===t.keysSorted&&r.children.length===t.children.length&&xr.compareManyFields(r.children,t.children)}N.prototype.visitNull=hs;N.prototype.visitBool=hs;N.prototype.visitInt=Kr;N.prototype.visitInt8=Kr;N.prototype.visitInt16=Kr;N.prototype.visitInt32=Kr;N.prototype.visitInt64=Kr;N.prototype.visitUint8=Kr;N.prototype.visitUint16=Kr;N.prototype.visitUint32=Kr;N.prototype.visitUint64=Kr;N.prototype.visitFloat=Xo;N.prototype.visitFloat16=Xo;N.prototype.visitFloat32=Xo;N.prototype.visitFloat64=Xo;N.prototype.visitUtf8=hs;N.prototype.visitBinary=hs;N.prototype.visitFixedSizeBinary=xm;N.prototype.visitDate=bl;N.prototype.visitDateDay=bl;N.prototype.visitDateMillisecond=bl;N.prototype.visitTimestamp=ps;N.prototype.visitTimestampSecond=ps;N.prototype.visitTimestampMillisecond=ps;N.prototype.visitTimestampMicrosecond=ps;N.prototype.visitTimestampNanosecond=ps;N.prototype.visitTime=_s;N.prototype.visitTimeSecond=_s;N.prototype.visitTimeMillisecond=_s;N.prototype.visitTimeMicrosecond=_s;N.prototype.visitTimeNanosecond=_s;N.prototype.visitDecimal=hs;N.prototype.visitList=Bm;N.prototype.visitStruct=Dm;N.prototype.visitUnion=gl;N.prototype.visitDenseUnion=gl;N.prototype.visitSparseUnion=gl;N.prototype.visitDictionary=Om;N.prototype.visitInterval=wl;N.prototype.visitIntervalDayTime=wl;N.prototype.visitIntervalYearMonth=wl;N.prototype.visitFixedSizeList=Rm;N.prototype.visitMap=Mm;var xr=new N;function Ln(r,t){return xr.compareSchemas(r,t)}function ef(r,t){return xr.compareFields(r,t)}function rf(r,t){return xr.visit(r,t)}function Mn(r){let t=r.type,e=new(tf.getVisitFn(t)())(r);if(t.children&&t.children.length>0){let n=r.children||[],i={nullValues:r.nullValues},s=Array.isArray(n)?(o,l)=>n[l]||i:({name:o})=>n[o]||i;for(let[o,l]of t.children.entries()){let{type:d}=l,h=s(l,o);e.children.push(Mn(Object.assign(Object.assign({},h),{type:d})))}}return e}function Ko(r,t){return km(r,t.map(e=>e.data.concat()))}function km(r,t){let e=[...r.fields],n=[],i={numBatches:t.reduce((g,w)=>Math.max(g,w.length),0)},s=0,o=0,l=-1,d=t.length,h,u=[];for(;i.numBatches-- >0;){for(o=Number.POSITIVE_INFINITY,l=-1;++l<d;)u[l]=h=t[l].shift(),o=Math.min(o,h?h.length:o);Number.isFinite(o)&&(u=Cm(e,o,u,t,i),o>0&&(n[s++]=V({type:new wt(e),length:o,nullCount:0,children:u.slice()})))}return[r=r.assign(e),n.map(g=>new bt(r,g))]}function Cm(r,t,e,n,i){var s;let o=(t+63&-64)>>3;for(let l=-1,d=n.length;++l<d;){let h=e[l],u=h==null?void 0:h.length;if(u>=t)u===t?e[l]=h:(e[l]=h.slice(0,t),i.numBatches=Math.max(i.numBatches,n[l].unshift(h.slice(t,u-t))));else{let g=r[l];r[l]=g.clone({nullable:!0}),e[l]=(s=h==null?void 0:h._changeLengthAndBackfillNullBitmap(t))!==null&&s!==void 0?s:V({type:g.type,length:t,nullCount:t,nullBitmap:new Uint8Array(o)})}}return e}var nf,Mt=class{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new rt([]),this._offsets=[0],this;let i,s;t[0]instanceof rt&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(s=t.pop());let o=d=>{if(d){if(d instanceof bt)return[d];if(d instanceof Mt)return d.batches;if(d instanceof lt){if(d.type instanceof wt)return[new bt(new rt(d.type.children),d)]}else{if(Array.isArray(d))return d.flatMap(h=>o(h));if(typeof d[Symbol.iterator]=="function")return[...d].flatMap(h=>o(h));if(typeof d=="object"){let h=Object.keys(d),u=h.map(T=>new H([d[T]])),g=new rt(h.map((T,tt)=>new Y(String(T),u[tt].type))),[,w]=Ko(g,u);return w.length===0?[new bt(d)]:w}}}return[]},l=t.flatMap(d=>o(d));if(i=(n=i!=null?i:(e=l[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new rt([]),!(i instanceof rt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let d of l){if(!(d instanceof bt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!Ln(i,d.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=l,this._offsets=s!=null?s:bo(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=yo(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?ri.visit(new H(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return`[
  ${this.toArray().join(`,
  `)}
]`}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:i})=>i));return new Mt(e,n.map(i=>new bt(e,i)))}slice(t,e){let n=this.schema;[t,e]=Ni({length:this.numRows},t,e);let i=go(this.data,this._offsets,t,e);return new Mt(n,i.map(s=>new bt(n,s)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],i=V({type:n,length:0,nullCount:0});e.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new H(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new H([V({type:new pe,length:this.numRows})]));let s=n.fields.slice(),o=s[t].clone({type:e.type}),l=this.schema.fields.map((d,h)=>this.getChildAt(h));[s[t],l[t]]=[o,e],[n,i]=Ko(n,l)}return new Mt(n,i)}select(t){let e=this.schema.fields.reduce((n,i,s)=>n.set(i.name,s),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(i=>i.selectAt(t));return new Mt(e,n)}assign(t){let e=this.schema.fields,[n,i]=t.schema.fields.reduce((l,d,h)=>{let[u,g]=l,w=e.findIndex(T=>T.name===d.name);return~w?g[w]=h:u.push(h),l},[[],[]]),s=this.schema.assign(t.schema),o=[...e.map((l,d)=>[d,i[d]]).map(([l,d])=>d===void 0?this.getChildAt(l):t.getChildAt(d)),...n.map(l=>t.getChildAt(l))].filter(Boolean);return new Mt(...Ko(s,o))}};nf=Symbol.toStringTag;Mt[nf]=(r=>(r.schema=null,r.batches=[],r._offsets=new Uint32Array([0]),r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,r.isValid=an(Hi),r.get=an(Ht.getVisitFn(_.Struct)),r.set=wo(ne.getVisitFn(_.Struct)),r.indexOf=vo(Bn.getVisitFn(_.Struct)),r.getByteLength=an(ke.getVisitFn(_.Struct)),"Table"))(Mt.prototype);var of,bt=class{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof rt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=V({nullCount:0,type:new wt(this.schema.fields),children:this.schema.fields.map(e=>V({type:e.type,nullCount:0}))})]=t,!(this.data instanceof lt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=sf(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:i,length:s}=Object.keys(e).reduce((d,h,u)=>(d.children[u]=e[h],d.length=Math.max(d.length,e[h].length),d.fields[u]=Y.new({name:h,type:e[h].type,nullable:!0}),d),{length:0,fields:new Array,children:new Array}),o=new rt(n),l=V({type:new wt(n),length:s,children:i,nullCount:0});[this.schema,this.data]=sf(o,l.children,s);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=af(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Ht.visit(this.data,t)}set(t,e){return ne.visit(this.data,t,e)}indexOf(t,e){return Bn.visit(this.data,t,e)}getByteLength(t){return ke.visit(this.data,t)}[Symbol.iterator](){return ri.visit(new H([this.data]))}toArray(){return[...this]}concat(...t){return new Mt(this.schema,[this,...t])}slice(t,e){let[n]=new H([this.data]).slice(t,e).data;return new bt(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new H([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=this.data;if(t>-1&&t<this.numCols){e||(e=new H([V({type:new pe,length:this.numRows})]));let s=n.fields.slice(),o=i.children.slice(),l=s[t].clone({type:e.type});[s[t],o[t]]=[l,e.data[0]],n=new rt(s,new Map(this.schema.metadata)),i=V({type:new wt(s),children:o})}return new bt(n,i)}select(t){let e=this.schema.select(t),n=new wt(e.fields),i=[];for(let s of t){let o=this.schema.fields.findIndex(l=>l.name===s);~o&&(i[o]=this.data.children[o])}return new bt(e,V({type:n,length:this.numRows,children:i}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(s=>this.data.children[s]).filter(Boolean),i=V({type:new wt(e.fields),length:this.numRows,children:n});return new bt(e,i)}};of=Symbol.toStringTag;bt[of]=(r=>(r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(bt.prototype);function sf(r,t,e=t.reduce((n,i)=>Math.max(n,i.length),0)){var n;let i=[...r.fields],s=[...t],o=(e+63&-64)>>3;for(let[l,d]of r.fields.entries()){let h=t[l];(!h||h.length!==e)&&(i[l]=d.clone({nullable:!0}),s[l]=(n=h==null?void 0:h._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:V({type:d.type,length:e,nullCount:e,nullBitmap:new Uint8Array(o)}))}return[r.assign(i),V({type:new wt(i),length:e,children:s})]}function af(r,t,e=new Map){for(let n=-1,i=r.length;++n<i;){let o=r[n].type,l=t[n];if(B.isDictionary(o)){if(!e.has(o.id))l.dictionary&&e.set(o.id,l.dictionary);else if(e.get(o.id)!==l.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&af(o.children,l.children,e)}return e}var Un=class extends bt{constructor(t){let e=t.fields.map(i=>V({type:i.type})),n=V({type:new wt(t.fields),nullCount:0,children:e});super(t,n)}};var ms;(function(r){r[r.BUFFER=0]="BUFFER"})(ms||(ms={}));var ys;(function(r){r[r.LZ4_FRAME=0]="LZ4_FRAME",r[r.ZSTD=1]="ZSTD"})(ys||(ys={}));var lr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new lr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new lr).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):ys.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):ms.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,ys.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,ms.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return lr.startBodyCompression(t),lr.addCodec(t,e),lr.addMethod(t,n),lr.endBodyCompression(t)}};var di=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var fi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var ce=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new ce).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new ce).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new fi).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new di).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new lr).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var Ge=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new Ge).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new Ge).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new ce).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var hi;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(hi||(hi={}));var Ut=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new Ut).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new Ut).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):cn.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):hi.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new vt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,cn.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,hi.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,t.createLong(0,0))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,i,s,o){return Ut.startMessage(t),Ut.addVersion(t,e),Ut.addHeaderType(t,n),Ut.addHeader(t,i),Ut.addBodyLength(t,s),Ut.addCustomMetadata(t,o),Ut.endMessage(t)}};var Um=Vt,vl=class extends R{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return Ir.startNull(e),Ir.endNull(e)}visitInt(t,e){return qt.startInt(e),qt.addBitWidth(e,t.bitWidth),qt.addIsSigned(e,t.isSigned),qt.endInt(e)}visitFloat(t,e){return ve.startFloatingPoint(e),ve.addPrecision(e,t.precision),ve.endFloatingPoint(e)}visitBinary(t,e){return wr.startBinary(e),wr.endBinary(e)}visitBool(t,e){return vr.startBool(e),vr.endBool(e)}visitUtf8(t,e){return Ar.startUtf8(e),Ar.endUtf8(e)}visitDecimal(t,e){return Qt.startDecimal(e),Qt.addScale(e,t.scale),Qt.addPrecision(e,t.precision),Qt.addBitWidth(e,t.bitWidth),Qt.endDecimal(e)}visitDate(t,e){return be.startDate(e),be.addUnit(e,t.unit),be.endDate(e)}visitTime(t,e){return oe.startTime(e),oe.addUnit(e,t.unit),oe.addBitWidth(e,t.bitWidth),oe.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return ae.startTimestamp(e),ae.addUnit(e,t.unit),n!==void 0&&ae.addTimezone(e,n),ae.endTimestamp(e)}visitInterval(t,e){return Se.startInterval(e),Se.addUnit(e,t.unit),Se.endInterval(e)}visitList(t,e){return Sr.startList(e),Sr.endList(e)}visitStruct(t,e){return Tr.startStruct_(e),Tr.endStruct_(e)}visitUnion(t,e){Zt.startTypeIdsVector(e,t.typeIds.length);let n=Zt.createTypeIdsVector(e,t.typeIds);return Zt.startUnion(e),Zt.addMode(e,t.mode),Zt.addTypeIds(e,n),Zt.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Ce.startDictionaryEncoding(e),Ce.addId(e,new Um(t.id,0)),Ce.addIsOrdered(e,t.isOrdered),n!==void 0&&Ce.addIndexType(e,n),Ce.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return ge.startFixedSizeBinary(e),ge.addByteWidth(e,t.byteWidth),ge.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return we.startFixedSizeList(e),we.addListSize(e,t.listSize),we.endFixedSizeList(e)}visitMap(t,e){return Ie.startMap(e),Ie.addKeysSorted(e,t.keysSorted),Ie.endMap(e)}},Jo=new vl;function df(r,t=new Map){return new rt(Nm(r,t),qo(r.customMetadata),t)}function Sl(r){return new ie(r.count,hf(r.columns),pf(r.columns))}function ff(r){return new xe(Sl(r.data),r.id,r.isDelta)}function Nm(r,t){return(r.fields||[]).filter(Boolean).map(e=>Y.fromJSON(e,t))}function lf(r,t){return(r.children||[]).filter(Boolean).map(e=>Y.fromJSON(e,t))}function hf(r){return(r||[]).reduce((t,e)=>[...t,new cr(e.count,jm(e.VALIDITY)),...hf(e.children)],[])}function pf(r,t=[]){for(let e=-1,n=(r||[]).length;++e<n;){let i=r[e];i.VALIDITY&&t.push(new Fe(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new Fe(t.length,i.TYPE.length)),i.OFFSET&&t.push(new Fe(t.length,i.OFFSET.length)),i.DATA&&t.push(new Fe(t.length,i.DATA.length)),t=pf(i.children,t)}return t}function jm(r){return(r||[]).reduce((t,e)=>t+ +(e===0),0)}function _f(r,t){let e,n,i,s,o,l;return!t||!(s=r.dictionary)?(o=uf(r,lf(r,t)),i=new Y(r.name,o,r.nullable,qo(r.customMetadata))):t.has(e=s.id)?(n=(n=s.indexType)?cf(n):new _r,l=new Re(t.get(e),n,e,s.isOrdered),i=new Y(r.name,l,r.nullable,qo(r.customMetadata))):(n=(n=s.indexType)?cf(n):new _r,t.set(e,o=uf(r,lf(r,t))),l=new Re(o,n,e,s.isOrdered),i=new Y(r.name,l,r.nullable,qo(r.customMetadata))),i||null}function qo(r){return new Map(Object.entries(r||{}))}function cf(r){return new Lt(r.isSigned,r.bitWidth)}function uf(r,t){let e=r.type.name;switch(e){case"NONE":return new pe;case"null":return new pe;case"binary":return new kr;case"utf8":return new Cr;case"bool":return new Lr;case"list":return new er((t||[])[0]);case"struct":return new wt(t||[]);case"struct_":return new wt(t||[])}switch(e){case"int":{let n=r.type;return new Lt(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=r.type;return new ye(At[n.precision])}case"decimal":{let n=r.type;return new Ur(n.scale,n.precision,n.bitWidth)}case"date":{let n=r.type;return new Nr(re[n.unit])}case"time":{let n=r.type;return new tr(Z[n.unit],n.bitWidth)}case"timestamp":{let n=r.type;return new jr(Z[n.unit],n.timezone)}case"interval":{let n=r.type;return new Pr(he[n.unit])}case"union":{let n=r.type;return new rr(Dt[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=r.type;return new Hr(n.byteWidth)}case"fixedsizelist":{let n=r.type;return new nr(n.listSize,(t||[])[0])}case"map":{let n=r.type;return new ir((t||[])[0],n.keysSorted)}}throw new Error(`Unrecognized type: "${e}"`)}var Nn=Vt,Pm=zr,Hm=_e,zt=class{constructor(t,e,n,i){this._version=e,this._headerType=n,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=typeof t=="number"?t:t.low}static fromJSON(t,e){let n=new zt(0,Kt.V4,e);return n._createHeader=Vm(t,e),n}static decode(t){t=new Hm(j(t));let e=Ut.getRootAsMessage(t),n=e.bodyLength(),i=e.version(),s=e.headerType(),o=new zt(n,i,s);return o._createHeader=Wm(e,s),o}static encode(t){let e=new Pm,n=-1;return t.isSchema()?n=rt.encode(e,t.header()):t.isRecordBatch()?n=ie.encode(e,t.header()):t.isDictionaryBatch()&&(n=xe.encode(e,t.header())),Ut.startMessage(e),Ut.addVersion(e,Kt.V4),Ut.addHeader(e,n),Ut.addHeaderType(e,t.headerType),Ut.addBodyLength(e,new Nn(t.bodyLength,0)),Ut.finishMessageBuffer(e,Ut.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof rt)return new zt(0,Kt.V4,at.Schema,t);if(t instanceof ie)return new zt(e,Kt.V4,at.RecordBatch,t);if(t instanceof xe)return new zt(e,Kt.V4,at.DictionaryBatch,t);throw new Error(`Unrecognized Message header: ${t}`)}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===at.Schema}isRecordBatch(){return this.headerType===at.RecordBatch}isDictionaryBatch(){return this.headerType===at.DictionaryBatch}},ie=class{constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=typeof t=="number"?t:t.low}get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}},xe=class{constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=typeof e=="number"?e:e.low}get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}},Fe=class{constructor(t,e){this.offset=typeof t=="number"?t:t.low,this.length=typeof e=="number"?e:e.low}},cr=class{constructor(t,e){this.length=typeof t=="number"?t:t.low,this.nullCount=typeof e=="number"?e:e.low}};function Vm(r,t){return()=>{switch(t){case at.Schema:return rt.fromJSON(r);case at.RecordBatch:return ie.fromJSON(r);case at.DictionaryBatch:return xe.fromJSON(r)}throw new Error(`Unrecognized Message type: { name: ${at[t]}, type: ${t} }`)}}function Wm(r,t){return()=>{switch(t){case at.Schema:return rt.decode(r.header(new Ot));case at.RecordBatch:return ie.decode(r.header(new ce),r.version());case at.DictionaryBatch:return xe.decode(r.header(new Ge),r.version())}throw new Error(`Unrecognized Message type: { name: ${at[t]}, type: ${t} }`)}}Y.encode=ty;Y.decode=Qm;Y.fromJSON=_f;rt.encode=Zm;rt.decode=zm;rt.fromJSON=df;ie.encode=ey;ie.decode=Ym;ie.fromJSON=Sl;xe.encode=ry;xe.decode=Gm;xe.fromJSON=ff;cr.encode=ny;cr.decode=Xm;Fe.encode=iy;Fe.decode=$m;function zm(r,t=new Map){let e=qm(r,t);return new rt(e,Qo(r),t)}function Ym(r,t=Kt.V4){if(r.compression()!==null)throw new Error("Record batch compression not implemented");return new ie(r.length(),Km(r),Jm(r,t))}function Gm(r,t=Kt.V4){return new xe(ie.decode(r.data(),t),r.id(),r.isDelta())}function $m(r){return new Fe(r.offset(),r.length())}function Xm(r){return new cr(r.length(),r.nullCount())}function Km(r){let t=[];for(let e,n=-1,i=-1,s=r.nodesLength();++n<s;)(e=r.nodes(n))&&(t[++i]=cr.decode(e));return t}function Jm(r,t){let e=[];for(let n,i=-1,s=-1,o=r.buffersLength();++i<o;)(n=r.buffers(i))&&(t<Kt.V4&&(n.bb_pos+=8*(i+1)),e[++s]=Fe.decode(n));return e}function qm(r,t){let e=[];for(let n,i=-1,s=-1,o=r.fieldsLength();++i<o;)(n=r.fields(i))&&(e[++s]=Y.decode(n,t));return e}function mf(r,t){let e=[];for(let n,i=-1,s=-1,o=r.childrenLength();++i<o;)(n=r.children(i))&&(e[++s]=Y.decode(n,t));return e}function Qm(r,t){let e,n,i,s,o,l;return!t||!(l=r.dictionary())?(i=bf(r,mf(r,t)),n=new Y(r.name(),i,r.nullable(),Qo(r))):t.has(e=l.id().low)?(s=(s=l.indexType())?yf(s):new _r,o=new Re(t.get(e),s,e,l.isOrdered()),n=new Y(r.name(),o,r.nullable(),Qo(r))):(s=(s=l.indexType())?yf(s):new _r,t.set(e,i=bf(r,mf(r,t))),o=new Re(i,s,e,l.isOrdered()),n=new Y(r.name(),o,r.nullable(),Qo(r))),n||null}function Qo(r){let t=new Map;if(r)for(let e,n,i=-1,s=Math.trunc(r.customMetadataLength());++i<s;)(e=r.customMetadata(i))&&(n=e.key())!=null&&t.set(n,e.value());return t}function yf(r){return new Lt(r.isSigned(),r.bitWidth())}function bf(r,t){let e=r.typeType();switch(e){case Ft.NONE:return new pe;case Ft.Null:return new pe;case Ft.Binary:return new kr;case Ft.Utf8:return new Cr;case Ft.Bool:return new Lr;case Ft.List:return new er((t||[])[0]);case Ft.Struct_:return new wt(t||[])}switch(e){case Ft.Int:{let n=r.type(new qt);return new Lt(n.isSigned(),n.bitWidth())}case Ft.FloatingPoint:{let n=r.type(new ve);return new ye(n.precision())}case Ft.Decimal:{let n=r.type(new Qt);return new Ur(n.scale(),n.precision(),n.bitWidth())}case Ft.Date:{let n=r.type(new be);return new Nr(n.unit())}case Ft.Time:{let n=r.type(new oe);return new tr(n.unit(),n.bitWidth())}case Ft.Timestamp:{let n=r.type(new ae);return new jr(n.unit(),n.timezone())}case Ft.Interval:{let n=r.type(new Se);return new Pr(n.unit())}case Ft.Union:{let n=r.type(new Zt);return new rr(n.mode(),n.typeIdsArray()||[],t||[])}case Ft.FixedSizeBinary:{let n=r.type(new ge);return new Hr(n.byteWidth())}case Ft.FixedSizeList:{let n=r.type(new we);return new nr(n.listSize(),(t||[])[0])}case Ft.Map:{let n=r.type(new Ie);return new ir((t||[])[0],n.keysSorted())}}throw new Error(`Unrecognized type: "${Ft[e]}" (${e})`)}function Zm(r,t){let e=t.fields.map(s=>Y.encode(r,s));Ot.startFieldsVector(r,e.length);let n=Ot.createFieldsVector(r,e),i=t.metadata&&t.metadata.size>0?Ot.createCustomMetadataVector(r,[...t.metadata].map(([s,o])=>{let l=r.createString(`${s}`),d=r.createString(`${o}`);return vt.startKeyValue(r),vt.addKey(r,l),vt.addValue(r,d),vt.endKeyValue(r)})):-1;return Ot.startSchema(r),Ot.addFields(r,n),Ot.addEndianness(r,sy?un.Little:un.Big),i!==-1&&Ot.addCustomMetadata(r,i),Ot.endSchema(r)}function ty(r,t){let e=-1,n=-1,i=-1,s=t.type,o=t.typeId;B.isDictionary(s)?(o=s.dictionary.typeId,i=Jo.visit(s,r),n=Jo.visit(s.dictionary,r)):n=Jo.visit(s,r);let l=(s.children||[]).map(u=>Y.encode(r,u)),d=Wt.createChildrenVector(r,l),h=t.metadata&&t.metadata.size>0?Wt.createCustomMetadataVector(r,[...t.metadata].map(([u,g])=>{let w=r.createString(`${u}`),T=r.createString(`${g}`);return vt.startKeyValue(r),vt.addKey(r,w),vt.addValue(r,T),vt.endKeyValue(r)})):-1;return t.name&&(e=r.createString(t.name)),Wt.startField(r),Wt.addType(r,n),Wt.addTypeType(r,o),Wt.addChildren(r,d),Wt.addNullable(r,!!t.nullable),e!==-1&&Wt.addName(r,e),i!==-1&&Wt.addDictionary(r,i),h!==-1&&Wt.addCustomMetadata(r,h),Wt.endField(r)}function ey(r,t){let e=t.nodes||[],n=t.buffers||[];ce.startNodesVector(r,e.length);for(let o of e.slice().reverse())cr.encode(r,o);let i=r.endVector();ce.startBuffersVector(r,n.length);for(let o of n.slice().reverse())Fe.encode(r,o);let s=r.endVector();return ce.startRecordBatch(r),ce.addLength(r,new Nn(t.length,0)),ce.addNodes(r,i),ce.addBuffers(r,s),ce.endRecordBatch(r)}function ry(r,t){let e=ie.encode(r,t.data);return Ge.startDictionaryBatch(r),Ge.addId(r,new Nn(t.id,0)),Ge.addIsDelta(r,t.isDelta),Ge.addData(r,e),Ge.endDictionaryBatch(r)}function ny(r,t){return fi.createFieldNode(r,new Nn(t.length,0),new Nn(t.nullCount,0))}function iy(r,t){return di.createBuffer(r,new Nn(t.offset,0),new Nn(t.length,0))}var sy=(()=>{let r=new ArrayBuffer(2);return new DataView(r).setInt16(0,256,!0),new Int16Array(r)[0]===256})();var Tl=r=>`Expected ${at[r]} Message in stream, but was null or length 0.`,Al=r=>`Header pointer of flatbuffer-encoded ${at[r]} Message is null or length 0.`,gf=(r,t)=>`Expected to read ${r} metadata bytes, but only read ${t}.`,wf=(r,t)=>`Expected to read ${r} bytes for message body, but only read ${t}.`,pi=class{constructor(t){this.source=t instanceof Fr?t:new Fr(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?St:t.value===-1&&(t=this.readMetadataLength()).done?St:(t=this.readMetadata(t.value)).done?St:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(Tl(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=j(this.source.read(t));if(e.byteLength<t)throw new Error(wf(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=at.Schema,n=this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(Al(e));return i}readMetadataLength(){let t=this.source.read(Zo),e=t&&new _e(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return St;if(e.byteLength<t)throw new Error(gf(t,e.byteLength));return{done:!1,value:zt.decode(e)}}},bs=class{constructor(t,e){this.source=t instanceof Te?t:Ns(t)?new fn(t,e):new Te(t)}[Symbol.asyncIterator](){return this}next(){return E(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?St:t.value===-1&&(t=yield this.readMetadataLength()).done?St:(t=yield this.readMetadata(t.value)).done?St:t})}throw(t){return E(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return E(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return E(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(Tl(t));return e.value})}readMessageBody(t){return E(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=j(yield this.source.read(t));if(e.byteLength<t)throw new Error(wf(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return E(this,void 0,void 0,function*(){let e=at.Schema,n=yield this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(Al(e));return i})}readMetadataLength(){return E(this,void 0,void 0,function*(){let t=yield this.source.read(Zo),e=t&&new _e(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return E(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return St;if(e.byteLength<t)throw new Error(gf(t,e.byteLength));return{done:!1,value:zt.decode(e)}})}},gs=class extends pi{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof Xi?t:new Xi(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:zt.fromJSON(t.schema,at.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:zt.fromJSON(e,at.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:zt.fromJSON(e,at.RecordBatch)}}return this._body=[],St}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((i,s)=>[...i,...s.VALIDITY&&[s.VALIDITY]||[],...s.TYPE&&[s.TYPE]||[],...s.OFFSET&&[s.OFFSET]||[],...s.DATA&&[s.DATA]||[],...e(s.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(Tl(t));return e.value}readSchema(){let t=at.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(Al(t));return n}},Zo=4,Il="ARROW1",_i=new Uint8Array(Il.length);for(let r=0;r<Il.length;r+=1)_i[r]=Il.codePointAt(r);function ta(r,t=0){for(let e=-1,n=_i.length;++e<n;)if(_i[e]!==r[t+e])return!1;return!0}var mi=_i.length,El=mi+Zo,vf=mi*2+Zo;var Nt=class extends On{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return Ke(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return ee.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return ee.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof Nt?t:Ls(t)?ay(t):Ns(t)?uy(t):Ke(t)?(()=>E(this,void 0,void 0,function*(){return yield Nt.from(yield t)}))():js(t)||ki(t)||Hs(t)||He(t)?cy(new Te(t)):ly(new Fr(t))}static readAll(t){return t instanceof Nt?t.isSync()?Sf(t):If(t):Ls(t)||ArrayBuffer.isView(t)||Je(t)||Us(t)?Sf(t):If(t)}},Br=class extends Nt{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return me(this,arguments,function*(){yield X(yield*$n(Ne(this[Symbol.iterator]())))})}},hn=class extends Nt{constructor(t){super(t),this._impl=t}readAll(){var t,e;return E(this,void 0,void 0,function*(){let n=new Array;try{for(var i=Ne(this),s;s=yield i.next(),!s.done;){let o=s.value;n.push(o)}}catch(o){t={error:o}}finally{try{s&&!s.done&&(e=i.return)&&(yield e.call(i))}finally{if(t)throw t.error}}return n})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},pn=class extends Br{constructor(t){super(t),this._impl=t}},ws=class extends hn{constructor(t){super(t),this._impl=t}},ea=class{constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),i=V({type:new wt(this.schema.fields),length:t.length,children:n});return new bt(this.schema,i)}_loadDictionaryBatch(t,e){let{id:n,isDelta:i}=t,{dictionaries:s,schema:o}=this,l=s.get(n);if(i||!l){let d=o.dictionaries.get(n),h=this._loadVectors(t.data,e,[d]);return(l&&i?l.concat(new H(h)):new H(h)).memoize()}return l.memoize()}_loadVectors(t,e,n){return new qi(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},yi=class extends ea{constructor(t,e){super(e),this._reader=Ls(t)?new gs(this._handle=t):new pi(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=Tf(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):St}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):St}next(){if(this.closed)return St;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Un(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},bi=class extends ea{constructor(t,e){super(e),this._reader=new bs(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return E(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return E(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=Tf(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return E(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):St})}return(t){return E(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):St})}next(){return E(this,void 0,void 0,function*(){if(this.closed)return St;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Un(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return E(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},ra=class extends yi{constructor(t,e){super(t instanceof Ki?t:new Ki(t),e)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(at.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(at.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength),l=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,l)}}}_readFooter(){let{_handle:t}=this,e=t.size-El,n=t.readInt32(e),i=t.readAt(e-n,n);return Yr.decode(i)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},Fl=class extends bi{constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,i=e[0]instanceof Map?e.shift():void 0;super(t instanceof fn?t:new fn(t,n),i)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return E(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return E(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(at.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null})}_readDictionaryBatch(t){var e;return E(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(at.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength),l=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,l)}}})}_readFooter(){return E(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-El,n=yield t.readInt32(e),i=yield t.readAt(e-n,n);return Yr.decode(i)})}_readNextMessageAndValidate(t){return E(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},xl=class extends yi{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new Fo(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function Tf(r,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:r.autoDestroy}function*Sf(r){let t=Nt.from(r);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function If(r){return me(this,arguments,function*(){let e=yield X(Nt.from(r));try{if(!(yield X(e.open({autoDestroy:!1}))).closed)do yield yield X(e);while(!(yield X(e.reset().open())).closed)}finally{yield X(e.cancel())}})}function ay(r){return new Br(new xl(r))}function ly(r){let t=r.peek(mi+7&-8);return t&&t.byteLength>=4?ta(t)?new pn(new ra(r.read())):new Br(new yi(r)):new Br(new yi(function*(){}()))}function cy(r){return E(this,void 0,void 0,function*(){let t=yield r.peek(mi+7&-8);return t&&t.byteLength>=4?ta(t)?new pn(new ra(yield r.read())):new hn(new bi(r)):new hn(new bi(function(){return me(this,arguments,function*(){})}()))})}function uy(r){return E(this,void 0,void 0,function*(){let{size:t}=yield r.stat(),e=new fn(r,t);return t>=vf&&ta(yield e.readAt(0,mi+7&-8))?new ws(new Fl(e)):new hn(new bi(e))})}var Rt=class extends R{constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}static assemble(...t){let e=i=>i.flatMap(s=>Array.isArray(s)?e(s):s instanceof bt?s.data.children:s.data),n=new Rt;return n.visitMany(e(t)),n}visit(t){if(t instanceof H)return this.visitMany(t.data),this;let{type:e}=t;if(!B.isDictionary(e)){let{length:n,nullCount:i}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");B.isNull(e)||ur.call(this,i<=0?new Uint8Array(0):ei(t.offset,n,t.nullBitmap)),this.nodes.push(new cr(n,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function ur(r){let t=r.byteLength+7&-8;return this.buffers.push(r),this.bufferRegions.push(new Fe(this._byteLength,t)),this._byteLength+=t,this}function dy(r){let{type:t,length:e,typeIds:n,valueOffsets:i}=r;if(ur.call(this,n),t.mode===Dt.Sparse)return Bl.call(this,r);if(t.mode===Dt.Dense){if(r.offset<=0)return ur.call(this,i),Bl.call(this,r);{let s=n.reduce((u,g)=>Math.max(u,g),n[0]),o=new Int32Array(s+1),l=new Int32Array(s+1).fill(-1),d=new Int32Array(e),h=Ci(-i[0],e,i);for(let u,g,w=-1;++w<e;)(g=l[u=n[w]])===-1&&(g=l[u]=h[u]),d[w]=h[w]-g,++o[u];ur.call(this,d);for(let u,g=-1,w=t.children.length;++g<w;)if(u=r.children[g]){let T=t.typeIds[g],tt=Math.min(e,o[T]);this.visit(u.slice(l[T],tt))}}}return this}function fy(r){let t;return r.nullCount>=r.length?ur.call(this,new Uint8Array(0)):(t=r.values)instanceof Uint8Array?ur.call(this,ei(r.offset,r.length,t)):ur.call(this,Fn(r.values))}function _n(r){return ur.call(this,r.values.subarray(0,r.length*r.stride))}function Af(r){let{length:t,values:e,valueOffsets:n}=r,i=n[0],s=n[t],o=Math.min(s-i,e.byteLength-i);return ur.call(this,Ci(-n[0],t,n)),ur.call(this,e.subarray(i,i+o)),this}function Dl(r){let{length:t,valueOffsets:e}=r;return e&&ur.call(this,Ci(e[0],t,e)),this.visit(r.children[0])}function Bl(r){return this.visitMany(r.type.children.map((t,e)=>r.children[e]).filter(Boolean))[0]}Rt.prototype.visitBool=fy;Rt.prototype.visitInt=_n;Rt.prototype.visitFloat=_n;Rt.prototype.visitUtf8=Af;Rt.prototype.visitBinary=Af;Rt.prototype.visitFixedSizeBinary=_n;Rt.prototype.visitDate=_n;Rt.prototype.visitTimestamp=_n;Rt.prototype.visitTime=_n;Rt.prototype.visitDecimal=_n;Rt.prototype.visitList=Dl;Rt.prototype.visitStruct=Bl;Rt.prototype.visitUnion=dy;Rt.prototype.visitInterval=_n;Rt.prototype.visitFixedSizeList=Dl;Rt.prototype.visitMap=Dl;var jn=class extends On{constructor(t){super(),this._position=0,this._started=!1,this._sink=new Er,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,fe(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return Ke(t)?t.then(e=>this.writeAll(e)):He(t)?Rl(this,t):Ol(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof Er?this._sink=t:(this._sink=new Er,t&&Xu(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&Ku(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!Ln(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Mt&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof bt&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!Ln(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof bt?t instanceof Un||this._writeRecordBatch(t):t instanceof Mt?this.writeAll(t.batches):Je(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,i=zt.encode(t),s=i.byteLength,o=this._writeLegacyIpcFormat?4:8,l=s+o+n&~n,d=l-s-o;return t.headerType===at.RecordBatch?this._recordBatchBlocks.push(new ar(l,t.bodyLength,this._position)):t.headerType===at.DictionaryBatch&&this._dictionaryBlocks.push(new ar(l,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(l-o)),s>0&&this._write(i),this._writePadding(d)}_write(t){if(this._started){let e=j(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage(zt.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(_i)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:i,buffers:s}=Rt.assemble(t),o=new ie(t.numRows,n,i),l=zt.from(o,e);return this._writeDictionaries(t)._writeMessage(l)._writeBodyBuffers(s)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:i,nodes:s,bufferRegions:o,buffers:l}=Rt.assemble(new H([t])),d=new ie(t.length,s,o),h=new xe(d,e,n),u=zt.from(h,i);return this._writeMessage(u)._writeBodyBuffers(l)}_writeBodyBuffers(t){let e,n,i;for(let s=-1,o=t.length;++s<o;)(e=t[s])&&(n=e.byteLength)>0&&(this._write(e),(i=(n+7&-8)-n)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(e)||0;if(i===0||(n=n==null?void 0:n.slice(i)).length>0)for(let s of n.data)this._writeDictionaryBatch(s,e,i>0),i+=s.length}return this}},Jr=class extends jn{static writeAll(t,e){let n=new Jr(e);return Ke(t)?t.then(i=>n.writeAll(i)):He(t)?Rl(n,t):Ol(n,t)}},qr=class extends jn{static writeAll(t){let e=new qr;return Ke(t)?t.then(n=>e.writeAll(n)):He(t)?Rl(e,t):Ol(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=Yr.encode(new Yr(t,Kt.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function Ol(r,t){let e=t;t instanceof Mt&&(e=t.batches,r.reset(void 0,t.schema));for(let n of e)r.write(n);return r.finish()}function Rl(r,t){var e,n,i,s;return E(this,void 0,void 0,function*(){try{for(e=Ne(t);n=yield e.next(),!n.done;){let o=n.value;r.write(o)}}catch(o){i={error:o}}finally{try{n&&!n.done&&(s=e.return)&&(yield s.call(e))}finally{if(i)throw i.error}}return r.finish()})}function Ef(r,t){if(He(r))return py(r,t);if(Je(r))return hy(r,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function hy(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){s(o,e||(e=r[Symbol.iterator]()))},pull(o){e?s(o,e):o.close()},cancel(){((e==null?void 0:e.return)&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,l){let d,h=null,u=o.desiredSize||null;for(;!(h=l.next(n?u:null)).done;)if(ArrayBuffer.isView(h.value)&&(d=j(h.value))&&(u!=null&&n&&(u=u-d.byteLength+1),h.value=d),o.enqueue(h.value),u!=null&&--u<=0)return;o.close()}}function py(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){return E(this,void 0,void 0,function*(){yield s(o,e||(e=r[Symbol.asyncIterator]()))})},pull(o){return E(this,void 0,void 0,function*(){e?yield s(o,e):o.close()})},cancel(){return E(this,void 0,void 0,function*(){((e==null?void 0:e.return)&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,l){return E(this,void 0,void 0,function*(){let d,h=null,u=o.desiredSize||null;for(;!(h=yield l.next(n?u:null)).done;)if(ArrayBuffer.isView(h.value)&&(d=j(h.value))&&(u!=null&&n&&(u=u-d.byteLength+1),h.value=d),o.enqueue(h.value),u!=null&&--u<=0)return;o.close()})}}function Bf(r){return new Ml(r)}var Ml=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:i="count"}=t,s=Gu(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=Mn(s),this._getSize=i!=="bytes"?Ff:xf;let{["highWaterMark"]:o=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:l=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:d=>{this._maybeFlush(this._builder,this._controller=d)},start:d=>{this._maybeFlush(this._builder,this._controller=d)}},{highWaterMark:o,size:i!=="bytes"?Ff:xf}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:l,size:d=>this._writeValueAndReturnChunkSize(d)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},Ff=r=>{var t;return(t=r==null?void 0:r.length)!==null&&t!==void 0?t:0},xf=r=>{var t;return(t=r==null?void 0:r.byteLength)!==null&&t!==void 0?t:0};function na(r,t){let e=new Er,n=null,i=new ReadableStream({cancel(){return E(this,void 0,void 0,function*(){yield e.close()})},start(l){return E(this,void 0,void 0,function*(){yield o(l,n||(n=yield s()))})},pull(l){return E(this,void 0,void 0,function*(){n?yield o(l,n):l.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},r)),readable:i};function s(){return E(this,void 0,void 0,function*(){return yield(yield Nt.from(e)).open(t)})}function o(l,d){return E(this,void 0,void 0,function*(){let h=l.desiredSize,u=null;for(;!(u=yield d.next()).done;)if(l.enqueue(u.value),h!=null&&--h<=0)return;l.close()})}}function ia(r,t){let e=new this(r),n=new Te(e),i=new ReadableStream({cancel(){return E(this,void 0,void 0,function*(){yield n.cancel()})},pull(o){return E(this,void 0,void 0,function*(){yield s(o)})},start(o){return E(this,void 0,void 0,function*(){yield s(o)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,r),readable:i};function s(o){return E(this,void 0,void 0,function*(){let l=null,d=o.desiredSize;for(;l=yield n.read(d||null);)if(o.enqueue(l),d!=null&&(d-=l.byteLength)<=0)return;o.close()})}}function sa(r,t="stream"){return(t==="stream"?Jr:qr).writeAll(r).toUint8Array(!0)}var by=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Ga),ml),ll),$a),Va),al),{compareSchemas:Ln,compareFields:ef,compareTypes:rf});ee.toDOMStream=Ef;Et.throughDOM=Bf;Nt.throughDOM=na;pn.throughDOM=na;Br.throughDOM=na;jn.throughDOM=ia;qr.throughDOM=ia;Jr.throughDOM=ia;function gi(r){switch(r.typeId){case _.Binary:return{sqlType:"binary"};case _.Bool:return{sqlType:"bool"};case _.Date:return{sqlType:"date"};case _.DateDay:return{sqlType:"date32[d]"};case _.DateMillisecond:return{sqlType:"date64[ms]"};case _.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case _.Float:return{sqlType:"float"};case _.Float16:return{sqlType:"float16"};case _.Float32:return{sqlType:"float32"};case _.Float64:return{sqlType:"float64"};case _.Int:return{sqlType:"int32"};case _.Int16:return{sqlType:"int16"};case _.Int32:return{sqlType:"int32"};case _.Int64:return{sqlType:"int64"};case _.Uint16:return{sqlType:"uint16"};case _.Uint32:return{sqlType:"uint32"};case _.Uint64:return{sqlType:"uint64"};case _.Uint8:return{sqlType:"uint8"};case _.IntervalDayTime:return{sqlType:"interval[dt]"};case _.IntervalYearMonth:return{sqlType:"interval[m]"};case _.List:return{sqlType:"list",valueType:gi(r.valueType)};case _.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case _.Null:return{sqlType:"null"};case _.Utf8:return{sqlType:"utf8"};case _.Struct:return{sqlType:"struct",fields:r.children.map(e=>oa(e.name,e.type))};case _.Map:{let t=r;return{sqlType:"map",keyType:gi(t.keyType),valueType:gi(t.valueType)}}case _.Time:return{sqlType:"time[s]"};case _.TimeMicrosecond:return{sqlType:"time[us]"};case _.TimeMillisecond:return{sqlType:"time[ms]"};case _.TimeNanosecond:return{sqlType:"time[ns]"};case _.TimeSecond:return{sqlType:"time[s]"};case _.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case _.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case _.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case _.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case _.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function oa(r,t){let e=gi(t);return e.name=r,e}var aa=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,i)=>i)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return this.failWith(t,e)}}};var vs={},gy=(()=>{var r=vs.url;return async function(t={}){function e(){return Pt.buffer!=dr.buffer&&fr(),dr}function n(){return Pt.buffer!=dr.buffer&&fr(),zl}function i(){return Pt.buffer!=dr.buffer&&fr(),Yl}function s(){return Pt.buffer!=dr.buffer&&fr(),Gl}function o(){return Pt.buffer!=dr.buffer&&fr(),$l}function l(){return Pt.buffer!=dr.buffer&&fr(),Xl}function d(){return Pt.buffer!=dr.buffer&&fr(),Kl}function h(){return Pt.buffer!=dr.buffer&&fr(),Jl}var u=typeof t<"u"?t:{},g,w;u.ready=new Promise(function(a,c){g=a,w=c}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","__emscripten_thread_init","__emscripten_thread_exit","__emscripten_thread_crashed","__emscripten_tls_init","_pthread_self","executeNotifiedProxyingQueue","establishStackSpace","invokeEntryPoint","PThread","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","__emscripten_proxy_execute_task_queue","onRuntimeInitialized"].forEach(a=>{Object.getOwnPropertyDescriptor(u.ready,a)||Object.defineProperty(u.ready,a,{get:()=>J("You are getting "+a+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>J("You are setting "+a+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var T=Object.assign({},u),tt=[],nt="./this.program",yt=(a,c)=>{throw c},gt=typeof window=="object",xt=typeof importScripts=="function",ft=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",Hn=!gt&&!ft&&!xt;if(u.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var F=u.ENVIRONMENT_IS_PTHREAD||!1,ue="";function wi(a){return u.locateFile?u.locateFile(a,ue):ue+a}var Qr,it,jt,Be;function de(a){if(a instanceof Bi)return;let c=a;a&&typeof a=="object"&&a.stack&&(c=[a,a.stack]),ot("exiting due to exception: "+c)}if(ft){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");let{createRequire:a}=await Promise.resolve().then(()=>Ca(Cp("module")));var Bt=a(vs.url),kt=Bt("fs"),_t=Bt("path");xt?ue=_t.dirname(ue)+"/":ue=Bt("url").fileURLToPath(new URL("./",vs.url)),Qr=(f,p)=>(f=ba(f)?new URL(f):_t.normalize(f),kt.readFileSync(f,p?void 0:"utf8")),jt=f=>{var p=Qr(f,!0);return p.buffer||(p=new Uint8Array(p)),A(p.buffer),p},it=(f,p,y)=>{f=ba(f)?new URL(f):_t.normalize(f),kt.readFile(f,function(v,b){v?y(v):p(b.buffer)})},process.argv.length>1&&(nt=process.argv[1].replace(/\\/g,"/")),tt=process.argv.slice(2),process.on("uncaughtException",function(f){if(!(f instanceof Bi))throw f});var De=process.versions.node.split(".")[0];De<15&&process.on("unhandledRejection",function(f){throw f}),yt=(f,p)=>{if(Fi())throw process.exitCode=f,p;de(p),process.exit(f)},u.inspect=function(){return"[Emscripten Module object]"};let c;try{c=Bt("worker_threads")}catch(f){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),f}global.Worker=c.Worker}else if(Hn){if(typeof process=="object"&&typeof Bt=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(Qr=function(c){return read(c)}),jt=function(c){let f;return typeof readbuffer=="function"?new Uint8Array(readbuffer(c)):(f=read(c,"binary"),A(typeof f=="object"),f)},it=function(c,f,p){setTimeout(()=>f(jt(c)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=a=>{}),typeof scriptArgs<"u"?tt=scriptArgs:typeof arguments<"u"&&(tt=arguments),typeof quit=="function"&&(yt=(a,c)=>{de(c),quit(a)}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(gt||xt){if(xt?ue=self.location.href:typeof document<"u"&&document.currentScript&&(ue=document.currentScript.src),r&&(ue=r),ue.indexOf("blob:")!==0?ue=ue.substr(0,ue.replace(/[?#].*/,"").lastIndexOf("/")+1):ue="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");ft||(Qr=a=>{var c=new XMLHttpRequest;return c.open("GET",a,!1),c.send(null),c.responseText},xt&&(jt=a=>{var c=new XMLHttpRequest;return c.open("GET",a,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),it=(a,c,f)=>{var p=new XMLHttpRequest;p.open("GET",a,!0),p.responseType="arraybuffer",p.onload=()=>{if(p.status==200||p.status==0&&p.response){c(p.response);return}f()},p.onerror=f,p.send(null)}),Be=a=>document.title=a}else throw new Error("environment detection error");ft&&typeof performance>"u"&&(global.performance=Bt("perf_hooks").performance);var gn=console.log.bind(console),jl=console.warn.bind(console);ft&&(gn=a=>kt.writeSync(1,a+`
`),jl=a=>kt.writeSync(2,a+`
`));var vi=u.print||gn,ot=u.printErr||jl;Object.assign(u,T),T=null,lp(),u.arguments&&(tt=u.arguments),hr("arguments","arguments_"),u.thisProgram&&(nt=u.thisProgram),hr("thisProgram","thisProgram"),u.quit&&(yt=u.quit),hr("quit","quit_"),A(typeof u.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),A(typeof u.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),A(typeof u.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),A(typeof u.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),A(typeof u.read>"u","Module.read option was removed (modify read_ in JS)"),A(typeof u.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),A(typeof u.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),A(typeof u.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),A(typeof u.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),hr("read","read_"),hr("readAsync","readAsync"),hr("readBinary","readBinary"),hr("setWindowTitle","setWindowTitle");var By="IDBFS is no longer included by default; build with -lidbfs.js",Dy="PROXYFS is no longer included by default; build with -lproxyfs.js",Oy="WORKERFS is no longer included by default; build with -lworkerfs.js",Ry="NODEFS is no longer included by default; build with -lnodefs.js";A(gt||xt||ft,"Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)"),A(!Hn,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var Si;u.wasmBinary&&(Si=u.wasmBinary),hr("wasmBinary","wasmBinary");var Pl=u.noExitRuntime||!0;hr("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&J("no native wasm support detected");var Pt,_a,Ii=!1,Ti;function A(a,c){a||J("Assertion failed"+(c?": "+c:""))}var Hl=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Vl(a,c,f){c>>>=0;for(var p=c+f,y=c;a[y]&&!(y>=p);)++y;if(y-c>16&&a.buffer&&Hl)return Hl.decode(a.buffer instanceof SharedArrayBuffer?a.slice(c,y):a.subarray(c,y));for(var v="";c<y;){var b=a[c++];if(!(b&128)){v+=String.fromCharCode(b);continue}var I=a[c++]&63;if((b&224)==192){v+=String.fromCharCode((b&31)<<6|I);continue}var x=a[c++]&63;if((b&240)==224?b=(b&15)<<12|I<<6|x:((b&248)!=240&&$e("Invalid UTF-8 leading byte "+vn(b)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),b=(b&7)<<18|I<<12|x<<6|a[c++]&63),b<65536)v+=String.fromCharCode(b);else{var M=b-65536;v+=String.fromCharCode(55296|M>>10,56320|M&1023)}}return v}function Le(a,c){return A(typeof a=="number"),a>>>=0,a?Vl(n(),a,c):""}function Wl(a,c,f,p){if(f>>>=0,!(p>0))return 0;for(var y=f,v=f+p-1,b=0;b<a.length;++b){var I=a.charCodeAt(b);if(I>=55296&&I<=57343){var x=a.charCodeAt(++b);I=65536+((I&1023)<<10)|x&1023}if(I<=127){if(f>=v)break;c[f++>>>0]=I}else if(I<=2047){if(f+1>=v)break;c[f++>>>0]=192|I>>6,c[f++>>>0]=128|I&63}else if(I<=65535){if(f+2>=v)break;c[f++>>>0]=224|I>>12,c[f++>>>0]=128|I>>6&63,c[f++>>>0]=128|I&63}else{if(f+3>=v)break;I>1114111&&$e("Invalid Unicode code point "+vn(I)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),c[f++>>>0]=240|I>>18,c[f++>>>0]=128|I>>12&63,c[f++>>>0]=128|I>>6&63,c[f++>>>0]=128|I&63}}return c[f>>>0]=0,f-y}function ma(a,c,f){return A(typeof f=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Wl(a,n(),c,f)}function Pf(a){for(var c=0,f=0;f<a.length;++f){var p=a.charCodeAt(f);p<=127?c++:p<=2047?c+=2:p>=55296&&p<=57343?(c+=4,++f):c+=3}return c}var My,dr,zl,Yl,Gl,$l,Xl,Kl,Jl;function fr(){var a=Pt.buffer;u.HEAP8=dr=new Int8Array(a),u.HEAP16=Yl=new Int16Array(a),u.HEAP32=$l=new Int32Array(a),u.HEAPU8=zl=new Uint8Array(a),u.HEAPU16=Gl=new Uint16Array(a),u.HEAPU32=Xl=new Uint32Array(a),u.HEAPF32=Kl=new Float32Array(a),u.HEAPF64=Jl=new Float64Array(a)}A(!u.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),A(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support");var Ai=u.INITIAL_MEMORY||16777216;if(hr("INITIAL_MEMORY","INITIAL_MEMORY"),A(Ai>=1024e3,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ai+"! (STACK_SIZE="+1024e3+")"),F)Pt=u.wasmMemory;else if(u.wasmMemory)Pt=u.wasmMemory;else if(Pt=new WebAssembly.Memory({initial:Ai/65536,maximum:65536,shared:!0}),!(Pt.buffer instanceof SharedArrayBuffer))throw ot("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),ft&&ot("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");fr(),Ai=Pt.buffer.byteLength,A(Ai%65536===0);var Ss;function ql(){var a=Ma();A((a&3)==0),a==0&&(a+=4),l()[a>>>2]=34821223,l()[a+4>>>2]=2310721022,l()[0]=1668509029}function Vn(){if(!Ii){var a=Ma();a==0&&(a+=4);var c=l()[a>>>2],f=l()[a+4>>>2];(c!=34821223||f!=2310721022)&&J("Stack overflow! Stack cookie has been overwritten at "+vn(a)+", expected hex dwords 0x89BACDFE and 0x2135467, but received "+vn(f)+" "+vn(c)),l()[0]!==1668509029&&J("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var a=new Int16Array(1),c=new Int8Array(a.buffer);if(a[0]=25459,c[0]!==115||c[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var ya=[],Ql=[],Zl=[],ky=[],tc=[],Ei=!1;function Fi(){return Pl}function Hf(){if(A(!F),u.preRun)for(typeof u.preRun=="function"&&(u.preRun=[u.preRun]);u.preRun.length;)zf(u.preRun.shift());Is(ya)}function ec(){A(!Ei),Ei=!0,!F&&(Vn(),Is(Ql))}function Vf(){Vn(),!F&&Is(Zl)}function Wf(){if(Vn(),!F){if(u.postRun)for(typeof u.postRun=="function"&&(u.postRun=[u.postRun]);u.postRun.length;)Gf(u.postRun.shift());Is(tc)}}function zf(a){ya.unshift(a)}function Yf(a){Ql.unshift(a)}function Cy(a){Zl.unshift(a)}function Ly(a){}function Gf(a){tc.unshift(a)}A(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),A(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),A(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),A(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Zr=0,wn=null,xi=null,Wn={};function Uy(a){for(var c=a;;){if(!Wn[a])return a;a=c+Math.random()}}function $f(a){Zr++,u.monitorRunDependencies&&u.monitorRunDependencies(Zr),a?(A(!Wn[a]),Wn[a]=1,wn===null&&typeof setInterval<"u"&&(wn=setInterval(function(){if(Ii){clearInterval(wn),wn=null;return}var c=!1;for(var f in Wn)c||(c=!0,ot("still waiting on run dependencies:")),ot("dependency: "+f);c&&ot("(end of list)")},1e4))):ot("warning: run dependency added without ID")}function Xf(a){if(Zr--,u.monitorRunDependencies&&u.monitorRunDependencies(Zr),a?(A(Wn[a]),delete Wn[a]):ot("warning: run dependency removed without ID"),Zr==0&&(wn!==null&&(clearInterval(wn),wn=null),xi)){var c=xi;xi=null,c()}}function J(a){u.onAbort&&u.onAbort(a),a="Aborted("+a+")",ot(a),Ii=!0,Ti=1,Ei&&pu();var c=new WebAssembly.RuntimeError(a);throw w(c),c}var Kf="data:application/octet-stream;base64,";function rc(a){return a.startsWith(Kf)}function ba(a){return a.startsWith("file://")}function m(a,c){return function(){var f=a,p=c;return c||(p=u.asm),A(Ei,"native function `"+f+"` called before runtime initialization"),p[a]||A(p[a],"exported native function `"+f+"` not found"),p[a].apply(null,arguments)}}var Or;u.locateFile?(Or="./duckdb-coi.wasm",rc(Or)||(Or=wi(Or))):Or=new URL("./duckdb-coi.wasm",vs.url).href;function nc(a){try{if(a==Or&&Si)return new Uint8Array(Si);if(jt)return jt(a);throw"both async and sync fetching of the wasm failed"}catch(c){J(c)}}function Jf(a){return!Si&&(gt||xt)&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(function(c){if(!c.ok)throw"failed to load wasm binary file at '"+a+"'";return c.arrayBuffer()}).catch(function(){return nc(a)}):Promise.resolve().then(function(){return nc(a)})}function ic(a,c,f){return Jf(a).then(function(p){return WebAssembly.instantiate(p,c)}).then(function(p){return p}).then(f,function(p){ot("failed to asynchronously prepare wasm: "+p),ba(Or)&&ot("warning: Loading from a file URI ("+Or+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),J(p)})}function qf(a,c,f,p){return!a&&typeof WebAssembly.instantiateStreaming=="function"&&!rc(c)&&!ft&&typeof fetch=="function"?fetch(c,{credentials:"same-origin"}).then(function(y){var v=WebAssembly.instantiateStreaming(y,f);return v.then(p,function(b){return ot("wasm streaming compile failed: "+b),ot("falling back to ArrayBuffer instantiation"),ic(c,f,p)})}):ic(c,f,p)}function Qf(){var a={env:cu,wasi_snapshot_preview1:cu};function c(y,v){var b=y.exports;return u.asm=b,lh(u.asm._emscripten_tls_init),Ss=u.asm.__indirect_function_table,A(Ss,"table not found in wasm exports"),Yf(u.asm.__wasm_call_ctors),_a=v,k.loadWasmModuleToAllWorkers(()=>Xf("wasm-instantiate")),b}$f("wasm-instantiate");var f=u;function p(y){A(u===f,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),f=null,c(y.instance,y.module)}if(u.instantiateWasm)try{return u.instantiateWasm(a,c)}catch(y){ot("Module.instantiateWasm callback failed with error: "+y),w(y)}return qf(Si,Or,a,p).catch(w),{}}var zn,ga;function hr(a,c){Object.getOwnPropertyDescriptor(u,a)||Object.defineProperty(u,a,{configurable:!0,get:function(){J("Module."+a+" has been replaced with plain "+c+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Zf(a){Object.getOwnPropertyDescriptor(u,a)&&J("`Module."+a+"` was supplied but `"+a+"` not included in INCOMING_MODULE_JS_API")}function sc(a){return a==="FS_createPath"||a==="FS_createDataFile"||a==="FS_createPreloadedFile"||a==="FS_unlink"||a==="addRunDependency"||a==="FS_createLazyFile"||a==="FS_createDevice"||a==="removeRunDependency"}function th(a,c){typeof globalThis<"u"&&Object.defineProperty(globalThis,a,{configurable:!0,get:function(){$e("`"+a+"` is not longer defined by emscripten. "+c)}})}th("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function eh(a){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,a)&&Object.defineProperty(globalThis,a,{configurable:!0,get:function(){var c="`"+a+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",f=a;f.startsWith("_")||(f="$"+a),c+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+f+")",sc(a)&&(c+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),$e(c)}}),oc(a)}function oc(a){Object.getOwnPropertyDescriptor(u,a)||Object.defineProperty(u,a,{configurable:!0,get:function(){var c="'"+a+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";sc(a)&&(c+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),J(c)}})}function ac(a){ft?kt.writeSync(2,a+`
`):console.error(a)}function Bi(a){this.name="ExitStatus",this.message="Program terminated with exit("+a+")",this.status=a}function wa(a){a.terminate(),a.onmessage=c=>{var f=c.data.cmd;ot('received "'+f+'" command from terminated worker: '+a.workerID)}}function rh(a){A(!F,"Internal Error! killThread() can only ever be called from main application thread!"),A(a,"Internal Error! Null pthread_ptr in killThread!");var c=k.pthreads[a];delete k.pthreads[a],wa(c),du(a),k.runningWorkers.splice(k.runningWorkers.indexOf(c),1),c.pthread_ptr=0}function nh(a){A(!F,"Internal Error! cancelThread() can only ever be called from main application thread!"),A(a,"Internal Error! Null pthread_ptr in cancelThread!");var c=k.pthreads[a];c.postMessage({cmd:"cancel"})}function lc(a){A(!F,"Internal Error! cleanupThread() can only ever be called from main application thread!"),A(a,"Internal Error! Null pthread_ptr in cleanupThread!");var c=k.pthreads[a];A(c),k.returnWorkerToPool(c)}function cc(a,c){return n().fill(0,a,a+c),a}function uc(a){A(!F,"Internal Error! spawnThread() can only ever be called from main application thread!"),A(a.pthread_ptr,"Internal error, no pthread ptr!");var c=k.getNewWorker();if(!c)return 6;A(!c.pthread_ptr,"Internal error!"),k.runningWorkers.push(c),k.pthreads[a.pthread_ptr]=c,c.pthread_ptr=a.pthread_ptr;var f={cmd:"run",start_routine:a.startRoutine,arg:a.arg,pthread_ptr:a.pthread_ptr};return ft&&c.ref(),c.postMessage(f,a.transferList),0}var tn={varargs:void 0,get:function(){A(tn.varargs!=null),tn.varargs+=4;var a=o()[tn.varargs-4>>>2];return a},getStr:function(a){var c=Le(a);return c}};function dc(a){if(F)return st(1,1,a);Ti=a,Fi()||(k.terminateAllThreads(),u.onExit&&u.onExit(a),Ii=!0),yt(a,new Bi(a))}function fc(a,c){if(Ti=a,Ep(),F)throw A(!c),mc(a),"unwind";if(Fi()&&!c){var f="program exited (with status: "+a+"), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";w(f),ot(f)}dc(a)}var hc=fc;function vn(a){return A(typeof a=="number"),"0x"+a.toString(16).padStart(8,"0")}function pc(a){if(a instanceof Bi||a=="unwind")return Ti;Vn(),a instanceof WebAssembly.RuntimeError&&yu()<=0&&ot("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to "+1024e3+")"),yt(1,a)}var k={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},nextWorkerID:1,debugInit:function(){function a(){var f=0;return Ei&&typeof Ri<"u"&&(f=Ri()),"w:"+(u.workerID||0)+",t:"+vn(f)+": "}var c=ac;ac=f=>c(a()+f)},init:function(){k.debugInit(),F?k.initWorker():k.initMainThread()},initMainThread:function(){for(var a=4;a--;)k.allocateUnusedWorker()},initWorker:function(){Pl=!1},setExitStatus:function(a){Ti=a},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:function(){A(!F,"Internal Error! terminateAllThreads() can only ever be called from main application thread!");for(var a of k.runningWorkers)wa(a);for(var a of k.unusedWorkers)wa(a);k.unusedWorkers=[],k.runningWorkers=[],k.pthreads=[]},returnWorkerToPool:function(a){var c=a.pthread_ptr;delete k.pthreads[c],k.unusedWorkers.push(a),k.runningWorkers.splice(k.runningWorkers.indexOf(a),1),a.pthread_ptr=0,ft&&a.unref(),du(c)},receiveObjectTransfer:function(a){},threadInitTLS:function(){k.tlsInitFunctions.forEach(a=>a())},loadWasmModuleToWorker:a=>new Promise(c=>{a.onmessage=v=>{var b=v.data,I=b.cmd;if(a.pthread_ptr&&(k.currentProxiedOperationCallerThread=a.pthread_ptr),b.targetThread&&b.targetThread!=Ri()){var x=k.pthreads[b.targetThread];x?x.postMessage(b,b.transferList):ot('Internal error! Worker sent a message "'+I+'" to target pthread '+b.targetThread+", but that thread no longer exists!"),k.currentProxiedOperationCallerThread=void 0;return}I==="processProxyingQueue"?Aa(b.queue):I==="spawnThread"?uc(b):I==="cleanupThread"?lc(b.thread):I==="killThread"?rh(b.thread):I==="cancelThread"?nh(b.thread):I==="loaded"?(a.loaded=!0,ft&&!a.pthread_ptr&&a.unref(),c(a)):I==="print"?vi("Thread "+b.threadId+": "+b.text):I==="printErr"?ot("Thread "+b.threadId+": "+b.text):I==="alert"?alert("Thread "+b.threadId+": "+b.text):b.target==="setimmediate"?a.postMessage(b):I==="callHandler"?u[b.handler](...b.args):I&&ot("worker sent an unknown command "+I),k.currentProxiedOperationCallerThread=void 0},a.onerror=v=>{var b="worker sent an error!";throw a.pthread_ptr&&(b="Pthread "+vn(a.pthread_ptr)+" sent an error!"),ot(b+" "+v.filename+":"+v.lineno+": "+v.message),v},ft&&(a.on("message",function(v){a.onmessage({data:v})}),a.on("error",function(v){a.onerror(v)}),a.on("detachedExit",function(){})),A(Pt instanceof WebAssembly.Memory,"WebAssembly memory should have been loaded by now!"),A(_a instanceof WebAssembly.Module,"WebAssembly Module should have been loaded by now!");var f=[],p=["onExit","onAbort","print","printErr"];for(var y of p)u.hasOwnProperty(y)&&f.push(y);a.workerID=k.nextWorkerID++,a.postMessage({cmd:"load",handlers:f,urlOrBlob:u.mainScriptUrlOrBlob,wasmMemory:Pt,wasmModule:_a,workerID:a.workerID})}),loadWasmModuleToAllWorkers:function(a){if(F)return a();Promise.all(k.unusedWorkers.map(k.loadWasmModuleToWorker)).then(a)},allocateUnusedWorker:function(){var a;if(!u.locateFile)a=new Worker(new URL("duckdb_wasm.worker.js",vs.url));else{var c=wi("duckdb_wasm.worker.js");a=new Worker(c)}k.unusedWorkers.push(a)},getNewWorker:function(){return k.unusedWorkers.length==0&&(ft||console.log("Tried to spawn a new thread, but the thread pool is exhausted.\nThis might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\nIf you want to increase the pool size, use setting `-sPTHREAD_POOL_SIZE=...`.\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-sPTHREAD_POOL_SIZE_STRICT=2`."),k.allocateUnusedWorker(),k.loadWasmModuleToWorker(k.unusedWorkers[0])),k.unusedWorkers.pop()}};u.PThread=k;function Is(a){for(;a.length>0;)a.shift()(u)}function _c(){return u.asm.__cpp_exception}function va(a){var c=a.getArg(_c(),0);return wp(c)}function Ny(a){var c=va(a);bp(c)}function ih(){var a=Ri(),c=o()[a+52>>>2],f=o()[a+56>>>2],p=c-f;A(c!=0),A(p!=0),A(c>p,"stackTop must be higher then stackMax"),mu(c,p),Bs(c),ql()}u.establishStackSpace=ih;function mc(a){if(F)return st(2,0,a);try{hc(a)}catch(c){pc(c)}}function yc(a){var c=ka(),f=a();return Bs(c),f}function sh(a){return yc(function(){var c=Yn(4),f=Yn(4);vp(a,c,f);var p=l()[c>>>2],y=l()[f>>>2],v=Le(p);hu(p);var b;return y&&(b=Le(y),hu(y)),[v,b]})}function bc(a){var c=va(a);return sh(c)}u.getExceptionMessage=bc;function jy(a,c="i8"){switch(c.endsWith("*")&&(c="*"),c){case"i1":return e()[a>>>0];case"i8":return e()[a>>>0];case"i16":return i()[a>>>1];case"i32":return o()[a>>>2];case"i64":return o()[a>>>2];case"float":return d()[a>>>2];case"double":return h()[a>>>3];case"*":return l()[a>>>2];default:J("invalid type for getValue: "+c)}}function Py(a){var c=va(a);gp(c)}var Ts=[];function oh(a){var c=Ts[a];return c||(a>=Ts.length&&(Ts.length=a+1),Ts[a]=c=Ss.get(a)),A(Ss.get(a)==c,"JavaScript-side Wasm function table mirror is out of date!"),c}function ah(a,c){var f=oh(a)(c);Vn(),Fi()?k.setExitStatus(f):_p(f)}u.invokeEntryPoint=ah;function lh(a){k.tlsInitFunctions.push(a)}function Hy(a,c,f="i8"){switch(f.endsWith("*")&&(f="*"),f){case"i1":e()[a>>>0]=c;break;case"i8":e()[a>>>0]=c;break;case"i16":i()[a>>>1]=c;break;case"i32":o()[a>>>2]=c;break;case"i64":ga=[c>>>0,(zn=c,+Math.abs(zn)>=1?zn>0?(Math.min(+Math.floor(zn/4294967296),4294967295)|0)>>>0:~~+Math.ceil((zn-+(~~zn>>>0))/4294967296)>>>0:0)],o()[a>>>2]=ga[0],o()[a+4>>>2]=ga[1];break;case"float":d()[a>>>2]=c;break;case"double":h()[a>>>3]=c;break;case"*":l()[a>>>2]=c;break;default:J("invalid type for setValue: "+f)}}function $e(a){$e.shown||($e.shown={}),$e.shown[a]||($e.shown[a]=1,ft&&(a="warning: "+a),ot(a))}function ch(a,c,f,p){J("Assertion failed: "+Le(a)+", at: "+[c?Le(c):"unknown filename",f,p?Le(p):"unknown function"])}var gc="To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";function uh(a,c){J(gc)}function dh(a){dp(a,!xt,1,!gt),k.threadInitTLS()}function fh(a){F?postMessage({cmd:"cleanupThread",thread:a}):lc(a)}function wc(a,c,f,p){return F?st(3,1,a,c,f,p):vc(a,c,f,p)}function vc(a,c,f,p){if(typeof SharedArrayBuffer>"u")return ot("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var y=[],v=0;if(F&&(y.length===0||v))return wc(a,c,f,p);if(v)return v;var b={startRoutine:f,pthread_ptr:a,arg:p,transferList:y};return F?(b.cmd="spawnThread",postMessage(b,y),0):uc(b)}function Sc(a,c,f,p,y){if(F)return st(4,1,a,c,f,p,y);A(a<=64,"nfds must be less than or equal to 64"),A(!p,"exceptfds not supported");for(var v=0,b=c?o()[c>>>2]:0,I=c?o()[c+4>>>2]:0,x=f?o()[f>>>2]:0,M=f?o()[f+4>>>2]:0,et=p?o()[p>>>2]:0,Ct=p?o()[p+4>>>2]:0,ht=0,Rr=0,Tt=0,Yt=0,Xe=0,Mr=0,S=(c?o()[c>>>2]:0)|(f?o()[f>>>2]:0)|(p?o()[p>>>2]:0),O=(c?o()[c+4>>>2]:0)|(f?o()[f+4>>>2]:0)|(p?o()[p+4>>>2]:0),Gt=function(Fp,xp,Bp,wu){return Fp<32?xp&wu:Bp&wu},pt=0;pt<a;pt++){var Xt=1<<pt%32;if(!!Gt(pt,S,O,Xt)){var se=tn.getStreamFromFD(pt),Sn=tn.DEFAULT_POLLMASK;se.stream_ops.poll&&(Sn=se.stream_ops.poll(se)),Sn&1&&Gt(pt,b,I,Xt)&&(pt<32?ht=ht|Xt:Rr=Rr|Xt,v++),Sn&4&&Gt(pt,x,M,Xt)&&(pt<32?Tt=Tt|Xt:Yt=Yt|Xt,v++),Sn&2&&Gt(pt,et,Ct,Xt)&&(pt<32?Xe=Xe|Xt:Mr=Mr|Xt,v++)}}return c&&(o()[c>>>2]=ht,o()[c+4>>>2]=Rr),f&&(o()[f>>>2]=Tt,o()[f+4>>>2]=Yt),p&&(o()[p>>>2]=Xe,o()[p+4>>>2]=Mr),v}function hh(){ot("missing function: $SOCKFS"),J(-1)}function Ic(){ot("missing function: $FS"),J(-1)}function Di(a){var c=hh.getSocket(a);if(!c)throw new Ic.ErrnoError(8);return c}function Vy(a){return o()[up()>>>2]=a,a}var Wy={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function Sa(a){return(a&255)+"."+(a>>8&255)+"."+(a>>16&255)+"."+(a>>24&255)}function Tc(a){var c="",f=0,p=0,y=0,v=0,b=0,I=0,x=[a[0]&65535,a[0]>>16,a[1]&65535,a[1]>>16,a[2]&65535,a[2]>>16,a[3]&65535,a[3]>>16],M=!0,et="";for(I=0;I<5;I++)if(x[I]!==0){M=!1;break}if(M){if(et=Sa(x[6]|x[7]<<16),x[5]===-1)return c="::ffff:",c+=et,c;if(x[5]===0)return c="::",et==="0.0.0.0"&&(et=""),et==="0.0.0.1"&&(et="1"),c+=et,c}for(f=0;f<8;f++)x[f]===0&&(f-y>1&&(b=0),y=f,b++),b>p&&(p=b,v=f-p+1);for(f=0;f<8;f++){if(p>1&&x[f]===0&&f>=v&&f<v+p){f===v&&(c+=":",v===0&&(c+=":"));continue}c+=Number(uu(x[f]&65535)).toString(16),c+=f<7?":":""}return c}function Ac(a,c){var f=i()[a>>>1],p=uu(s()[a+2>>>1]),y;switch(f){case 2:if(c!==16)return{errno:28};y=o()[a+4>>>2],y=Sa(y);break;case 10:if(c!==28)return{errno:28};y=[o()[a+8>>>2],o()[a+12>>>2],o()[a+16>>>2],o()[a+20>>>2]],y=Tc(y);break;default:return{errno:5}}return{family:f,addr:y,port:p}}function As(a){for(var c=a.split("."),f=0;f<4;f++){var p=Number(c[f]);if(isNaN(p))return null;c[f]=p}return(c[0]|c[1]<<8|c[2]<<16|c[3]<<24)>>>0}function Es(a){return parseInt(a)}function Ia(a){var c,f,p,y,v,b=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,I=[];if(!b.test(a))return null;if(a==="::")return[0,0,0,0,0,0,0,0];for(a.startsWith("::")?a=a.replace("::","Z:"):a=a.replace("::",":Z:"),a.indexOf(".")>0?(a=a.replace(new RegExp("[.]","g"),":"),c=a.split(":"),c[c.length-4]=Es(c[c.length-4])+Es(c[c.length-3])*256,c[c.length-3]=Es(c[c.length-2])+Es(c[c.length-1])*256,c=c.slice(0,c.length-2)):c=a.split(":"),p=0,y=0,f=0;f<c.length;f++)if(typeof c[f]=="string")if(c[f]==="Z"){for(y=0;y<8-c.length+1;y++)I[f+y]=0;p=y-1}else I[f+p]=Ra(parseInt(c[f],16));else I[f+p]=c[f];return[I[1]<<16|I[0],I[3]<<16|I[2],I[5]<<16|I[4],I[7]<<16|I[6]]}var Ue={address_map:{id:1,addrs:{},names:{}},lookup_name:function(a){var c=As(a);if(c!==null||(c=Ia(a),c!==null))return a;var f;if(Ue.address_map.addrs[a])f=Ue.address_map.addrs[a];else{var p=Ue.address_map.id++;A(p<65535,"exceeded max address mappings of 65535"),f="172.29."+(p&255)+"."+(p&65280),Ue.address_map.names[f]=a,Ue.address_map.addrs[a]=f}return f},lookup_addr:function(a){return Ue.address_map.names[a]?Ue.address_map.names[a]:null}};function Ec(a,c,f){if(f&&a===0)return null;var p=Ac(a,c);if(p.errno)throw new Ic.ErrnoError(p.errno);return p.addr=Ue.lookup_addr(p.addr)||p.addr,p}function Fc(a,c,f){if(F)return st(5,1,a,c,f);var p=Di(a),y=Ec(c,f);return p.sock_ops.bind(p,y.addr,y.port),0}function xc(a,c,f){if(F)return st(6,1,a,c,f);var p=Di(a),y=Ec(c,f);return p.sock_ops.connect(p,y.addr,y.port),0}function Bc(a,c,f,p){if(F)return st(7,1,a,c,f,p);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Dc(a,c,f){return F?st(8,1,a,c,f):(tn.varargs=f,0)}function Oc(a,c){if(F)return st(9,1,a,c);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zy(a,c){return A(a==a>>>0||a==(a|0)),A(c===(c|0)),c+2097152>>>0<4194305-!!a?(a>>>0)+c*4294967296:NaN}function Rc(a,c,f){if(F)return st(10,1,a,c,f);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Mc(a,c,f){if(F)return st(11,1,a,c,f);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ta(a,c,f,p,y){switch(c){case 2:f=As(f),cc(a,16),y&&(o()[y>>>2]=16),i()[a>>>1]=c,o()[a+4>>>2]=f,i()[a+2>>>1]=Ra(p);break;case 10:f=Ia(f),cc(a,28),y&&(o()[y>>>2]=28),o()[a>>>2]=c,o()[a+8>>>2]=f[0],o()[a+12>>>2]=f[1],o()[a+16>>>2]=f[2],o()[a+20>>>2]=f[3],i()[a+2>>>1]=Ra(p);break;default:return 5}return 0}function kc(a,c,f){if(F)return st(12,1,a,c,f);var p=Di(a);if(!p.daddr)return-53;var y=Ta(c,p.family,Ue.lookup_name(p.daddr),p.dport,f);return A(!y),0}function Cc(a,c,f,p,y){if(F)return st(13,1,a,c,f,p,y);var v=Di(a);return c===1&&f===4?(o()[p>>>2]=v.error,o()[y>>>2]=4,v.error=null,0):-50}function Lc(a,c,f){return F?st(14,1,a,c,f):(tn.varargs=f,0)}function Uc(a,c){if(F)return st(15,1,a,c);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Nc(a,c,f){if(F)return st(16,1,a,c,f);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function jc(a,c,f,p){if(F)return st(17,1,a,c,f,p);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Pc(a,c,f,p){if(F)return st(18,1,a,c,f,p);tn.varargs=p,J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Hc(a,c,f,p,y,v){if(F)return st(19,1,a,c,f,p,y,v);var b=Di(a),I=b.sock_ops.recvmsg(b,f);if(!I)return 0;if(y){var x=Ta(y,b.family,Ue.lookup_name(I.addr),I.port,v);A(!x)}return n().set(I.buffer,c>>>0),I.buffer.byteLength}function Vc(a,c,f,p){if(F)return st(20,1,a,c,f,p);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Wc(a){if(F)return st(21,1,a);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zc(a,c,f,p,y,v){if(F)return st(22,1,a,c,f,p,y,v);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Yc(a,c,f){if(F)return st(23,1,a,c,f);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Gc(a,c){if(F)return st(24,1,a,c);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $c(a,c,f){if(F)return st(25,1,a,c,f);J("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ph(a){var c=new WebAssembly.Exception(_c(),[a],{traceStack:!0});c.message=bc(c);var f=c.stack.split(`
`);throw f.splice(1,1),c.stack=f.join(`
`),c}function _h(){return 1024e3}var mh=!0;function yh(){return mh}function Aa(a){Atomics.store(o(),a>>2,1),Ri()&&pp(a),Atomics.compareExchange(o(),a>>2,1,0)}u.executeNotifiedProxyingQueue=Aa;function bh(a,c,f,p){if(a==c)setTimeout(()=>Aa(p));else if(F)postMessage({targetThread:a,cmd:"processProxyingQueue",queue:p});else{var y=k.pthreads[a];if(!y){ot("Cannot send message to thread with ID "+a+", unknown thread ID!");return}y.postMessage({cmd:"processProxyingQueue",queue:p})}}function gh(a,c,f){return ot("emscripten_set_offscreencanvas_size: Build with -sOFFSCREENCANVAS_SUPPORT=1 to enable transferring canvases to pthreads."),-1}function wh(){J("native code called abort()")}function vh(a){J(gc)}function Sh(a,c){return globalThis.DUCKDB_RUNTIME.createDirectory(u,a,c)}function Ih(a,c){return globalThis.DUCKDB_RUNTIME.checkDirectory(u,a,c)}function Th(a,c){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(u,a,c)}function Ah(a,c){return globalThis.DUCKDB_RUNTIME.removeDirectory(u,a,c)}function Eh(a){return globalThis.DUCKDB_RUNTIME.closeFile(u,a)}function Fh(a,c){return globalThis.DUCKDB_RUNTIME.checkFile(u,a,c)}function xh(a){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(u,a)}function Bh(a,c,f,p){return globalThis.DUCKDB_RUNTIME.moveFile(u,a,c,f,p)}function Dh(a,c){return globalThis.DUCKDB_RUNTIME.openFile(u,a,c)}function Oh(a,c,f,p){return globalThis.DUCKDB_RUNTIME.readFile(u,a,c,f,p)}function Rh(a,c){return globalThis.DUCKDB_RUNTIME.truncateFile(u,a,c)}function Mh(a,c,f,p){return globalThis.DUCKDB_RUNTIME.writeFile(u,a,c,f,p)}function kh(a){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(a)}function Ch(a,c){return globalThis.DUCKDB_RUNTIME.glob(u,a,c)}function Lh(a){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(u,a)}function Uh(a,c,f,p,y,v){return globalThis.DUCKDB_RUNTIME.callScalarUDF(u,a,c,f,p,y,v)}function Nh(){ft||xt||$e("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")}function jh(a){A(typeof a=="number"),console.error(Le(a))}function Ph(){return Date.now()}function Xc(){return 4294901760}function Hh(){return Xc()}var Ea;ft?Ea=()=>{var a=process.hrtime();return a[0]*1e3+a[1]/1e6}:Ea=()=>performance.timeOrigin+performance.now();function Vh(a,c,f){n().copyWithin(a>>>0,c>>>0,c+f>>>0)}function Wh(){return ft?Bt("os").cpus().length:navigator.hardwareConcurrency}function st(a,c){var f=arguments.length-2,p=arguments,y=19;if(f>y)throw"emscripten_proxy_to_main_thread_js: Too many arguments "+f+" to proxied function idx="+a+", maximum supported is "+y;return yc(()=>{for(var v=f,b=Yn(v*8),I=b>>3,x=0;x<f;x++){var M=p[2+x];h()[I+x>>>0]=M}return hp(a,v,b,c)})}var Fa=[];function zh(a,c,f){Fa.length=c;for(var p=f>>3,y=0;y<c;y++)Fa[y]=h()[p+y>>>0];var v=ap[a];return A(v.length==c,"Call args mismatch in emscripten_receive_on_main_thread_js"),v.apply(null,Fa)}function Yh(a){var c=Pt.buffer;try{return Pt.grow(a-c.byteLength+65535>>>16),fr(),1}catch(f){ot("emscripten_realloc_buffer: Attempted to grow heap from "+c.byteLength+" bytes to "+a+" bytes, but got error: "+f)}}function Gh(a){var c=n().length;if(a=a>>>0,a<=c)return!1;var f=Xc();if(a>f)return ot("Cannot enlarge memory, asked to go up to "+a+" bytes, but the limit is "+f+" bytes!"),!1;let p=(x,M)=>x+(M-x%M)%M;for(var y=1;y<=4;y*=2){var v=c*(1+.2/y);v=Math.min(v,a+100663296);var b=Math.min(f,p(Math.max(a,v),65536)),I=Yh(b);if(I)return!0}return ot("Failed to grow the heap from "+c+" bytes to "+b+" bytes, not enough memory!"),!1}function $h(){throw"unwind"}var xa={};function Xh(){return nt||"./this.program"}function Oi(){if(!Oi.strings){var a=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:a,_:Xh()};for(var f in xa)xa[f]===void 0?delete c[f]:c[f]=xa[f];var p=[];for(var f in c)p.push(f+"="+c[f]);Oi.strings=p}return Oi.strings}function Kh(a,c,f){for(var p=0;p<a.length;++p)A(a.charCodeAt(p)===(a.charCodeAt(p)&255)),e()[c++>>>0]=a.charCodeAt(p);f||(e()[c>>>0]=0)}function Kc(a,c){if(F)return st(26,1,a,c);var f=0;return Oi().forEach(function(p,y){var v=c+f;l()[a+y*4>>>2]=v,Kh(p,v),f+=p.length+1}),0}function Jc(a,c){if(F)return st(27,1,a,c);var f=Oi();l()[a>>>2]=f.length;var p=0;return f.forEach(function(y){p+=y.length+1}),l()[c>>>2]=p,0}function qc(a){if(F)return st(28,1,a);J("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function Qc(a,c){if(F)return st(29,1,a,c);var f=a==1||a==2?2:J();return e()[c>>>0]=f,0}function Zc(a,c,f,p,y,v){if(F)return st(30,1,a,c,f,p,y,v);J("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function tu(a,c,f,p,y,v){if(F)return st(31,1,a,c,f,p,y,v);J("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function eu(a,c,f,p){if(F)return st(32,1,a,c,f,p);J("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function ru(a,c,f,p,y){return F?st(33,1,a,c,f,p,y):70}function nu(a){if(F)return st(34,1,a);J("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Ba=[null,[],[]];function Da(a,c){var f=Ba[a];A(f),c===0||c===10?((a===1?vi:ot)(Vl(f,0)),f.length=0):f.push(c)}function Jh(){fp(0),Ba[1].length&&Da(1,10),Ba[2].length&&Da(2,10)}function iu(a,c,f,p){if(F)return st(35,1,a,c,f,p);for(var y=0,v=0;v<f;v++){var b=l()[c>>>2],I=l()[c+4>>>2];c+=8;for(var x=0;x<I;x++)Da(a,n()[b+x>>>0]);y+=I}return l()[p>>>2]=y,0}function su(a,c,f,p){if(F)return st(36,1,a,c,f,p);var y=[],v=null,b=0,I=0,x=0,M=0,et=0,Ct=0,ht,Rr;function Tt(Yt,Xe,Mr,S,O,Gt){var pt,Xt,se,Sn;return Xt=Yt===10?28:16,O=Yt===10?Tc(O):Sa(O),pt=fu(Xt),Sn=Ta(pt,Yt,O,Gt),A(!Sn),se=fu(32),o()[se+4>>>2]=Yt,o()[se+8>>>2]=Xe,o()[se+12>>>2]=Mr,o()[se+24>>>2]=S,l()[se+20>>>2]=pt,Yt===10?o()[se+16>>>2]=28:o()[se+16>>>2]=16,o()[se+28>>>2]=0,se}if(f&&(x=o()[f>>>2],M=o()[f+4>>>2],et=o()[f+8>>>2],Ct=o()[f+12>>>2]),et&&!Ct&&(Ct=et===2?17:6),!et&&Ct&&(et=Ct===17?2:1),Ct===0&&(Ct=6),et===0&&(et=1),!a&&!c)return-2;if(x&-1088||f!==0&&o()[f>>>2]&2&&!a)return-1;if(x&32)return-2;if(et!==0&&et!==1&&et!==2)return-7;if(M!==0&&M!==2&&M!==10)return-6;if(c&&(c=Le(c),I=parseInt(c,10),isNaN(I)))return x&1024?-2:-8;if(!a)return M===0&&(M=2),(x&1)===0&&(M===2?b=Oa(2130706433):b=[0,0,0,1]),ht=Tt(M,et,Ct,null,b,I),l()[p>>>2]=ht,0;if(a=Le(a),b=As(a),b!==null)if(M===0||M===2)M=2;else if(M===10&&x&8)b=[0,0,Oa(65535),b],M=10;else return-2;else if(b=Ia(a),b!==null)if(M===0||M===10)M=10;else return-2;return b!=null?(ht=Tt(M,et,Ct,a,b,I),l()[p>>>2]=ht,0):x&4?-2:(a=Ue.lookup_name(a),b=As(a),M===0?M=2:M===10&&(b=[0,0,Oa(65535),b]),ht=Tt(M,et,Ct,null,b,I),l()[p>>>2]=ht,0)}function qh(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function"){var a=new Uint8Array(1);return()=>(crypto.getRandomValues(a),a[0])}else if(ft)try{var c=Bt("crypto");return()=>c.randomBytes(1)[0]}catch(f){}return()=>J("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function Fs(a,c){Fs.randomDevice||(Fs.randomDevice=qh());for(var f=0;f<c;f++)e()[a+f>>>0]=Fs.randomDevice();return 0}function Qh(a,c,f,p,y,v,b){var I=Ac(a,c);if(I.errno)return-6;var x=I.port,M=I.addr,et=!1;if(f&&p){var Ct;if(b&1||!(Ct=Ue.lookup_addr(M))){if(b&8)return-2}else M=Ct;var ht=ma(M,f,p);ht+1>=p&&(et=!0)}if(y&&v){x=""+x;var ht=ma(x,y,v);ht+1>=v&&(et=!0)}return et?-12:0}function xs(a){return a%4===0&&(a%100!==0||a%400===0)}function Zh(a,c){for(var f=0,p=0;p<=c;f+=a[p++]);return f}var ou=[31,29,31,30,31,30,31,31,30,31,30,31],au=[31,28,31,30,31,30,31,31,30,31,30,31];function tp(a,c){for(var f=new Date(a.getTime());c>0;){var p=xs(f.getFullYear()),y=f.getMonth(),v=(p?ou:au)[y];if(c>v-f.getDate())c-=v-f.getDate()+1,f.setDate(1),y<11?f.setMonth(y+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else return f.setDate(f.getDate()+c),f}return f}function ep(a,c,f){var p=f>0?f:Pf(a)+1,y=new Array(p),v=Wl(a,y,0,y.length);return c&&(y.length=v),y}function lu(a,c){A(a.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),e().set(a,c>>>0)}function rp(a,c,f,p){var y=o()[p+40>>>2],v={tm_sec:o()[p>>>2],tm_min:o()[p+4>>>2],tm_hour:o()[p+8>>>2],tm_mday:o()[p+12>>>2],tm_mon:o()[p+16>>>2],tm_year:o()[p+20>>>2],tm_wday:o()[p+24>>>2],tm_yday:o()[p+28>>>2],tm_isdst:o()[p+32>>>2],tm_gmtoff:o()[p+36>>>2],tm_zone:y?Le(y):""},b=Le(f),I={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var x in I)b=b.replace(new RegExp(x,"g"),I[x]);var M=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],et=["January","February","March","April","May","June","July","August","September","October","November","December"];function Ct(S,O,Gt){for(var pt=typeof S=="number"?S.toString():S||"";pt.length<O;)pt=Gt[0]+pt;return pt}function ht(S,O){return Ct(S,O,"0")}function Rr(S,O){function Gt(Xt){return Xt<0?-1:Xt>0?1:0}var pt;return(pt=Gt(S.getFullYear()-O.getFullYear()))===0&&(pt=Gt(S.getMonth()-O.getMonth()))===0&&(pt=Gt(S.getDate()-O.getDate())),pt}function Tt(S){switch(S.getDay()){case 0:return new Date(S.getFullYear()-1,11,29);case 1:return S;case 2:return new Date(S.getFullYear(),0,3);case 3:return new Date(S.getFullYear(),0,2);case 4:return new Date(S.getFullYear(),0,1);case 5:return new Date(S.getFullYear()-1,11,31);case 6:return new Date(S.getFullYear()-1,11,30)}}function Yt(S){var O=tp(new Date(S.tm_year+1900,0,1),S.tm_yday),Gt=new Date(O.getFullYear(),0,4),pt=new Date(O.getFullYear()+1,0,4),Xt=Tt(Gt),se=Tt(pt);return Rr(Xt,O)<=0?Rr(se,O)<=0?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}var Xe={"%a":function(S){return M[S.tm_wday].substring(0,3)},"%A":function(S){return M[S.tm_wday]},"%b":function(S){return et[S.tm_mon].substring(0,3)},"%B":function(S){return et[S.tm_mon]},"%C":function(S){var O=S.tm_year+1900;return ht(O/100|0,2)},"%d":function(S){return ht(S.tm_mday,2)},"%e":function(S){return Ct(S.tm_mday,2," ")},"%g":function(S){return Yt(S).toString().substring(2)},"%G":function(S){return Yt(S)},"%H":function(S){return ht(S.tm_hour,2)},"%I":function(S){var O=S.tm_hour;return O==0?O=12:O>12&&(O-=12),ht(O,2)},"%j":function(S){return ht(S.tm_mday+Zh(xs(S.tm_year+1900)?ou:au,S.tm_mon-1),3)},"%m":function(S){return ht(S.tm_mon+1,2)},"%M":function(S){return ht(S.tm_min,2)},"%n":function(){return`
`},"%p":function(S){return S.tm_hour>=0&&S.tm_hour<12?"AM":"PM"},"%S":function(S){return ht(S.tm_sec,2)},"%t":function(){return"	"},"%u":function(S){return S.tm_wday||7},"%U":function(S){var O=S.tm_yday+7-S.tm_wday;return ht(Math.floor(O/7),2)},"%V":function(S){var O=Math.floor((S.tm_yday+7-(S.tm_wday+6)%7)/7);if((S.tm_wday+371-S.tm_yday-2)%7<=2&&O++,O){if(O==53){var pt=(S.tm_wday+371-S.tm_yday)%7;pt!=4&&(pt!=3||!xs(S.tm_year))&&(O=1)}}else{O=52;var Gt=(S.tm_wday+7-S.tm_yday-1)%7;(Gt==4||Gt==5&&xs(S.tm_year%400-1))&&O++}return ht(O,2)},"%w":function(S){return S.tm_wday},"%W":function(S){var O=S.tm_yday+7-(S.tm_wday+6)%7;return ht(Math.floor(O/7),2)},"%y":function(S){return(S.tm_year+1900).toString().substring(2)},"%Y":function(S){return S.tm_year+1900},"%z":function(S){var O=S.tm_gmtoff,Gt=O>=0;return O=Math.abs(O)/60,O=O/60*100+O%60,(Gt?"+":"-")+String("0000"+O).slice(-4)},"%Z":function(S){return S.tm_zone},"%%":function(){return"%"}};b=b.replace(/%%/g,"\0\0");for(var x in Xe)b.includes(x)&&(b=b.replace(new RegExp(x,"g"),Xe[x](v)));b=b.replace(/\0\0/g,"%");var Mr=ep(b,!1);return Mr.length>c?0:(lu(Mr,a),Mr.length-1)}function np(a,c,f,p,y){return rp(a,c,f,p)}function ip(a){var c=u["_"+a];return A(c,"Cannot call unknown function "+a+", make sure it is exported"),c}function sp(a,c,f,p,y){var v={string:Tt=>{var Yt=0;if(Tt!=null&&Tt!==0){var Xe=(Tt.length<<2)+1;Yt=Yn(Xe),ma(Tt,Yt,Xe)}return Yt},array:Tt=>{var Yt=Yn(Tt.length);return lu(Tt,Yt),Yt}};function b(Tt){return c==="string"?Le(Tt):c==="boolean"?Boolean(Tt):Tt}var I=ip(a),x=[],M=0;if(A(c!=="array",'Return type should not be "array".'),p)for(var et=0;et<p.length;et++){var Ct=v[f[et]];Ct?(M===0&&(M=ka()),x[et]=Ct(p[et])):x[et]=p[et]}var ht=I.apply(null,x);function Rr(Tt){return M!==0&&Bs(M),b(Tt)}return ht=Rr(ht),ht}var op=1024e3;k.init();var ap=[null,dc,mc,wc,Sc,Fc,xc,Bc,Dc,Oc,Rc,Mc,kc,Cc,Lc,Uc,Nc,jc,Pc,Hc,Vc,Wc,zc,Yc,Gc,$c,Kc,Jc,qc,Qc,Zc,tu,eu,ru,nu,iu,su];function lp(){Zf("fetchSettings")}var cu={__assert_fail:ch,__dlsym:uh,__emscripten_init_main_thread_js:dh,__emscripten_thread_cleanup:fh,__pthread_create_js:vc,__syscall__newselect:Sc,__syscall_bind:Fc,__syscall_connect:xc,__syscall_faccessat:Bc,__syscall_fcntl64:Dc,__syscall_fstat64:Oc,__syscall_ftruncate64:Rc,__syscall_getdents64:Mc,__syscall_getpeername:kc,__syscall_getsockopt:Cc,__syscall_ioctl:Lc,__syscall_lstat64:Uc,__syscall_mkdirat:Nc,__syscall_newfstatat:jc,__syscall_openat:Pc,__syscall_recvfrom:Hc,__syscall_renameat:Vc,__syscall_rmdir:Wc,__syscall_sendto:zc,__syscall_socket:Yc,__syscall_stat64:Gc,__syscall_unlinkat:$c,__throw_exception_with_stack_trace:ph,_emscripten_default_pthread_stack_size:_h,_emscripten_get_now_is_monotonic:yh,_emscripten_notify_task_queue:bh,_emscripten_set_offscreencanvas_size:gh,abort:wh,dlopen:vh,duckdb_web_fs_directory_create:Sh,duckdb_web_fs_directory_exists:Ih,duckdb_web_fs_directory_list_files:Th,duckdb_web_fs_directory_remove:Ah,duckdb_web_fs_file_close:Eh,duckdb_web_fs_file_exists:Fh,duckdb_web_fs_file_get_last_modified_time:xh,duckdb_web_fs_file_move:Bh,duckdb_web_fs_file_open:Dh,duckdb_web_fs_file_read:Oh,duckdb_web_fs_file_truncate:Rh,duckdb_web_fs_file_write:Mh,duckdb_web_fs_get_default_data_protocol:kh,duckdb_web_fs_glob:Ch,duckdb_web_test_platform_feature:Lh,duckdb_web_udf_scalar_call:Uh,emscripten_check_blocking_allowed:Nh,emscripten_console_error:jh,emscripten_date_now:Ph,emscripten_get_heap_max:Hh,emscripten_get_now:Ea,emscripten_memcpy_big:Vh,emscripten_num_logical_cores:Wh,emscripten_receive_on_main_thread_js:zh,emscripten_resize_heap:Gh,emscripten_unwind_to_js_event_loop:$h,environ_get:Kc,environ_sizes_get:Jc,exit:hc,fd_close:qc,fd_fdstat_get:Qc,fd_pread:Zc,fd_pwrite:tu,fd_read:eu,fd_seek:ru,fd_sync:nu,fd_write:iu,getaddrinfo:su,getentropy:Fs,getnameinfo:Qh,memory:Pt||u.wasmMemory,strftime_l:np},Yy=Qf(),Gy=m("__wasm_call_ctors"),cp=u._main=m("main"),$y=u._duckdb_web_fs_glob_add_path=m("duckdb_web_fs_glob_add_path"),Xy=u._duckdb_web_clear_response=m("duckdb_web_clear_response"),Ky=u._duckdb_web_fail_with=m("duckdb_web_fail_with"),Jy=u._duckdb_web_reset=m("duckdb_web_reset"),qy=u._duckdb_web_connect=m("duckdb_web_connect"),Qy=u._duckdb_web_disconnect=m("duckdb_web_disconnect"),Zy=u._duckdb_web_flush_files=m("duckdb_web_flush_files"),tb=u._duckdb_web_flush_file=m("duckdb_web_flush_file"),eb=u._duckdb_web_open=m("duckdb_web_open"),rb=u._duckdb_web_get_global_file_info=m("duckdb_web_get_global_file_info"),nb=u._duckdb_web_collect_file_stats=m("duckdb_web_collect_file_stats"),ib=u._duckdb_web_export_file_stats=m("duckdb_web_export_file_stats"),sb=u._duckdb_web_fs_drop_file=m("duckdb_web_fs_drop_file"),ob=u._duckdb_web_fs_drop_files=m("duckdb_web_fs_drop_files"),ab=u._duckdb_web_fs_glob_file_infos=m("duckdb_web_fs_glob_file_infos"),lb=u._duckdb_web_fs_get_file_info_by_id=m("duckdb_web_fs_get_file_info_by_id"),cb=u._duckdb_web_fs_get_file_info_by_name=m("duckdb_web_fs_get_file_info_by_name"),ub=u._duckdb_web_fs_register_file_url=m("duckdb_web_fs_register_file_url"),db=u._duckdb_web_fs_register_file_buffer=m("duckdb_web_fs_register_file_buffer"),fb=u._duckdb_web_copy_file_to_buffer=m("duckdb_web_copy_file_to_buffer"),hb=u._duckdb_web_copy_file_to_path=m("duckdb_web_copy_file_to_path"),pb=u._duckdb_web_get_version=m("duckdb_web_get_version"),_b=u._duckdb_web_get_feature_flags=m("duckdb_web_get_feature_flags"),mb=u._duckdb_web_tokenize=m("duckdb_web_tokenize"),yb=u._duckdb_web_udf_scalar_create=m("duckdb_web_udf_scalar_create"),bb=u._duckdb_web_prepared_create=m("duckdb_web_prepared_create"),gb=u._duckdb_web_prepared_close=m("duckdb_web_prepared_close"),wb=u._duckdb_web_prepared_run=m("duckdb_web_prepared_run"),vb=u._duckdb_web_prepared_send=m("duckdb_web_prepared_send"),Sb=u._duckdb_web_query_run=m("duckdb_web_query_run"),Ib=u._duckdb_web_pending_query_start=m("duckdb_web_pending_query_start"),Tb=u._duckdb_web_pending_query_poll=m("duckdb_web_pending_query_poll"),Ab=u._duckdb_web_pending_query_cancel=m("duckdb_web_pending_query_cancel"),Eb=u._duckdb_web_query_fetch_results=m("duckdb_web_query_fetch_results"),Fb=u._duckdb_web_get_tablenames=m("duckdb_web_get_tablenames"),xb=u._duckdb_web_insert_arrow_from_ipc_stream=m("duckdb_web_insert_arrow_from_ipc_stream"),Bb=u._duckdb_web_insert_csv_from_path=m("duckdb_web_insert_csv_from_path"),Db=u._duckdb_web_insert_json_from_path=m("duckdb_web_insert_json_from_path"),Ob=u.__emscripten_tls_init=m("_emscripten_tls_init"),Ri=u._pthread_self=m("pthread_self"),up=m("__errno_location"),Rb=m("__dl_seterr"),dp=u.__emscripten_thread_init=m("_emscripten_thread_init"),Mb=u.__emscripten_thread_crashed=m("_emscripten_thread_crashed"),fp=u._fflush=m("fflush"),Oa=m("htonl"),Ra=m("htons"),kb=m("emscripten_main_browser_thread_id"),Cb=m("emscripten_main_thread_process_queued_calls"),hp=m("_emscripten_run_in_main_runtime_thread_js"),Lb=m("emscripten_dispatch_to_thread_"),uu=m("ntohs"),pp=u.__emscripten_proxy_execute_task_queue=m("_emscripten_proxy_execute_task_queue"),du=m("_emscripten_thread_free_data"),_p=u.__emscripten_thread_exit=m("_emscripten_thread_exit"),fu=u._malloc=m("malloc"),hu=u._free=m("free"),mp=function(){return(mp=u.asm.emscripten_stack_get_base).apply(null,arguments)},Ma=function(){return(Ma=u.asm.emscripten_stack_get_end).apply(null,arguments)},pu=function(){return(pu=u.asm.__trap).apply(null,arguments)},_u=function(){return(_u=u.asm.emscripten_stack_init).apply(null,arguments)},mu=function(){return(mu=u.asm.emscripten_stack_set_limits).apply(null,arguments)},yp=function(){return(yp=u.asm.emscripten_stack_get_free).apply(null,arguments)},ka=m("stackSave"),Bs=m("stackRestore"),Yn=m("stackAlloc"),yu=function(){return(yu=u.asm.emscripten_stack_get_current).apply(null,arguments)},bp=u.___cxa_decrement_exception_refcount=m("__cxa_decrement_exception_refcount"),gp=u.___cxa_increment_exception_refcount=m("__cxa_increment_exception_refcount"),wp=u.___thrown_object_from_unwind_exception=m("__thrown_object_from_unwind_exception"),vp=u.___get_exception_message=m("__get_exception_message"),Ub=u.dynCall_jiji=m("dynCall_jiji"),Nb=u.dynCall_iiiiij=m("dynCall_iiiiij"),jb=u.dynCall_iiiiijj=m("dynCall_iiiiijj"),Pb=u.dynCall_iiiiiijj=m("dynCall_iiiiiijj"),Hb=u.dynCall_viijii=m("dynCall_viijii"),Vb=u.dynCall_jiii=m("dynCall_jiii"),Wb=u.dynCall_jii=m("dynCall_jii"),zb=u.dynCall_ji=m("dynCall_ji"),Yb=u.dynCall_jij=m("dynCall_jij"),Gb=u.dynCall_iiij=m("dynCall_iiij"),$b=u.dynCall_viji=m("dynCall_viji"),Xb=u.dynCall_iij=m("dynCall_iij"),Kb=u.dynCall_iiiiiji=m("dynCall_iiiiiji"),Jb=u.dynCall_vij=m("dynCall_vij"),qb=u.dynCall_viij=m("dynCall_viij"),Qb=u.dynCall_jiiiii=m("dynCall_jiiiii"),Zb=u.dynCall_viiijj=m("dynCall_viiijj"),tg=u.dynCall_viiij=m("dynCall_viiij"),eg=u.dynCall_j=m("dynCall_j"),rg=u.dynCall_viijij=m("dynCall_viijij"),ng=u.dynCall_viiijiiiijj=m("dynCall_viiijiiiijj"),ig=u.dynCall_vjjijij=m("dynCall_vjjijij"),sg=u.dynCall_vijjji=m("dynCall_vijjji"),og=u.dynCall_vjjii=m("dynCall_vjjii"),ag=u.dynCall_viiiiiji=m("dynCall_viiiiiji"),lg=u.dynCall_jiiiji=m("dynCall_jiiiji"),cg=u.dynCall_jiiij=m("dynCall_jiiij"),ug=u.dynCall_jijjij=m("dynCall_jijjij"),dg=u.dynCall_vijjj=m("dynCall_vijjj"),fg=u.dynCall_jiijii=m("dynCall_jiijii"),hg=u.dynCall_jijiii=m("dynCall_jijiii"),pg=u.dynCall_viijiiiii=m("dynCall_viijiiiii"),_g=u.dynCall_viijiiij=m("dynCall_viijiiij"),mg=u.dynCall_vijiiiji=m("dynCall_vijiiiji"),yg=u.dynCall_viiiij=m("dynCall_viiiij"),bg=u.dynCall_jiiji=m("dynCall_jiiji"),gg=u.dynCall_viiijij=m("dynCall_viiijij"),wg=u.dynCall_viijiij=m("dynCall_viijiij"),vg=u.dynCall_viiiiijj=m("dynCall_viiiiijj"),Sg=u.dynCall_viiijji=m("dynCall_viiijji"),Ig=u.dynCall_vijii=m("dynCall_vijii"),Tg=u.dynCall_jiiiij=m("dynCall_jiiiij"),Ag=u.dynCall_jj=m("dynCall_jj"),Eg=u.dynCall_ij=m("dynCall_ij"),Fg=u.dynCall_ijjj=m("dynCall_ijjj"),xg=u.dynCall_jjjd=m("dynCall_jjjd"),Bg=u.dynCall_jjjjjjd=m("dynCall_jjjjjjd"),Dg=u.dynCall_jijj=m("dynCall_jijj"),Og=u.dynCall_iiiji=m("dynCall_iiiji"),Rg=u.dynCall_viiji=m("dynCall_viiji"),Mg=u.dynCall_jiiiijj=m("dynCall_jiiiijj"),kg=u.dynCall_jiiii=m("dynCall_jiiii"),Cg=u.dynCall_iiijj=m("dynCall_iiijj"),Lg=u.dynCall_iiji=m("dynCall_iiji"),Ug=u.dynCall_viiiji=m("dynCall_viiiji"),Ng=u.dynCall_viiiiji=m("dynCall_viiiiji"),jg=u.dynCall_viijji=m("dynCall_viijji"),Pg=u.dynCall_viijj=m("dynCall_viijj"),Hg=u.dynCall_jijiiii=m("dynCall_jijiiii"),Vg=u.dynCall_viiijiji=m("dynCall_viiijiji"),Wg=u.dynCall_viijiji=m("dynCall_viijiji");u.keepRuntimeAlive=Fi,u.wasmMemory=Pt,u.stackAlloc=Yn,u.stackSave=ka,u.stackRestore=Bs,u.STACK_SIZE=op,u.ccall=sp,u.ExitStatus=Bi,u.PThread=k;var Sp=["stringToNewUTF8","getHostByName","traverseStack","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromI64","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","stringToAscii","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","allocateUTF8","allocateUTF8OnStack","writeStringToMemory","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","emscriptenWebGLGet","computeUnpackAlignedImageSize","emscriptenWebGLGetTexPixelData","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","writeGLArray","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","runAndAbortIfError","ALLOC_NORMAL","ALLOC_STACK","allocate"];Sp.forEach(eh);var Ip=["run","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createPreloadedFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","getTempRet0","setTempRet0","GROWABLE_HEAP_I8","GROWABLE_HEAP_U8","GROWABLE_HEAP_I16","GROWABLE_HEAP_U16","GROWABLE_HEAP_I32","GROWABLE_HEAP_U32","GROWABLE_HEAP_F32","GROWABLE_HEAP_F64","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","getRandomDevice","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","intArrayFromString","UTF16Decoder","writeArrayToMemory","writeAsciiToMemory","SYSCALLS","getSocketFromFD","getSocketAddress","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","tempFixedLengthArray","miniTempWebGLFloatBuffers","GL","AL","SDL","SDL_gfx","GLUT","EGL","GLFW","GLEW","IDBStore","terminateWorker","killThread","cleanupThread","registerTLSInit","cancelThread","spawnThread","exitOnMainThread","invokeEntryPoint","executeNotifiedProxyingQueue","SOCKFS","FS"];Ip.forEach(oc);var Ds;xi=function a(){Ds||bu(),Ds||(xi=a)};function Tp(){A(Zr==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),A(ya.length==0,"cannot call main when preRun functions remain to be called");var a=cp,c=0,f=0;try{var p=a(c,f);return fc(p,!0),p}catch(y){return pc(y)}}function Ap(){A(!F),_u(),ql()}function bu(){if(Zr>0)return;if(F||Ap(),F){g(u),ec(),startWorker(u);return}if(Hf(),Zr>0)return;function a(){Ds||(Ds=!0,u.calledRun=!0,!Ii&&(ec(),Vf(),g(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),gu&&Tp(),Wf()))}u.setStatus?(u.setStatus("Running..."),setTimeout(function(){setTimeout(function(){u.setStatus("")},1),a()},1)):a(),Vn()}function Ep(){var a=vi,c=ot,f=!1;vi=ot=p=>{f=!0};try{Jh()}catch(p){}vi=a,ot=c,f&&($e("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),$e("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(u.preInit)for(typeof u.preInit=="function"&&(u.preInit=[u.preInit]);u.preInit.length>0;)u.preInit.pop()();var gu=!0;return u.noInitialRun&&(gu=!1),bu(),t.ready}})(),Of=gy;var la=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Nt.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Mt(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((s,o)=>{try{s(this._bindings.pollPendingQuery(this._conn))}catch(l){o(l)}});let n=new ca(this._bindings,this._conn,e),i=Nt.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new kl(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=sa(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},ca=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},kl=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Nt.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Mt(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new ca(this.bindings,this.connectionId,e),i=Nt.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}};var kf=new TextEncoder,Rf=new TextDecoder("utf-8");function Cl(r,t,e){let n=kf.encode(e),i=r._malloc(n.byteLength),s=r.HEAPU8.subarray(i,i+n.byteLength);s.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=i,r.HEAPF64[(t>>3)+2]=s.byteLength}function Ul(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Ll(r,t,e,n){let i=r.HEAPU8.subarray(t,t+n*Ul(e));switch(e){case"UINT8":return new Uint8Array(i.buffer,i.byteOffset,n);case"INT8":return new Int8Array(i.buffer,i.byteOffset,n);case"INT32":return new Int32Array(i.buffer,i.byteOffset,n);case"FLOAT":return new Float32Array(i.buffer,i.byteOffset,n);case"DOUBLE":return new Float64Array(i.buffer,i.byteOffset,n);case"VARCHAR":return new Float64Array(i.buffer,i.byteOffset,n);default:return new Array(0)}}function Mf(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function ua(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Cf(r,t,e,n,i,s,o,l){try{let d=r._udfFunctions.get(n);if(!d){Cl(t,e,"Unknown UDF with id: "+n);return}let h=Rf.decode(t.HEAPU8.subarray(i,i+s)),u=JSON.parse(h),g=ua(t,o,l/8),w=it=>{var Be;let jt=null;switch(it.validityBuffer!==void 0&&(jt=Mf(t,g[it.validityBuffer],u.rows)),it.physicalType){case"VARCHAR":{if(it.dataBuffer===null||it.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(it.lengthBuffer===null||it.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let de=Ll(t,g[it.dataBuffer],it.physicalType,u.rows),Bt=[],kt=ua(t,g[it.lengthBuffer],u.rows);for(let _t=0;_t<u.rows;++_t){if(jt!=null&&!jt[_t]){Bt.push(null);continue}let De=t.HEAPU8.subarray(de[_t],de[_t]+kt[_t]),gn=Rf.decode(De);Bt.push(gn)}return _t=>Bt[_t]}case"STRUCT":{let de={},Bt=[];for(let kt=0;kt<(((Be=it.children)==null?void 0:Be.length)||0);++kt){let _t=it.children[kt],De=w(_t);Bt.push(gn=>{de[_t.name]=De(gn)})}return jt!=null?kt=>{if(!jt[kt])return null;for(let _t of Bt)_t(kt);return de}:kt=>{for(let _t of Bt)_t(kt);return de}}default:{if(it.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+it.physicalType);let de=Ll(t,g[it.dataBuffer],it.physicalType,u.rows);return jt!=null?Bt=>jt[Bt]?de[Bt]:null:Bt=>de[Bt]}}},T=[];for(let it=0;it<u.args.length;++it)T.push(w(u.args[it]));let tt=u.rows*Ul(u.ret.physicalType),nt=t._malloc(tt),yt=Ll(t,nt,u.ret.physicalType,u.rows),gt=t._malloc(u.rows),xt=Mf(t,gt,u.rows);if(yt.length==0||xt.length==0){Cl(t,e,"Can't create physical arrays for result");return}let ft=yt;u.ret.physicalType=="VARCHAR"&&(ft=new Array(u.rows));let Hn=[];for(let it=0;it<u.args.length;++it)Hn.push(null);for(let it=0;it<u.rows;++it){for(let Be=0;Be<u.args.length;++Be)Hn[Be]=T[Be](it);let jt=d.func(...Hn);ft[it]=jt,xt[it]=jt==null?0:1}let F=0;switch(u.ret.physicalType){case"VARCHAR":{let it=new Array(0);F=t._malloc(u.rows*Ul("DOUBLE"));let jt=ua(t,F,u.rows),Be=0;for(let _t=0;_t<u.rows;++_t){let De=kf.encode(ft[_t]||"");it.push(De),jt[_t]=De.length,Be+=De.length}let de=t._malloc(Be),Bt=t.HEAPU8.subarray(de,de+Be),kt=0;for(let _t=0;_t<u.rows;++_t){yt[_t]=kt;let De=it[_t];Bt.subarray(kt,kt+De.length).set(De),kt+=De.length}}}let ue=3*8,wi=t._malloc(ue),Qr=ua(t,wi,3);Qr[0]=nt,Qr[1]=gt,Qr[2]=F,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=wi,t.HEAPF64[(e>>3)+2]=0}catch(d){Cl(t,e,d.toString())}}function vy(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var Sy=vy();function Dr(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function Pn(r,t,e){let n=r.HEAPU8.subarray(t,t+e),i=new Uint8Array(new ArrayBuffer(n.byteLength));return i.set(n),i}function G(r,t,e){return Sy(r.HEAPU8.subarray(t,t+e))}function ut(r,t,e,n){let i=r.stackSave(),s=r.stackAlloc(3*8);e.unshift("number"),n.unshift(s),r.ccall(t,null,e,n);let o=r.HEAPF64[(s>>3)+0],l=r.HEAPF64[(s>>3)+1],d=r.HEAPF64[(s>>3)+2];return r.stackRestore(i),[o,l,d]}function It(r){r.ccall("duckdb_web_clear_response",null,[],[])}var da=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var Iy=new TextEncoder;var fa=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,i]=ut(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(G(this.mod,n,i));It(this.mod)}reset(){let[t,e,n]=ut(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(G(this.mod,e,n));It(this.mod)}getVersion(){let[t,e,n]=ut(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(G(this.mod,e,n));let i=G(this.mod,e,n);return It(this.mod),i}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,i]=ut(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));let s=G(this.mod,n,i);return It(this.mod),JSON.parse(s)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new la(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s));let o=Pn(this.mod,i,s);return It(this.mod),o}startPendingQuery(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s));if(i==0)return null;let o=Pn(this.mod,i,s);return It(this.mod),o}pollPendingQuery(t){let[e,n,i]=ut(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));if(n==0)return null;let s=Pn(this.mod,n,i);return It(this.mod),s}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,i]=ut(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));let s=Pn(this.mod,n,i);return It(this.mod),s}getTableNames(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s));let o=G(this.mod,i,s);return It(this.mod),JSON.parse(o)}createScalarFunction(t,e,n,i){let s={functionId:this._nextUDFId,name:e,returnType:gi(n)},o={functionId:s.functionId,connectionId:t,name:e,returnType:n,func:i};this._nextUDFId+=1;let[l,d,h]=ut(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(s)]);if(l!==0)throw new Error(G(this.mod,d,h));if(It(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(o.functionId,o),this.pthread)for(let u of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])u.postMessage({cmd:"registerUDFFunction",udf:o})}createPrepared(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s));return It(this.mod),i}closePrepared(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s));It(this.mod)}runPrepared(t,e,n){let[i,s,o]=ut(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(G(this.mod,s,o));let l=Pn(this.mod,s,o);return It(this.mod),l}sendPrepared(t,e,n){let[i,s,o]=ut(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(G(this.mod,s,o));let l=Pn(this.mod,s,o);return It(this.mod),l}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let i=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(i,i+e.length).set(e);let o=n?JSON.stringify(n):"",[l,d,h]=ut(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,i,e.length,o]);if(l!==0)throw new Error(G(this.mod,d,h))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let h in n.columns)n.columnsFlat.push(oa(h,n.columns[h]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,l,d]=ut(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(G(this.mod,l,d))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let h in n.columns)n.columnsFlat.push(oa(h,n.columns[h]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,l,d]=ut(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(G(this.mod,l,d))}globFiles(t){let[e,n,i]=ut(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));let s=G(this.mod,n,i);It(this.mod);let o=JSON.parse(s);return o==null?[]:o}registerFileURL(t,e,n,i=!1){e===void 0&&(e=t);let[s,o,l]=ut(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,i]);if(s!==0)throw new Error(G(this.mod,o,l));It(this.mod)}registerFileText(t,e){let n=Iy.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[s,o,l]=ut(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(s!==0)throw new Error(G(this.mod,o,l));It(this.mod)}registerFileHandle(t,e,n,i){let[s,o,l]=ut(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,i]);if(s!==0)throw new Error(G(this.mod,o,l));if(It(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let d of this.pthread.runningWorkers)d.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let d of this.pthread.unusedWorkers)d.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,i]=ut(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));It(this.mod)}dropFiles(){let[t,e,n]=ut(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(G(this.mod,e,n));It(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s));It(this.mod)}copyFileToBuffer(t){let[e,n,i]=ut(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));let s=this.mod.HEAPU8.subarray(n,n+i),o=new Uint8Array(s.length);return o.set(s),It(this.mod),o}collectFileStatistics(t,e){let[n,i,s]=ut(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(G(this.mod,i,s))}exportFileStatistics(t){let[e,n,i]=ut(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(G(this.mod,n,i));return new da(this.mod.HEAPU8.subarray(n,n+i))}};var ha=class extends fa{constructor(e,n,i,s){super(e,n);this.mainModuleURL=i,this.pthreadWorkerURL=s}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let i=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let o=(async()=>{var nt;let l=new Request(this.mainModuleURL),d=await fetch(l),h=d.headers.get("content-length"),u=h&&parseInt(h,10)||0,g=new Date,w={startedAt:g,updatedAt:g,bytesTotal:u||0,bytesLoaded:0},T={transform(yt,gt){w.bytesLoaded+=yt.byteLength;let xt=new Date;if(xt.getTime()-w.updatedAt.getTime()<20){w.updatedAt=xt,gt.enqueue(yt);return}for(let ft of i)ft(w);gt.enqueue(yt)}},tt=new TransformStream(T);return new Response((nt=d.body)==null?void 0:nt.pipeThrough(tt),d)})();WebAssembly.instantiateStreaming(o,e).then(l=>{n(l.instance,l.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let s=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(s),e).then(o=>{n(o.instance,o.module)})}else if(typeof XMLHttpRequest=="function"){let s=new XMLHttpRequest,o=this.mainModuleURL,l=new Date,d={startedAt:l,updatedAt:l,bytesTotal:0,bytesLoaded:0};s.open("GET",o),s.responseType="arraybuffer",s.onerror=h=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+h}),new Error(h.toString())},s.onprogress=h=>{d.bytesTotal=h.total,d.bytesLoaded=h.loaded;let u=new Date;if(u.getTime()-d.updatedAt.getTime()<20){d.updatedAt=u;return}for(let g of i)g(d)},s.onload=()=>{WebAssembly.instantiate(s.response,e).then(h=>{n(h.instance,h.module)}).catch(h=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+h}),new Error(h)})},s.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let o=new Request(this.mainModuleURL),d=await(await fetch(o)).arrayBuffer();WebAssembly.instantiate(d,e).then(h=>{n(h.instance,h.module)})})();return[]}};var pa=class extends ha{constructor(t,e,n,i=null){super(t,e,n,i)}instantiateImpl(t){return Of({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var mn=Ca(Lf()),Uf=function(r,t,e){var n;if((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")){let i=`${r==null?void 0:r.endpoint}`,s=i.indexOf("://")+3;return i.substring(s)}else return r!=null&&r.endpoint?`${e}.${r==null?void 0:r.endpoint}`:`${e}.s3.amazonaws.com`};function Ty(r,t,e){var i,s,o,l;let n=Nf(t);return{url:n.path,query:"",host:Uf(r,t,n.bucket),region:(i=r==null?void 0:r.region)!=null?i:"",service:"s3",method:e,accessKeyId:(s=r==null?void 0:r.accessKeyId)!=null?s:"",secretAccessKey:(o=r==null?void 0:r.secretAccessKey)!=null?o:"",sessionToken:(l=r==null?void 0:r.sessionToken)!=null?l:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Ay(r,t=!1){let e="0123456789ABCDEF",n="";for(let i=0;i<r.length;i++){let s=r[i];s>="A"&&s<="Z"||s>="a"&&s<="z"||s>="0"&&s<="9"||s=="_"||s=="-"||s=="~"||s=="."?n+=s:s=="/"?t?n+="%2F":n+=s:(n+="%",n+=e[s.charCodeAt(0)>>4],n+=e[s.charCodeAt(0)&15])}return n}function Ey(r,t=null){var tt;let e=(tt=t==null?void 0:t.contentHash)!=null?tt:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",r.datetimeNow),n.set("x-amz-content-sha256",e),r.sessionToken&&n.set("x-amz-security-token",r.sessionToken);let i="";t!=null&&t.contentType&&(i+="content-type;"),i+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(i+=";x-amz-security-token");let s=r.method+`
`+Ay(r.url)+`
`+r.query;t!=null&&t.contentType&&(s+=`
content-type:`+(t==null?void 0:t.contentType)),s+=`
host:`+r.host+`
x-amz-content-sha256:`+e+`
x-amz-date:`+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(s+=`
x-amz-security-token:`+r.sessionToken),s+=`

`+i+`
`+e;let o=(0,mn.sha256)(s),l=`AWS4-HMAC-SHA256
`+r.datetimeNow+`
`+r.dateNow+"/"+r.region+"/"+r.service+`/aws4_request
`+o,d="AWS4"+r.secretAccessKey,h=mn.sha256.hmac.arrayBuffer(d,r.dateNow),u=mn.sha256.hmac.arrayBuffer(h,r.region),g=mn.sha256.hmac.arrayBuffer(u,r.service),w=mn.sha256.hmac.arrayBuffer(g,"aws4_request"),T=mn.sha256.hmac(w,l);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+i+", Signature="+T),n}var Fy=function(r,t,e,n=null,i=null){let s=Ty(r,t,e),o={contentType:n,contentHash:i?mn.sha256.hex(i):null};return Ey(s,o)};function yn(r,t,e,n,i=null,s=null){((t==null?void 0:t.accessKeyId)||(t==null?void 0:t.sessionToken))&&(Fy(t,e,n,i,s).forEach((l,d)=>{r.setRequestHeader(d,l)}),i&&r.setRequestHeader("content-type",i))}function Nf(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=r.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=r.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function bn(r,t){var n;let e=Nf(t);return(n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")?`${r==null?void 0:r.endpoint}/${e.bucket}`+e.path:"https://"+Uf(r,t,e.bucket)+e.path}var dt={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,t){try{let e=dt._fileInfoCache.get(t),[n,i,s]=ut(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(s===0)return e;let o=G(r,i,s);It(r);let l=JSON.parse(o);if(l==null)return null;let d={...l,blob:null};return dt._fileInfoCache.set(t,d),d}catch(e){return null}},getGlobalFileInfo(r){var t;try{let[e,n,i]=ut(r,"duckdb_web_get_global_file_info",["number"],[((t=dt._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(i===0)return dt._globalFileInfo;let s=G(r,n,i);It(r);let o=JSON.parse(s);return o==null?null:(dt._globalFileInfo={...o,blob:null},dt._globalFileInfo)}catch(e){return null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,t,e)=>{var n;try{dt._fileInfoCache.delete(t);let i=dt.getFileInfo(r,t);switch(i==null?void 0:i.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error(`Opening file ${i.fileName} failed: cannot open file with both read and write flags set`);if(e&32)throw new Error(`Opening file ${i.fileName} failed: appending to HTTP/S3 files is not supported`);if(e&2){let o=new XMLHttpRequest;if(i.dataProtocol==5?(o.open("HEAD",bn(i.s3Config,i.dataUrl),!1),yn(o,i.s3Config,i.dataUrl,"HEAD")):o.open("HEAD",i.dataUrl,!1),o.send(null),o.status!=200&&o.status!=404)throw new Error(`Opening file ${i.fileName} failed: Unexpected return status from server (${o.status})`);if(o.status==404&&!(e&8||e&16))throw new Error(`Opening file ${i.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let l=r._malloc(1),d=new Uint8Array;r.HEAPU8.set(d,l);let h=r._malloc(2*8);return r.HEAPF64[(h>>3)+0]=1,r.HEAPF64[(h>>3)+1]=l,h}else if(e!=1)throw new Error(`Opening file ${i.fileName} failed: unsupported file flags: ${e}`);let s=null;try{let o=new XMLHttpRequest;i.dataProtocol==5?(o.open("HEAD",bn(i.s3Config,i.dataUrl),!1),yn(o,i.s3Config,i.dataUrl,"HEAD")):o.open("HEAD",i.dataUrl,!1),o.setRequestHeader("Range","bytes=0-"),o.send(null);let l=o.getResponseHeader("Content-Length");if(o.status==206&&l!==null){let d=r._malloc(16);return r.HEAPF64[(d>>3)+0]=+l,r.HEAPF64[(d>>3)+1]=0,d}}catch(o){s=o,console.warn(`HEAD request with range header failed: ${o}`)}if(i.allowFullHttpReads){console.warn(`falling back to full HTTP read for: ${i.dataUrl}`);let o=new XMLHttpRequest;if(i.dataProtocol==5?(o.open("GET",bn(i.s3Config,i.dataUrl),!1),yn(o,i.s3Config,i.dataUrl,"GET")):o.open("GET",i.dataUrl,!1),o.responseType="arraybuffer",o.send(null),o.status==200){let l=r._malloc(o.response.byteLength),d=new Uint8Array(o.response,0,o.response.byteLength);r.HEAPU8.set(d,l);let h=r._malloc(2*8);return r.HEAPF64[(h>>3)+0]=o.response.byteLength,r.HEAPF64[(h>>3)+1]=l,h}}if(s!=null)throw new Error(`Reading file ${i.fileName} failed with error: ${s}`);return 0}case 2:{let s=(n=dt._files)==null?void 0:n.get(i.fileName);if(s){let d=r._malloc(16);return r.HEAPF64[(d>>3)+0]=s.size,r.HEAPF64[(d>>3)+1]=0,d}console.warn(`Buffering missing file: ${i.fileName}`);let o=r._malloc(2*8),l=r._malloc(1);return r.HEAPF64[(o>>3)+0]=1,r.HEAPF64[(o>>3)+1]=l,o}}}catch(i){console.error(i.toString()),Dr(r,i.toString())}return 0},glob:(r,t,e)=>{try{let n=G(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=dt.getGlobalFileInfo(r);i.open("HEAD",bn(s==null?void 0:s.s3Config,n),!1),yn(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);if(i.send(null),i.status!=200&&i.status!==206){Dr(r,`HEAD request failed: ${n}`);return}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[n])}}catch(n){return Dr(r,n.toString()),0}},checkFile:(r,t,e)=>{try{let n=G(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=dt.getGlobalFileInfo(r);i.open("HEAD",bn(s==null?void 0:s.s3Config,n),!1),yn(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);return i.send(null),i.status==206||i.status==200}}catch(n){return!1}return!1},syncFile:(r,t)=>{},closeFile:(r,t)=>{var n;let e=dt.getFileInfo(r,t);switch(dt._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let i=(n=dt._files)==null?void 0:n.get(e.fileName);if(!i)throw new Error(`No OPFS access handle registered with name: ${e.fileName}`);return i.flush()}}},truncateFile:(r,t,e)=>{var i;let n=dt.getFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 4:Dr(r,"Cannot truncate a http file");return;case 5:Dr(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:Dr(r,"truncateFile not implemented");return;case 3:{let s=(i=dt._files)==null?void 0:i.get(n.fileName);if(!s)throw new Error(`No OPFS access handle registered with name: ${n.fileName}`);return s.truncate(e)}}return 0},readFile(r,t,e,n,i){var s,o;try{let l=dt.getFileInfo(r,t);switch(l==null?void 0:l.dataProtocol){case 4:case 5:{if(!l.dataUrl)throw new Error(`Missing data URL for file ${t}`);try{let d=new XMLHttpRequest;if(l.dataProtocol==5?(d.open("GET",bn(l==null?void 0:l.s3Config,l.dataUrl),!1),yn(d,l==null?void 0:l.s3Config,l.dataUrl,"GET")):d.open("GET",l.dataUrl,!1),d.responseType="arraybuffer",d.setRequestHeader("Range",`bytes=${i}-${i+n-1}`),d.send(null),d.status==206||d.status==200&&n==d.response.byteLength&&i==0){let h=new Uint8Array(d.response,0,Math.min(d.response.byteLength,n));return r.HEAPU8.set(h,e),h.byteLength}else throw d.status==200?new Error(`Range request for ${l.dataUrl} did not return a partial response: ${d.status} "${d.statusText}"`):new Error(`Range request for ${l.dataUrl} did returned non-success status: ${d.status} "${d.statusText}"`)}catch(d){throw new Error(`Range request for ${l.dataUrl} failed with error: ${d}"`)}}case 2:{let d=(s=dt._files)==null?void 0:s.get(l.fileName);if(!d)throw new Error(`No HTML5 file registered with name: ${l.fileName}`);let h=d.slice(i,i+n),u=new Uint8Array(new FileReaderSync().readAsArrayBuffer(h));return r.HEAPU8.set(u,e),u.byteLength}case 3:{let d=(o=dt._files)==null?void 0:o.get(l.fileName);if(!d)throw new Error(`No OPFS access handle registered with name: ${l.fileName}`);let h=r.HEAPU8.subarray(e,e+n);return d.read(h,{at:i})}}return 0}catch(l){return Dr(r,l.toString()),0}},writeFile:(r,t,e,n,i)=>{var o;let s=dt.getFileInfo(r,t);switch(s==null?void 0:s.dataProtocol){case 4:return Dr(r,"Cannot write to HTTP file"),0;case 5:{let l=r.HEAPU8.subarray(e,e+n),d=new XMLHttpRequest;return d.open("PUT",bn(s==null?void 0:s.s3Config,s.dataUrl),!1),yn(d,s==null?void 0:s.s3Config,s.dataUrl,"PUT","",l),d.send(l),n}case 2:return Dr(r,"cannot write using the html5 file reader api"),0;case 3:{let l=(o=dt._files)==null?void 0:o.get(s.fileName);if(!l)throw new Error(`No OPFS access handle registered with name: ${s.fileName}`);let d=r.HEAPU8.subarray(e,e+n);return l.write(d,{at:i})}}return 0},getLastFileModificationTime:(r,t)=>{var n;let e=dt.getFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=dt._files)==null?void 0:n.get(e.fileName)))throw Error(`No handle available for file: ${e.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,t,e)=>{let n=G(r,t,e);return console.log(`checkDirectory: ${n}`),!1},createDirectory:(r,t,e)=>{let n=G(r,t,e);console.log(`createDirectory: ${n}`)},removeDirectory:(r,t,e)=>{let n=G(r,t,e);console.log(`removeDirectory: ${n}`)},listDirectoryEntries:(r,t,e)=>{let n=G(r,t,e);return console.log(`listDirectoryEntries: ${n}`),!1},moveFile:(r,t,e,n,i)=>{var d,h;let s=G(r,t,e),o=G(r,n,i),l=(d=dt._files)==null?void 0:d.get(s);l!==void 0&&(dt._files.delete(l),dt._files.set(o,l));for(let[u,g]of((h=dt._fileInfoCache)==null?void 0:h.entries())||[])if(g.dataUrl==s){dt._fileInfoCache.delete(u);break}return!0},removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,i,s,o)=>{Cf(dt,r,t,e,n,i,s,o)}};var Nl=class extends aa{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new pa(this,dt,t,e).instantiate(n)}};function jf(){let r=new Nl;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}jf();return Lp(xy);})();
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
